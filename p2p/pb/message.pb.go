// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: message.proto

/*
Package p2ppb is a generated protocol buffer package.

It is generated from these files:
	message.proto

It has these top-level messages:
	MessageHeader
	Peers
	PeerInfo
*/
package p2ppb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type MessageHeader struct {
	Magic        uint32 `protobuf:"varint,1,opt,name=magic,proto3" json:"magic,omitempty"`
	Code         uint32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	DataLength   uint32 `protobuf:"varint,3,opt,name=data_length,json=dataLength,proto3" json:"data_length,omitempty"`
	DataChecksum uint32 `protobuf:"varint,4,opt,name=data_checksum,json=dataChecksum,proto3" json:"data_checksum,omitempty"`
	Reserved     []byte `protobuf:"bytes,5,opt,name=reserved,proto3" json:"reserved,omitempty"`
}

func (m *MessageHeader) Reset()                    { *m = MessageHeader{} }
func (m *MessageHeader) String() string            { return proto.CompactTextString(m) }
func (*MessageHeader) ProtoMessage()               {}
func (*MessageHeader) Descriptor() ([]byte, []int) { return fileDescriptorMessage, []int{0} }

func (m *MessageHeader) GetMagic() uint32 {
	if m != nil {
		return m.Magic
	}
	return 0
}

func (m *MessageHeader) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *MessageHeader) GetDataLength() uint32 {
	if m != nil {
		return m.DataLength
	}
	return 0
}

func (m *MessageHeader) GetDataChecksum() uint32 {
	if m != nil {
		return m.DataChecksum
	}
	return 0
}

func (m *MessageHeader) GetReserved() []byte {
	if m != nil {
		return m.Reserved
	}
	return nil
}

type Peers struct {
	Peers []*PeerInfo `protobuf:"bytes,1,rep,name=peers" json:"peers,omitempty"`
}

func (m *Peers) Reset()                    { *m = Peers{} }
func (m *Peers) String() string            { return proto.CompactTextString(m) }
func (*Peers) ProtoMessage()               {}
func (*Peers) Descriptor() ([]byte, []int) { return fileDescriptorMessage, []int{1} }

func (m *Peers) GetPeers() []*PeerInfo {
	if m != nil {
		return m.Peers
	}
	return nil
}

type PeerInfo struct {
	Id    string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Addrs []string `protobuf:"bytes,2,rep,name=addrs" json:"addrs,omitempty"`
}

func (m *PeerInfo) Reset()                    { *m = PeerInfo{} }
func (m *PeerInfo) String() string            { return proto.CompactTextString(m) }
func (*PeerInfo) ProtoMessage()               {}
func (*PeerInfo) Descriptor() ([]byte, []int) { return fileDescriptorMessage, []int{2} }

func (m *PeerInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PeerInfo) GetAddrs() []string {
	if m != nil {
		return m.Addrs
	}
	return nil
}

func init() {
	proto.RegisterType((*MessageHeader)(nil), "p2ppb.MessageHeader")
	proto.RegisterType((*Peers)(nil), "p2ppb.Peers")
	proto.RegisterType((*PeerInfo)(nil), "p2ppb.PeerInfo")
}

func init() { proto.RegisterFile("message.proto", fileDescriptorMessage) }

var fileDescriptorMessage = []byte{
	// 228 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x3c, 0x90, 0xc1, 0x4a, 0xc4, 0x30,
	0x10, 0x86, 0x49, 0xbb, 0x91, 0xdd, 0xd9, 0xad, 0xc2, 0xe0, 0x21, 0x78, 0xb1, 0x54, 0x84, 0x9e,
	0x8a, 0xac, 0x8f, 0xe0, 0x45, 0x41, 0x41, 0xf2, 0x02, 0x92, 0xed, 0x8c, 0xdd, 0xa2, 0x6d, 0x43,
	0x52, 0x7d, 0x19, 0x5f, 0x56, 0x32, 0xd5, 0xbd, 0xcd, 0xff, 0x7d, 0xff, 0x21, 0x7f, 0xa0, 0x18,
	0x38, 0x46, 0xd7, 0x71, 0xe3, 0xc3, 0x34, 0x4f, 0xa8, 0xfd, 0xde, 0xfb, 0x43, 0xf5, 0xa3, 0xa0,
	0x78, 0x59, 0xc4, 0x23, 0x3b, 0xe2, 0x80, 0x97, 0xa0, 0x07, 0xd7, 0xf5, 0xad, 0x51, 0xa5, 0xaa,
	0x0b, 0xbb, 0x04, 0x44, 0x58, 0xb5, 0x13, 0xb1, 0xc9, 0x04, 0xca, 0x8d, 0xd7, 0xb0, 0x25, 0x37,
	0xbb, 0xb7, 0x4f, 0x1e, 0xbb, 0xf9, 0x68, 0x72, 0x51, 0x90, 0xd0, 0xb3, 0x10, 0xbc, 0x81, 0x42,
	0x0a, 0xed, 0x91, 0xdb, 0x8f, 0xf8, 0x35, 0x98, 0x95, 0x54, 0x76, 0x09, 0x3e, 0xfc, 0x31, 0xbc,
	0x82, 0x75, 0xe0, 0xc8, 0xe1, 0x9b, 0xc9, 0xe8, 0x52, 0xd5, 0x3b, 0x7b, 0xca, 0x55, 0x03, 0xfa,
	0x95, 0x39, 0x44, 0xbc, 0x05, 0xed, 0xd3, 0x61, 0x54, 0x99, 0xd7, 0xdb, 0xfd, 0x45, 0x23, 0xaf,
	0x6f, 0x92, 0x7c, 0x1a, 0xdf, 0x27, 0xbb, 0xd8, 0xea, 0x0e, 0xd6, 0xff, 0x08, 0xcf, 0x21, 0xeb,
	0x49, 0x46, 0x6c, 0x6c, 0xd6, 0x53, 0xda, 0xe5, 0x88, 0x42, 0x34, 0x59, 0x99, 0xd7, 0x1b, 0xbb,
	0x84, 0xc3, 0x99, 0xfc, 0xc6, 0xfd, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x62, 0xb4, 0x2c, 0x0a,
	0x1e, 0x01, 0x00, 0x00,
}
