// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dpos.proto

package dpospb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type PeriodContext struct {
	Period     [][]byte `protobuf:"bytes,1,rep,name=period" json:"period,omitempty"`
	NextPeriod [][]byte `protobuf:"bytes,2,rep,name=next_period,json=nextPeriod" json:"next_period,omitempty"`
}

func (m *PeriodContext) Reset()         { *m = PeriodContext{} }
func (m *PeriodContext) String() string { return proto.CompactTextString(m) }
func (*PeriodContext) ProtoMessage()    {}
func (*PeriodContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_dpos_c5a3ff7a262bc942, []int{0}
}
func (m *PeriodContext) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PeriodContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PeriodContext.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PeriodContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeriodContext.Merge(dst, src)
}
func (m *PeriodContext) XXX_Size() int {
	return m.Size()
}
func (m *PeriodContext) XXX_DiscardUnknown() {
	xxx_messageInfo_PeriodContext.DiscardUnknown(m)
}

var xxx_messageInfo_PeriodContext proto.InternalMessageInfo

func (m *PeriodContext) GetPeriod() [][]byte {
	if m != nil {
		return m.Period
	}
	return nil
}

func (m *PeriodContext) GetNextPeriod() [][]byte {
	if m != nil {
		return m.NextPeriod
	}
	return nil
}

type CandidateContext struct {
	Height     int32        `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Candidates []*Candidate `protobuf:"bytes,2,rep,name=candidates" json:"candidates,omitempty"`
}

func (m *CandidateContext) Reset()         { *m = CandidateContext{} }
func (m *CandidateContext) String() string { return proto.CompactTextString(m) }
func (*CandidateContext) ProtoMessage()    {}
func (*CandidateContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_dpos_c5a3ff7a262bc942, []int{1}
}
func (m *CandidateContext) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CandidateContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CandidateContext.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CandidateContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CandidateContext.Merge(dst, src)
}
func (m *CandidateContext) XXX_Size() int {
	return m.Size()
}
func (m *CandidateContext) XXX_DiscardUnknown() {
	xxx_messageInfo_CandidateContext.DiscardUnknown(m)
}

var xxx_messageInfo_CandidateContext proto.InternalMessageInfo

func (m *CandidateContext) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *CandidateContext) GetCandidates() []*Candidate {
	if m != nil {
		return m.Candidates
	}
	return nil
}

type Candidate struct {
	Addr  []byte `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Votes int32  `protobuf:"varint,2,opt,name=votes,proto3" json:"votes,omitempty"`
	Peer  string `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
}

func (m *Candidate) Reset()         { *m = Candidate{} }
func (m *Candidate) String() string { return proto.CompactTextString(m) }
func (*Candidate) ProtoMessage()    {}
func (*Candidate) Descriptor() ([]byte, []int) {
	return fileDescriptor_dpos_c5a3ff7a262bc942, []int{2}
}
func (m *Candidate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Candidate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Candidate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Candidate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Candidate.Merge(dst, src)
}
func (m *Candidate) XXX_Size() int {
	return m.Size()
}
func (m *Candidate) XXX_DiscardUnknown() {
	xxx_messageInfo_Candidate.DiscardUnknown(m)
}

var xxx_messageInfo_Candidate proto.InternalMessageInfo

func (m *Candidate) GetAddr() []byte {
	if m != nil {
		return m.Addr
	}
	return nil
}

func (m *Candidate) GetVotes() int32 {
	if m != nil {
		return m.Votes
	}
	return 0
}

func (m *Candidate) GetPeer() string {
	if m != nil {
		return m.Peer
	}
	return ""
}

func init() {
	proto.RegisterType((*PeriodContext)(nil), "dpospb.PeriodContext")
	proto.RegisterType((*CandidateContext)(nil), "dpospb.candidateContext")
	proto.RegisterType((*Candidate)(nil), "dpospb.Candidate")
}
func (m *PeriodContext) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeriodContext) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Period) > 0 {
		for _, b := range m.Period {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDpos(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.NextPeriod) > 0 {
		for _, b := range m.NextPeriod {
			dAtA[i] = 0x12
			i++
			i = encodeVarintDpos(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *CandidateContext) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CandidateContext) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDpos(dAtA, i, uint64(m.Height))
	}
	if len(m.Candidates) > 0 {
		for _, msg := range m.Candidates {
			dAtA[i] = 0x12
			i++
			i = encodeVarintDpos(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Candidate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Candidate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Addr) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDpos(dAtA, i, uint64(len(m.Addr)))
		i += copy(dAtA[i:], m.Addr)
	}
	if m.Votes != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDpos(dAtA, i, uint64(m.Votes))
	}
	if len(m.Peer) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDpos(dAtA, i, uint64(len(m.Peer)))
		i += copy(dAtA[i:], m.Peer)
	}
	return i, nil
}

func encodeVarintDpos(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PeriodContext) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Period) > 0 {
		for _, b := range m.Period {
			l = len(b)
			n += 1 + l + sovDpos(uint64(l))
		}
	}
	if len(m.NextPeriod) > 0 {
		for _, b := range m.NextPeriod {
			l = len(b)
			n += 1 + l + sovDpos(uint64(l))
		}
	}
	return n
}

func (m *CandidateContext) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovDpos(uint64(m.Height))
	}
	if len(m.Candidates) > 0 {
		for _, e := range m.Candidates {
			l = e.Size()
			n += 1 + l + sovDpos(uint64(l))
		}
	}
	return n
}

func (m *Candidate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovDpos(uint64(l))
	}
	if m.Votes != 0 {
		n += 1 + sovDpos(uint64(m.Votes))
	}
	l = len(m.Peer)
	if l > 0 {
		n += 1 + l + sovDpos(uint64(l))
	}
	return n
}

func sovDpos(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDpos(x uint64) (n int) {
	return sovDpos(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PeriodContext) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDpos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeriodContext: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeriodContext: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Period", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDpos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDpos
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Period = append(m.Period, make([]byte, postIndex-iNdEx))
			copy(m.Period[len(m.Period)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPeriod", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDpos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDpos
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextPeriod = append(m.NextPeriod, make([]byte, postIndex-iNdEx))
			copy(m.NextPeriod[len(m.NextPeriod)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDpos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDpos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CandidateContext) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDpos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: candidateContext: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: candidateContext: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDpos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Candidates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDpos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDpos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Candidates = append(m.Candidates, &Candidate{})
			if err := m.Candidates[len(m.Candidates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDpos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDpos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Candidate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDpos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Candidate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Candidate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDpos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDpos
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = append(m.Addr[:0], dAtA[iNdEx:postIndex]...)
			if m.Addr == nil {
				m.Addr = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Votes", wireType)
			}
			m.Votes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDpos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Votes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDpos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDpos
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDpos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDpos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDpos(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDpos
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDpos
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDpos
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDpos
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDpos
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDpos(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDpos = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDpos   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("dpos.proto", fileDescriptor_dpos_c5a3ff7a262bc942) }

var fileDescriptor_dpos_c5a3ff7a262bc942 = []byte{
	// 223 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0x4f, 0x4b, 0x86, 0x30,
	0x1c, 0xc7, 0x5d, 0xa6, 0xe0, 0x4f, 0x83, 0x1a, 0x11, 0x3b, 0x2d, 0xf1, 0xe4, 0x49, 0xa8, 0xde,
	0x41, 0x5e, 0xea, 0x16, 0xbb, 0x47, 0x68, 0x1b, 0xe9, 0xc5, 0x8d, 0x39, 0xc2, 0x97, 0xd1, 0xcb,
	0xea, 0xe8, 0xb1, 0x63, 0xe8, 0x1b, 0x79, 0xd8, 0xe6, 0x23, 0xde, 0xbe, 0xff, 0xf6, 0xd9, 0x18,
	0x00, 0x57, 0x72, 0xac, 0x94, 0x96, 0x46, 0xe2, 0xd8, 0x6a, 0xd5, 0x16, 0x2f, 0x70, 0xf5, 0x26,
	0x74, 0x2f, 0x79, 0x2d, 0x07, 0x23, 0x26, 0x83, 0xef, 0x20, 0x56, 0x2e, 0x20, 0x28, 0x0f, 0xcb,
	0x8c, 0x6d, 0x0e, 0xdf, 0x43, 0x3a, 0x88, 0xc9, 0x7c, 0x6c, 0xe5, 0x85, 0x2b, 0xc1, 0x46, 0xfe,
	0x7c, 0xf1, 0x0e, 0xd7, 0x9f, 0xcd, 0xc0, 0x7b, 0xde, 0x18, 0x71, 0x80, 0x75, 0xa2, 0xff, 0xea,
	0x0c, 0x41, 0x39, 0x2a, 0x23, 0xb6, 0x39, 0xfc, 0x00, 0xb0, 0x6f, 0x47, 0xc7, 0x4a, 0x1f, 0x6f,
	0x2a, 0xff, 0xa4, 0xaa, 0x3e, 0x37, 0xec, 0x30, 0x2a, 0x5e, 0x21, 0xd9, 0x0b, 0x8c, 0xe1, 0xb2,
	0xe1, 0x5c, 0x3b, 0x6a, 0xc6, 0x9c, 0xc6, 0xb7, 0x10, 0x7d, 0x4b, 0x8f, 0xb3, 0x57, 0x79, 0x63,
	0x97, 0x4a, 0x08, 0x4d, 0xc2, 0x1c, 0x95, 0x09, 0x73, 0xfa, 0x99, 0xfc, 0x2e, 0x14, 0xcd, 0x0b,
	0x45, 0xff, 0x0b, 0x45, 0x3f, 0x2b, 0x0d, 0xe6, 0x95, 0x06, 0x7f, 0x2b, 0x0d, 0xda, 0xd8, 0x7d,
	0xce, 0xd3, 0x29, 0x00, 0x00, 0xff, 0xff, 0x14, 0x0e, 0x69, 0xac, 0x2a, 0x01, 0x00, 0x00,
}
