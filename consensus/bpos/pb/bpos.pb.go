// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bpos.proto

package bpospb

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Dynasty struct {
	Delegates []*Delegate `protobuf:"bytes,1,rep,name=delegates,proto3" json:"delegates,omitempty"`
	Addrs     [][]byte    `protobuf:"bytes,2,rep,name=addrs,proto3" json:"addrs,omitempty"`
	Peers     []string    `protobuf:"bytes,3,rep,name=peers,proto3" json:"peers,omitempty"`
}

func (m *Dynasty) Reset()         { *m = Dynasty{} }
func (m *Dynasty) String() string { return proto.CompactTextString(m) }
func (*Dynasty) ProtoMessage()    {}
func (*Dynasty) Descriptor() ([]byte, []int) {
	return fileDescriptor_d02302bca865a0e7, []int{0}
}
func (m *Dynasty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Dynasty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Dynasty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Dynasty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dynasty.Merge(m, src)
}
func (m *Dynasty) XXX_Size() int {
	return m.Size()
}
func (m *Dynasty) XXX_DiscardUnknown() {
	xxx_messageInfo_Dynasty.DiscardUnknown(m)
}

var xxx_messageInfo_Dynasty proto.InternalMessageInfo

func (m *Dynasty) GetDelegates() []*Delegate {
	if m != nil {
		return m.Delegates
	}
	return nil
}

func (m *Dynasty) GetAddrs() [][]byte {
	if m != nil {
		return m.Addrs
	}
	return nil
}

func (m *Dynasty) GetPeers() []string {
	if m != nil {
		return m.Peers
	}
	return nil
}

type Delegate struct {
	Addr                   []byte `protobuf:"bytes,1,opt,name=Addr,proto3" json:"Addr,omitempty"`
	PeerID                 string `protobuf:"bytes,2,opt,name=PeerID,proto3" json:"PeerID,omitempty"`
	Votes                  int64  `protobuf:"varint,3,opt,name=Votes,proto3" json:"Votes,omitempty"`
	PledgeAmount           int64  `protobuf:"varint,4,opt,name=PledgeAmount,proto3" json:"PledgeAmount,omitempty"`
	Score                  int64  `protobuf:"varint,5,opt,name=Score,proto3" json:"Score,omitempty"`
	CurDynastyOutputNumber int64  `protobuf:"varint,6,opt,name=CurDynastyOutputNumber,proto3" json:"CurDynastyOutputNumber,omitempty"`
	TotalOutputNumber      int64  `protobuf:"varint,7,opt,name=TotalOutputNumber,proto3" json:"TotalOutputNumber,omitempty"`
}

func (m *Delegate) Reset()         { *m = Delegate{} }
func (m *Delegate) String() string { return proto.CompactTextString(m) }
func (*Delegate) ProtoMessage()    {}
func (*Delegate) Descriptor() ([]byte, []int) {
	return fileDescriptor_d02302bca865a0e7, []int{1}
}
func (m *Delegate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Delegate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Delegate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Delegate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Delegate.Merge(m, src)
}
func (m *Delegate) XXX_Size() int {
	return m.Size()
}
func (m *Delegate) XXX_DiscardUnknown() {
	xxx_messageInfo_Delegate.DiscardUnknown(m)
}

var xxx_messageInfo_Delegate proto.InternalMessageInfo

func (m *Delegate) GetAddr() []byte {
	if m != nil {
		return m.Addr
	}
	return nil
}

func (m *Delegate) GetPeerID() string {
	if m != nil {
		return m.PeerID
	}
	return ""
}

func (m *Delegate) GetVotes() int64 {
	if m != nil {
		return m.Votes
	}
	return 0
}

func (m *Delegate) GetPledgeAmount() int64 {
	if m != nil {
		return m.PledgeAmount
	}
	return 0
}

func (m *Delegate) GetScore() int64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *Delegate) GetCurDynastyOutputNumber() int64 {
	if m != nil {
		return m.CurDynastyOutputNumber
	}
	return 0
}

func (m *Delegate) GetTotalOutputNumber() int64 {
	if m != nil {
		return m.TotalOutputNumber
	}
	return 0
}

type EternalBlockMsg struct {
	Hash      []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Timestamp int64  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *EternalBlockMsg) Reset()         { *m = EternalBlockMsg{} }
func (m *EternalBlockMsg) String() string { return proto.CompactTextString(m) }
func (*EternalBlockMsg) ProtoMessage()    {}
func (*EternalBlockMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_d02302bca865a0e7, []int{2}
}
func (m *EternalBlockMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EternalBlockMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EternalBlockMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EternalBlockMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EternalBlockMsg.Merge(m, src)
}
func (m *EternalBlockMsg) XXX_Size() int {
	return m.Size()
}
func (m *EternalBlockMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_EternalBlockMsg.DiscardUnknown(m)
}

var xxx_messageInfo_EternalBlockMsg proto.InternalMessageInfo

func (m *EternalBlockMsg) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *EternalBlockMsg) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *EternalBlockMsg) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func init() {
	proto.RegisterType((*Dynasty)(nil), "bpospb.Dynasty")
	proto.RegisterType((*Delegate)(nil), "bpospb.Delegate")
	proto.RegisterType((*EternalBlockMsg)(nil), "bpospb.EternalBlockMsg")
}

func init() { proto.RegisterFile("bpos.proto", fileDescriptor_d02302bca865a0e7) }

var fileDescriptor_d02302bca865a0e7 = []byte{
	// 331 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x51, 0xbf, 0x6a, 0xe3, 0x30,
	0x18, 0x8f, 0xa2, 0xc4, 0x39, 0xeb, 0x0c, 0x77, 0x27, 0x8e, 0xa0, 0xa1, 0x18, 0xe3, 0xc9, 0x43,
	0xf1, 0xd0, 0x42, 0xf7, 0xa4, 0xe9, 0xd0, 0xa1, 0x6d, 0x50, 0x4b, 0x77, 0x39, 0xfe, 0x70, 0x42,
	0x6d, 0xcb, 0x48, 0xf2, 0x90, 0xb7, 0xe8, 0x63, 0x75, 0xcc, 0xd8, 0xb1, 0x24, 0x6b, 0x1f, 0xa2,
	0x48, 0x4e, 0x08, 0xa1, 0x74, 0xfb, 0xfd, 0xfd, 0xd0, 0x0f, 0x11, 0x92, 0x35, 0x52, 0xa7, 0x8d,
	0x92, 0x46, 0x52, 0xcf, 0xe2, 0x26, 0x8b, 0x81, 0x8c, 0x66, 0xeb, 0x5a, 0x68, 0xb3, 0xa6, 0x29,
	0xf1, 0x73, 0x28, 0xa1, 0x10, 0x06, 0x34, 0x43, 0x11, 0x4e, 0x7e, 0x5f, 0xfc, 0x4d, 0xbb, 0x58,
	0x3a, 0xdb, 0x1b, 0xfc, 0x18, 0xa1, 0xff, 0xc9, 0x50, 0xe4, 0xb9, 0xd2, 0xac, 0x1f, 0xe1, 0x24,
	0xe0, 0x1d, 0xb1, 0x6a, 0x03, 0xa0, 0x34, 0xc3, 0x11, 0x4e, 0x7c, 0xde, 0x91, 0xf8, 0x13, 0x91,
	0x5f, 0x87, 0x1b, 0x94, 0x92, 0xc1, 0x24, 0xcf, 0x15, 0x43, 0x11, 0x4a, 0x02, 0xee, 0x30, 0x1d,
	0x13, 0x6f, 0x0e, 0xa0, 0x6e, 0x67, 0xac, 0x1f, 0xa1, 0xc4, 0xe7, 0x7b, 0x66, 0xcf, 0x3d, 0x4b,
	0xfb, 0x20, 0x1c, 0xa1, 0x04, 0xf3, 0x8e, 0xd0, 0x98, 0x04, 0xf3, 0x12, 0xf2, 0x02, 0x26, 0x95,
	0x6c, 0x6b, 0xc3, 0x06, 0xce, 0x3c, 0xd1, 0x6c, 0xf3, 0x71, 0x21, 0x15, 0xb0, 0x61, 0xd7, 0x74,
	0x84, 0x5e, 0x91, 0xf1, 0x75, 0xab, 0xf6, 0x93, 0x1f, 0x5a, 0xd3, 0xb4, 0xe6, 0xbe, 0xad, 0x32,
	0x50, 0xcc, 0x73, 0xb1, 0x1f, 0x5c, 0x7a, 0x4e, 0xfe, 0x3d, 0x49, 0x23, 0xca, 0x93, 0xca, 0xc8,
	0x55, 0xbe, 0x1b, 0xb1, 0x20, 0x7f, 0x6e, 0x0c, 0xa8, 0x5a, 0x94, 0xd3, 0x52, 0x2e, 0x5e, 0xee,
	0x74, 0x61, 0x47, 0x2f, 0x85, 0x5e, 0x1e, 0x46, 0x5b, 0x4c, 0xcf, 0x88, 0x6f, 0x56, 0x15, 0x68,
	0x23, 0xaa, 0xc6, 0xed, 0xc6, 0xfc, 0x28, 0x58, 0x57, 0xaf, 0x8a, 0x5a, 0x98, 0x56, 0x81, 0x9b,
	0x1f, 0xf0, 0xa3, 0x30, 0x65, 0x6f, 0xdb, 0x10, 0x6d, 0xb6, 0x21, 0xfa, 0xd8, 0x86, 0xe8, 0x75,
	0x17, 0xf6, 0x36, 0xbb, 0xb0, 0xf7, 0xbe, 0x0b, 0x7b, 0x99, 0xe7, 0x7e, 0xf8, 0xf2, 0x2b, 0x00,
	0x00, 0xff, 0xff, 0xba, 0x95, 0xde, 0xba, 0xef, 0x01, 0x00, 0x00,
}

func (m *Dynasty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Dynasty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Dynasty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Peers) > 0 {
		for iNdEx := len(m.Peers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Peers[iNdEx])
			copy(dAtA[i:], m.Peers[iNdEx])
			i = encodeVarintBpos(dAtA, i, uint64(len(m.Peers[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Addrs) > 0 {
		for iNdEx := len(m.Addrs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Addrs[iNdEx])
			copy(dAtA[i:], m.Addrs[iNdEx])
			i = encodeVarintBpos(dAtA, i, uint64(len(m.Addrs[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Delegates) > 0 {
		for iNdEx := len(m.Delegates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Delegates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBpos(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Delegate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Delegate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Delegate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalOutputNumber != 0 {
		i = encodeVarintBpos(dAtA, i, uint64(m.TotalOutputNumber))
		i--
		dAtA[i] = 0x38
	}
	if m.CurDynastyOutputNumber != 0 {
		i = encodeVarintBpos(dAtA, i, uint64(m.CurDynastyOutputNumber))
		i--
		dAtA[i] = 0x30
	}
	if m.Score != 0 {
		i = encodeVarintBpos(dAtA, i, uint64(m.Score))
		i--
		dAtA[i] = 0x28
	}
	if m.PledgeAmount != 0 {
		i = encodeVarintBpos(dAtA, i, uint64(m.PledgeAmount))
		i--
		dAtA[i] = 0x20
	}
	if m.Votes != 0 {
		i = encodeVarintBpos(dAtA, i, uint64(m.Votes))
		i--
		dAtA[i] = 0x18
	}
	if len(m.PeerID) > 0 {
		i -= len(m.PeerID)
		copy(dAtA[i:], m.PeerID)
		i = encodeVarintBpos(dAtA, i, uint64(len(m.PeerID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintBpos(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EternalBlockMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EternalBlockMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EternalBlockMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintBpos(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Timestamp != 0 {
		i = encodeVarintBpos(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintBpos(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBpos(dAtA []byte, offset int, v uint64) int {
	offset -= sovBpos(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Dynasty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Delegates) > 0 {
		for _, e := range m.Delegates {
			l = e.Size()
			n += 1 + l + sovBpos(uint64(l))
		}
	}
	if len(m.Addrs) > 0 {
		for _, b := range m.Addrs {
			l = len(b)
			n += 1 + l + sovBpos(uint64(l))
		}
	}
	if len(m.Peers) > 0 {
		for _, s := range m.Peers {
			l = len(s)
			n += 1 + l + sovBpos(uint64(l))
		}
	}
	return n
}

func (m *Delegate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovBpos(uint64(l))
	}
	l = len(m.PeerID)
	if l > 0 {
		n += 1 + l + sovBpos(uint64(l))
	}
	if m.Votes != 0 {
		n += 1 + sovBpos(uint64(m.Votes))
	}
	if m.PledgeAmount != 0 {
		n += 1 + sovBpos(uint64(m.PledgeAmount))
	}
	if m.Score != 0 {
		n += 1 + sovBpos(uint64(m.Score))
	}
	if m.CurDynastyOutputNumber != 0 {
		n += 1 + sovBpos(uint64(m.CurDynastyOutputNumber))
	}
	if m.TotalOutputNumber != 0 {
		n += 1 + sovBpos(uint64(m.TotalOutputNumber))
	}
	return n
}

func (m *EternalBlockMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovBpos(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovBpos(uint64(m.Timestamp))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovBpos(uint64(l))
	}
	return n
}

func sovBpos(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBpos(x uint64) (n int) {
	return sovBpos(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Dynasty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBpos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Dynasty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Dynasty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBpos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBpos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBpos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegates = append(m.Delegates, &Delegate{})
			if err := m.Delegates[len(m.Delegates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addrs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBpos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBpos
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBpos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addrs = append(m.Addrs, make([]byte, postIndex-iNdEx))
			copy(m.Addrs[len(m.Addrs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBpos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBpos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBpos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peers = append(m.Peers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBpos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBpos
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBpos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Delegate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBpos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Delegate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Delegate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBpos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBpos
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBpos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = append(m.Addr[:0], dAtA[iNdEx:postIndex]...)
			if m.Addr == nil {
				m.Addr = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBpos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBpos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBpos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Votes", wireType)
			}
			m.Votes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBpos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Votes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PledgeAmount", wireType)
			}
			m.PledgeAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBpos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PledgeAmount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBpos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurDynastyOutputNumber", wireType)
			}
			m.CurDynastyOutputNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBpos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurDynastyOutputNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalOutputNumber", wireType)
			}
			m.TotalOutputNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBpos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalOutputNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBpos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBpos
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBpos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EternalBlockMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBpos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EternalBlockMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EternalBlockMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBpos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBpos
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBpos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBpos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBpos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBpos
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBpos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBpos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBpos
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBpos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBpos(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBpos
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBpos
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBpos
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBpos
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBpos
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBpos
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBpos        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBpos          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBpos = fmt.Errorf("proto: unexpected end of group")
)
