// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: transaction.proto

package rpcpb

import (
	context "context"
	fmt "fmt"
	pb "github.com/BOXFoundation/boxd/core/pb"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type GetBalanceReq struct {
	Addrs []string `protobuf:"bytes,1,rep,name=addrs,proto3" json:"addrs,omitempty"`
}

func (m *GetBalanceReq) Reset()         { *m = GetBalanceReq{} }
func (m *GetBalanceReq) String() string { return proto.CompactTextString(m) }
func (*GetBalanceReq) ProtoMessage()    {}
func (*GetBalanceReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cc4e03d2c28c490, []int{0}
}
func (m *GetBalanceReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBalanceReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBalanceReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBalanceReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBalanceReq.Merge(m, src)
}
func (m *GetBalanceReq) XXX_Size() int {
	return m.Size()
}
func (m *GetBalanceReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBalanceReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetBalanceReq proto.InternalMessageInfo

func (m *GetBalanceReq) GetAddrs() []string {
	if m != nil {
		return m.Addrs
	}
	return nil
}

type GetBalanceResp struct {
	Code     int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message  string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Balances []uint64 `protobuf:"varint,3,rep,packed,name=balances,proto3" json:"balances,omitempty"`
}

func (m *GetBalanceResp) Reset()         { *m = GetBalanceResp{} }
func (m *GetBalanceResp) String() string { return proto.CompactTextString(m) }
func (*GetBalanceResp) ProtoMessage()    {}
func (*GetBalanceResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cc4e03d2c28c490, []int{1}
}
func (m *GetBalanceResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBalanceResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBalanceResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBalanceResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBalanceResp.Merge(m, src)
}
func (m *GetBalanceResp) XXX_Size() int {
	return m.Size()
}
func (m *GetBalanceResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBalanceResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetBalanceResp proto.InternalMessageInfo

func (m *GetBalanceResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetBalanceResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *GetBalanceResp) GetBalances() []uint64 {
	if m != nil {
		return m.Balances
	}
	return nil
}

type GetTokenBalanceReq struct {
	Addrs   []string     `protobuf:"bytes,1,rep,name=addrs,proto3" json:"addrs,omitempty"`
	TokenID *pb.OutPoint `protobuf:"bytes,2,opt,name=tokenID,proto3" json:"tokenID,omitempty"`
}

func (m *GetTokenBalanceReq) Reset()         { *m = GetTokenBalanceReq{} }
func (m *GetTokenBalanceReq) String() string { return proto.CompactTextString(m) }
func (*GetTokenBalanceReq) ProtoMessage()    {}
func (*GetTokenBalanceReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cc4e03d2c28c490, []int{2}
}
func (m *GetTokenBalanceReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTokenBalanceReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTokenBalanceReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTokenBalanceReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTokenBalanceReq.Merge(m, src)
}
func (m *GetTokenBalanceReq) XXX_Size() int {
	return m.Size()
}
func (m *GetTokenBalanceReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTokenBalanceReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetTokenBalanceReq proto.InternalMessageInfo

func (m *GetTokenBalanceReq) GetAddrs() []string {
	if m != nil {
		return m.Addrs
	}
	return nil
}

func (m *GetTokenBalanceReq) GetTokenID() *pb.OutPoint {
	if m != nil {
		return m.TokenID
	}
	return nil
}

type FetchUtxosReq struct {
	Addr    string       `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	TokenID *pb.OutPoint `protobuf:"bytes,2,opt,name=tokenID,proto3" json:"tokenID,omitempty"`
	Amount  uint64       `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *FetchUtxosReq) Reset()         { *m = FetchUtxosReq{} }
func (m *FetchUtxosReq) String() string { return proto.CompactTextString(m) }
func (*FetchUtxosReq) ProtoMessage()    {}
func (*FetchUtxosReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cc4e03d2c28c490, []int{3}
}
func (m *FetchUtxosReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchUtxosReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchUtxosReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchUtxosReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchUtxosReq.Merge(m, src)
}
func (m *FetchUtxosReq) XXX_Size() int {
	return m.Size()
}
func (m *FetchUtxosReq) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchUtxosReq.DiscardUnknown(m)
}

var xxx_messageInfo_FetchUtxosReq proto.InternalMessageInfo

func (m *FetchUtxosReq) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *FetchUtxosReq) GetTokenID() *pb.OutPoint {
	if m != nil {
		return m.TokenID
	}
	return nil
}

func (m *FetchUtxosReq) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type FetchUtxosResp struct {
	Code    int32   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string  `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Utxos   []*Utxo `protobuf:"bytes,3,rep,name=utxos,proto3" json:"utxos,omitempty"`
}

func (m *FetchUtxosResp) Reset()         { *m = FetchUtxosResp{} }
func (m *FetchUtxosResp) String() string { return proto.CompactTextString(m) }
func (*FetchUtxosResp) ProtoMessage()    {}
func (*FetchUtxosResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cc4e03d2c28c490, []int{4}
}
func (m *FetchUtxosResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchUtxosResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchUtxosResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchUtxosResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchUtxosResp.Merge(m, src)
}
func (m *FetchUtxosResp) XXX_Size() int {
	return m.Size()
}
func (m *FetchUtxosResp) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchUtxosResp.DiscardUnknown(m)
}

var xxx_messageInfo_FetchUtxosResp proto.InternalMessageInfo

func (m *FetchUtxosResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *FetchUtxosResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *FetchUtxosResp) GetUtxos() []*Utxo {
	if m != nil {
		return m.Utxos
	}
	return nil
}

type GetRawTransactionRequest struct {
	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *GetRawTransactionRequest) Reset()         { *m = GetRawTransactionRequest{} }
func (m *GetRawTransactionRequest) String() string { return proto.CompactTextString(m) }
func (*GetRawTransactionRequest) ProtoMessage()    {}
func (*GetRawTransactionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cc4e03d2c28c490, []int{5}
}
func (m *GetRawTransactionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRawTransactionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRawTransactionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRawTransactionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRawTransactionRequest.Merge(m, src)
}
func (m *GetRawTransactionRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetRawTransactionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRawTransactionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRawTransactionRequest proto.InternalMessageInfo

func (m *GetRawTransactionRequest) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

type GetRawTransactionResponse struct {
	Tx *pb.Transaction `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
}

func (m *GetRawTransactionResponse) Reset()         { *m = GetRawTransactionResponse{} }
func (m *GetRawTransactionResponse) String() string { return proto.CompactTextString(m) }
func (*GetRawTransactionResponse) ProtoMessage()    {}
func (*GetRawTransactionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cc4e03d2c28c490, []int{6}
}
func (m *GetRawTransactionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRawTransactionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRawTransactionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRawTransactionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRawTransactionResponse.Merge(m, src)
}
func (m *GetRawTransactionResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetRawTransactionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRawTransactionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetRawTransactionResponse proto.InternalMessageInfo

func (m *GetRawTransactionResponse) GetTx() *pb.Transaction {
	if m != nil {
		return m.Tx
	}
	return nil
}

type GetTransactionPoolRequest struct {
}

func (m *GetTransactionPoolRequest) Reset()         { *m = GetTransactionPoolRequest{} }
func (m *GetTransactionPoolRequest) String() string { return proto.CompactTextString(m) }
func (*GetTransactionPoolRequest) ProtoMessage()    {}
func (*GetTransactionPoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cc4e03d2c28c490, []int{7}
}
func (m *GetTransactionPoolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTransactionPoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTransactionPoolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTransactionPoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTransactionPoolRequest.Merge(m, src)
}
func (m *GetTransactionPoolRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTransactionPoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTransactionPoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTransactionPoolRequest proto.InternalMessageInfo

type GetTransactionsResponse struct {
	Txs []*pb.Transaction `protobuf:"bytes,1,rep,name=txs,proto3" json:"txs,omitempty"`
}

func (m *GetTransactionsResponse) Reset()         { *m = GetTransactionsResponse{} }
func (m *GetTransactionsResponse) String() string { return proto.CompactTextString(m) }
func (*GetTransactionsResponse) ProtoMessage()    {}
func (*GetTransactionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cc4e03d2c28c490, []int{8}
}
func (m *GetTransactionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTransactionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTransactionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTransactionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTransactionsResponse.Merge(m, src)
}
func (m *GetTransactionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTransactionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTransactionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTransactionsResponse proto.InternalMessageInfo

func (m *GetTransactionsResponse) GetTxs() []*pb.Transaction {
	if m != nil {
		return m.Txs
	}
	return nil
}

type SendTransactionReq struct {
	Tx *pb.Transaction `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
}

func (m *SendTransactionReq) Reset()         { *m = SendTransactionReq{} }
func (m *SendTransactionReq) String() string { return proto.CompactTextString(m) }
func (*SendTransactionReq) ProtoMessage()    {}
func (*SendTransactionReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cc4e03d2c28c490, []int{9}
}
func (m *SendTransactionReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendTransactionReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendTransactionReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendTransactionReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendTransactionReq.Merge(m, src)
}
func (m *SendTransactionReq) XXX_Size() int {
	return m.Size()
}
func (m *SendTransactionReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SendTransactionReq.DiscardUnknown(m)
}

var xxx_messageInfo_SendTransactionReq proto.InternalMessageInfo

func (m *SendTransactionReq) GetTx() *pb.Transaction {
	if m != nil {
		return m.Tx
	}
	return nil
}

type SendTransactionResp struct {
	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Hash    string `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *SendTransactionResp) Reset()         { *m = SendTransactionResp{} }
func (m *SendTransactionResp) String() string { return proto.CompactTextString(m) }
func (*SendTransactionResp) ProtoMessage()    {}
func (*SendTransactionResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cc4e03d2c28c490, []int{10}
}
func (m *SendTransactionResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendTransactionResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendTransactionResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendTransactionResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendTransactionResp.Merge(m, src)
}
func (m *SendTransactionResp) XXX_Size() int {
	return m.Size()
}
func (m *SendTransactionResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SendTransactionResp.DiscardUnknown(m)
}

var xxx_messageInfo_SendTransactionResp proto.InternalMessageInfo

func (m *SendTransactionResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SendTransactionResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *SendTransactionResp) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type ListUtxosResponse struct {
	Code    int32   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string  `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Count   uint32  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Utxos   []*Utxo `protobuf:"bytes,4,rep,name=utxos,proto3" json:"utxos,omitempty"`
}

func (m *ListUtxosResponse) Reset()         { *m = ListUtxosResponse{} }
func (m *ListUtxosResponse) String() string { return proto.CompactTextString(m) }
func (*ListUtxosResponse) ProtoMessage()    {}
func (*ListUtxosResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cc4e03d2c28c490, []int{11}
}
func (m *ListUtxosResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListUtxosResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListUtxosResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListUtxosResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListUtxosResponse.Merge(m, src)
}
func (m *ListUtxosResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListUtxosResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListUtxosResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListUtxosResponse proto.InternalMessageInfo

func (m *ListUtxosResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ListUtxosResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ListUtxosResponse) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ListUtxosResponse) GetUtxos() []*Utxo {
	if m != nil {
		return m.Utxos
	}
	return nil
}

type GetFeePriceRequest struct {
}

func (m *GetFeePriceRequest) Reset()         { *m = GetFeePriceRequest{} }
func (m *GetFeePriceRequest) String() string { return proto.CompactTextString(m) }
func (*GetFeePriceRequest) ProtoMessage()    {}
func (*GetFeePriceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cc4e03d2c28c490, []int{12}
}
func (m *GetFeePriceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetFeePriceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetFeePriceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetFeePriceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFeePriceRequest.Merge(m, src)
}
func (m *GetFeePriceRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetFeePriceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFeePriceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetFeePriceRequest proto.InternalMessageInfo

type GetFeePriceResponse struct {
	BoxPerByte uint64 `protobuf:"varint,1,opt,name=box_per_byte,json=boxPerByte,proto3" json:"box_per_byte,omitempty"`
}

func (m *GetFeePriceResponse) Reset()         { *m = GetFeePriceResponse{} }
func (m *GetFeePriceResponse) String() string { return proto.CompactTextString(m) }
func (*GetFeePriceResponse) ProtoMessage()    {}
func (*GetFeePriceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cc4e03d2c28c490, []int{13}
}
func (m *GetFeePriceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetFeePriceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetFeePriceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetFeePriceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFeePriceResponse.Merge(m, src)
}
func (m *GetFeePriceResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetFeePriceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFeePriceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetFeePriceResponse proto.InternalMessageInfo

func (m *GetFeePriceResponse) GetBoxPerByte() uint64 {
	if m != nil {
		return m.BoxPerByte
	}
	return 0
}

type MakeTxReq struct {
	From    string   `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To      []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty"`
	Amounts []uint64 `protobuf:"varint,3,rep,packed,name=amounts,proto3" json:"amounts,omitempty"`
	Fee     uint64   `protobuf:"varint,4,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (m *MakeTxReq) Reset()         { *m = MakeTxReq{} }
func (m *MakeTxReq) String() string { return proto.CompactTextString(m) }
func (*MakeTxReq) ProtoMessage()    {}
func (*MakeTxReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cc4e03d2c28c490, []int{14}
}
func (m *MakeTxReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MakeTxReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MakeTxReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MakeTxReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MakeTxReq.Merge(m, src)
}
func (m *MakeTxReq) XXX_Size() int {
	return m.Size()
}
func (m *MakeTxReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MakeTxReq.DiscardUnknown(m)
}

var xxx_messageInfo_MakeTxReq proto.InternalMessageInfo

func (m *MakeTxReq) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *MakeTxReq) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *MakeTxReq) GetAmounts() []uint64 {
	if m != nil {
		return m.Amounts
	}
	return nil
}

func (m *MakeTxReq) GetFee() uint64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

type MakeTxResp struct {
	Code    int32           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Tx      *pb.Transaction `protobuf:"bytes,3,opt,name=tx,proto3" json:"tx,omitempty"`
	RawMsgs [][]byte        `protobuf:"bytes,4,rep,name=rawMsgs,proto3" json:"rawMsgs,omitempty"`
}

func (m *MakeTxResp) Reset()         { *m = MakeTxResp{} }
func (m *MakeTxResp) String() string { return proto.CompactTextString(m) }
func (*MakeTxResp) ProtoMessage()    {}
func (*MakeTxResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cc4e03d2c28c490, []int{15}
}
func (m *MakeTxResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MakeTxResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MakeTxResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MakeTxResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MakeTxResp.Merge(m, src)
}
func (m *MakeTxResp) XXX_Size() int {
	return m.Size()
}
func (m *MakeTxResp) XXX_DiscardUnknown() {
	xxx_messageInfo_MakeTxResp.DiscardUnknown(m)
}

var xxx_messageInfo_MakeTxResp proto.InternalMessageInfo

func (m *MakeTxResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *MakeTxResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *MakeTxResp) GetTx() *pb.Transaction {
	if m != nil {
		return m.Tx
	}
	return nil
}

func (m *MakeTxResp) GetRawMsgs() [][]byte {
	if m != nil {
		return m.RawMsgs
	}
	return nil
}

func init() {
	proto.RegisterType((*GetBalanceReq)(nil), "rpcpb.GetBalanceReq")
	proto.RegisterType((*GetBalanceResp)(nil), "rpcpb.GetBalanceResp")
	proto.RegisterType((*GetTokenBalanceReq)(nil), "rpcpb.GetTokenBalanceReq")
	proto.RegisterType((*FetchUtxosReq)(nil), "rpcpb.FetchUtxosReq")
	proto.RegisterType((*FetchUtxosResp)(nil), "rpcpb.FetchUtxosResp")
	proto.RegisterType((*GetRawTransactionRequest)(nil), "rpcpb.GetRawTransactionRequest")
	proto.RegisterType((*GetRawTransactionResponse)(nil), "rpcpb.GetRawTransactionResponse")
	proto.RegisterType((*GetTransactionPoolRequest)(nil), "rpcpb.GetTransactionPoolRequest")
	proto.RegisterType((*GetTransactionsResponse)(nil), "rpcpb.GetTransactionsResponse")
	proto.RegisterType((*SendTransactionReq)(nil), "rpcpb.SendTransactionReq")
	proto.RegisterType((*SendTransactionResp)(nil), "rpcpb.SendTransactionResp")
	proto.RegisterType((*ListUtxosResponse)(nil), "rpcpb.ListUtxosResponse")
	proto.RegisterType((*GetFeePriceRequest)(nil), "rpcpb.GetFeePriceRequest")
	proto.RegisterType((*GetFeePriceResponse)(nil), "rpcpb.GetFeePriceResponse")
	proto.RegisterType((*MakeTxReq)(nil), "rpcpb.MakeTxReq")
	proto.RegisterType((*MakeTxResp)(nil), "rpcpb.MakeTxResp")
}

func init() { proto.RegisterFile("transaction.proto", fileDescriptor_2cc4e03d2c28c490) }

var fileDescriptor_2cc4e03d2c28c490 = []byte{
	// 880 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0x4d, 0x6f, 0xdc, 0x44,
	0x18, 0x8e, 0xd7, 0xbb, 0x29, 0x79, 0x37, 0x49, 0xb3, 0x93, 0x8f, 0xba, 0x4e, 0xbb, 0xb8, 0x53,
	0x55, 0x5a, 0xe5, 0xb0, 0x56, 0xc3, 0x01, 0xd1, 0x53, 0x15, 0x50, 0x22, 0x24, 0xaa, 0x46, 0x26,
	0x25, 0x08, 0x0e, 0xd5, 0xd8, 0x9e, 0x75, 0x56, 0xbb, 0xf6, 0xb8, 0x9e, 0x59, 0xe2, 0xc0, 0x8d,
	0x5f, 0x80, 0xc4, 0x9f, 0x42, 0xe2, 0x12, 0x89, 0x0b, 0x47, 0x94, 0xf0, 0x43, 0xd0, 0x8c, 0x3f,
	0xf7, 0x0b, 0xd8, 0xdb, 0xbc, 0x33, 0xef, 0x3c, 0xcf, 0xbc, 0x5f, 0x8f, 0x0d, 0x1d, 0x91, 0x90,
	0x88, 0x13, 0x4f, 0x0c, 0x59, 0xd4, 0x8f, 0x13, 0x26, 0x18, 0x6a, 0x25, 0xb1, 0x17, 0xbb, 0xe6,
	0xcb, 0x60, 0x28, 0xae, 0x26, 0x6e, 0xdf, 0x63, 0xa1, 0x7d, 0xf2, 0xf6, 0xdb, 0x53, 0x36, 0x89,
	0x7c, 0x22, 0xdd, 0x6c, 0x97, 0xa5, 0xbe, 0xed, 0xb1, 0x84, 0xda, 0xb1, 0x6b, 0xbb, 0x63, 0xe6,
	0x8d, 0xb2, 0x9b, 0xe6, 0x93, 0x80, 0xb1, 0x60, 0x4c, 0x6d, 0x12, 0x0f, 0x6d, 0x12, 0x45, 0x4c,
	0x28, 0x7f, 0x9e, 0x9f, 0x6e, 0x7a, 0x2c, 0x0c, 0x0b, 0x16, 0xfc, 0x02, 0xb6, 0xce, 0xa8, 0x38,
	0x21, 0x63, 0x12, 0x79, 0xd4, 0xa1, 0x1f, 0xd0, 0x1e, 0xb4, 0x88, 0xef, 0x27, 0xdc, 0xd0, 0x2c,
	0xbd, 0xb7, 0xe1, 0x64, 0x06, 0xfe, 0x0e, 0xb6, 0xeb, 0x6e, 0x3c, 0x46, 0x08, 0x9a, 0x1e, 0xf3,
	0xa9, 0xa1, 0x59, 0x5a, 0xaf, 0xe5, 0xa8, 0x35, 0x32, 0xe0, 0x41, 0x48, 0x39, 0x27, 0x01, 0x35,
	0x1a, 0x96, 0xd6, 0xdb, 0x70, 0x0a, 0x13, 0x99, 0xf0, 0x91, 0x9b, 0x5d, 0xe6, 0x86, 0x6e, 0xe9,
	0xbd, 0xa6, 0x53, 0xda, 0xf8, 0x1b, 0x40, 0x67, 0x54, 0x5c, 0xb0, 0x11, 0x8d, 0xfe, 0xeb, 0x1d,
	0xe8, 0x08, 0x1e, 0x08, 0xe9, 0xf8, 0xe5, 0x17, 0x8a, 0xa1, 0x7d, 0xbc, 0xd3, 0x97, 0x19, 0x88,
	0xdd, 0xfe, 0xdb, 0x89, 0x38, 0x67, 0xc3, 0x48, 0x38, 0x85, 0x03, 0x0e, 0x60, 0xeb, 0x94, 0x0a,
	0xef, 0xea, 0x9d, 0x48, 0x19, 0x97, 0x90, 0x08, 0x9a, 0x12, 0x45, 0x3d, 0x79, 0xc3, 0x51, 0xeb,
	0x55, 0x00, 0xd1, 0x01, 0xac, 0x93, 0x90, 0x4d, 0x22, 0x61, 0xe8, 0x96, 0xd6, 0x6b, 0x3a, 0xb9,
	0x85, 0x09, 0x6c, 0xd7, 0x89, 0x56, 0x4e, 0xce, 0x33, 0x68, 0x4d, 0xe4, 0x55, 0x95, 0x99, 0xf6,
	0x71, 0xbb, 0xaf, 0x2a, 0xdf, 0x97, 0x70, 0x4e, 0x76, 0x82, 0xfb, 0x60, 0x9c, 0x51, 0xe1, 0x90,
	0xeb, 0x8b, 0xaa, 0x4f, 0x1c, 0xfa, 0x61, 0x42, 0xb9, 0x90, 0x64, 0x57, 0x84, 0x5f, 0x29, 0xb2,
	0x4d, 0x47, 0xad, 0xf1, 0x6b, 0x78, 0xbc, 0xc0, 0x9f, 0xc7, 0x2c, 0xe2, 0x14, 0x3d, 0x87, 0x86,
	0x48, 0x95, 0x7b, 0xfb, 0x78, 0xb7, 0x08, 0xb7, 0xee, 0xd8, 0x10, 0x29, 0x3e, 0x54, 0x08, 0xb5,
	0xdd, 0x73, 0xc6, 0xc6, 0x39, 0x25, 0x7e, 0x0d, 0x8f, 0xa6, 0x0f, 0x79, 0x09, 0xfe, 0x02, 0x74,
	0x91, 0x66, 0x55, 0x5b, 0x82, 0x2e, 0xcf, 0xf1, 0x67, 0x80, 0xbe, 0xa6, 0x91, 0x3f, 0x1d, 0xce,
	0xff, 0x7b, 0xd9, 0x25, 0xec, 0xce, 0x5d, 0x5d, 0x39, 0xe7, 0x45, 0xd2, 0xf4, 0xac, 0x17, 0x54,
	0xd2, 0x7e, 0x84, 0xce, 0x57, 0x43, 0x2e, 0xca, 0x32, 0xaa, 0x78, 0x56, 0x83, 0xdd, 0x83, 0x96,
	0x57, 0x76, 0xc8, 0x96, 0x93, 0x19, 0x55, 0x81, 0x9b, 0x4b, 0x0b, 0xbc, 0xa7, 0x86, 0xe0, 0x94,
	0xd2, 0xf3, 0x64, 0xa8, 0x06, 0x40, 0xe5, 0xf9, 0x53, 0xd8, 0x9d, 0xda, 0xcd, 0xdf, 0x64, 0xc1,
	0xa6, 0xcb, 0xd2, 0xf7, 0x31, 0x4d, 0xde, 0xbb, 0x37, 0x22, 0x7b, 0x5b, 0xd3, 0x01, 0x97, 0xa5,
	0xe7, 0x34, 0x39, 0xb9, 0x11, 0x14, 0x7f, 0x0f, 0x1b, 0x6f, 0xc8, 0x88, 0x5e, 0xa4, 0x79, 0xdf,
	0x0f, 0x12, 0x16, 0x16, 0x7d, 0x2f, 0xd7, 0x68, 0x1b, 0x1a, 0x82, 0x19, 0x0d, 0x35, 0x5b, 0x0d,
	0xc1, 0x64, 0x48, 0x59, 0x37, 0x17, 0xf3, 0x59, 0x98, 0x68, 0x07, 0xf4, 0x01, 0xa5, 0x46, 0x53,
	0x71, 0xc8, 0x25, 0xbe, 0x01, 0x28, 0xc0, 0x57, 0xce, 0x7b, 0x56, 0x61, 0xfd, 0x5f, 0x2b, 0x2c,
	0xaf, 0x27, 0xe4, 0xfa, 0x0d, 0x0f, 0xb2, 0x8c, 0x6d, 0x3a, 0x85, 0x79, 0xfc, 0xfb, 0x3a, 0xa0,
	0x9a, 0xf7, 0xe7, 0x2c, 0x0c, 0x49, 0xe4, 0xa3, 0x4b, 0x80, 0x4a, 0x9e, 0xd0, 0x5e, 0x9e, 0xdf,
	0x29, 0x61, 0x33, 0xf7, 0x17, 0xec, 0xf2, 0x18, 0x3f, 0xf9, 0xf9, 0x8f, 0xbf, 0x7f, 0x6d, 0x1c,
	0xe0, 0x8e, 0xfd, 0xc3, 0x4b, 0x5b, 0xa4, 0x76, 0x40, 0x45, 0xae, 0x4c, 0xaf, 0xb4, 0x23, 0x34,
	0x80, 0x87, 0x33, 0xda, 0x84, 0x1e, 0x57, 0x38, 0x33, 0x9a, 0xb5, 0x8c, 0xe2, 0x99, 0xa2, 0x38,
	0xc4, 0x07, 0x15, 0x85, 0x92, 0x94, 0x1a, 0xcf, 0x25, 0x40, 0x25, 0x21, 0x65, 0x00, 0x53, 0xf2,
	0x55, 0xa2, 0x4f, 0x6b, 0xcd, 0x5c, 0x00, 0x03, 0x79, 0xac, 0x9a, 0x4a, 0x02, 0x8f, 0xe0, 0xe1,
	0xcc, 0xb0, 0x94, 0x01, 0xcc, 0xcf, 0x9f, 0x69, 0x2e, 0x3b, 0x5a, 0x10, 0x05, 0xa7, 0x91, 0x5f,
	0xfb, 0x6a, 0x49, 0xb2, 0x9f, 0xa0, 0x33, 0xa7, 0x3a, 0xe8, 0xe3, 0x2a, 0x29, 0x0b, 0xf5, 0xcb,
	0xb4, 0x96, 0x3b, 0x64, 0xfd, 0x8e, 0x9f, 0x2b, 0xea, 0xa7, 0xd8, 0xa8, 0x12, 0x98, 0x90, 0xeb,
	0x19, 0x72, 0x0f, 0xda, 0xb5, 0x59, 0xa9, 0x97, 0x69, 0x66, 0xaa, 0xca, 0x28, 0x17, 0x8c, 0x16,
	0x7e, 0xaa, 0xa8, 0x1e, 0x61, 0x54, 0x51, 0x0d, 0x28, 0x8d, 0xa5, 0x8f, 0x24, 0xe1, 0xd9, 0xb7,
	0x6a, 0x5a, 0x15, 0x51, 0x2d, 0x82, 0xc5, 0x82, 0x69, 0x76, 0x17, 0x7a, 0x94, 0x2a, 0x83, 0x0f,
	0x15, 0xed, 0x3e, 0xde, 0xa9, 0xb5, 0x48, 0x1a, 0x33, 0x36, 0xce, 0x9a, 0x63, 0x5b, 0xce, 0xdb,
	0xbb, 0x88, 0x0f, 0x83, 0x88, 0xfa, 0x17, 0x29, 0xda, 0xc9, 0xe1, 0xca, 0x19, 0x37, 0x3b, 0x33,
	0x3b, 0x3c, 0xc6, 0x96, 0xc2, 0x34, 0xf1, 0x7e, 0x8e, 0x19, 0x92, 0x11, 0x9d, 0xe4, 0x18, 0x22,
	0x7d, 0xa5, 0x1d, 0x9d, 0x18, 0xbf, 0xdd, 0x75, 0xb5, 0xdb, 0xbb, 0xae, 0xf6, 0xd7, 0x5d, 0x57,
	0xfb, 0xe5, 0xbe, 0xbb, 0x76, 0x7b, 0xdf, 0x5d, 0xfb, 0xf3, 0xbe, 0xbb, 0xe6, 0xae, 0xab, 0xbf,
	0x83, 0x4f, 0xfe, 0x09, 0x00, 0x00, 0xff, 0xff, 0x2e, 0x73, 0x76, 0x1c, 0x98, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TransactionCommandClient is the client API for TransactionCommand service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TransactionCommandClient interface {
	GetBalance(ctx context.Context, in *GetBalanceReq, opts ...grpc.CallOption) (*GetBalanceResp, error)
	GetTokenBalance(ctx context.Context, in *GetTokenBalanceReq, opts ...grpc.CallOption) (*GetBalanceResp, error)
	FetchUtxos(ctx context.Context, in *FetchUtxosReq, opts ...grpc.CallOption) (*FetchUtxosResp, error)
	SendTransaction(ctx context.Context, in *SendTransactionReq, opts ...grpc.CallOption) (*SendTransactionResp, error)
	GetRawTransaction(ctx context.Context, in *GetRawTransactionRequest, opts ...grpc.CallOption) (*GetRawTransactionResponse, error)
	GetFeePrice(ctx context.Context, in *GetFeePriceRequest, opts ...grpc.CallOption) (*GetFeePriceResponse, error)
	GetTransactionPool(ctx context.Context, in *GetTransactionPoolRequest, opts ...grpc.CallOption) (*GetTransactionsResponse, error)
	MakeUnsignedTx(ctx context.Context, in *MakeTxReq, opts ...grpc.CallOption) (*MakeTxResp, error)
}

type transactionCommandClient struct {
	cc *grpc.ClientConn
}

func NewTransactionCommandClient(cc *grpc.ClientConn) TransactionCommandClient {
	return &transactionCommandClient{cc}
}

func (c *transactionCommandClient) GetBalance(ctx context.Context, in *GetBalanceReq, opts ...grpc.CallOption) (*GetBalanceResp, error) {
	out := new(GetBalanceResp)
	err := c.cc.Invoke(ctx, "/rpcpb.TransactionCommand/GetBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionCommandClient) GetTokenBalance(ctx context.Context, in *GetTokenBalanceReq, opts ...grpc.CallOption) (*GetBalanceResp, error) {
	out := new(GetBalanceResp)
	err := c.cc.Invoke(ctx, "/rpcpb.TransactionCommand/GetTokenBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionCommandClient) FetchUtxos(ctx context.Context, in *FetchUtxosReq, opts ...grpc.CallOption) (*FetchUtxosResp, error) {
	out := new(FetchUtxosResp)
	err := c.cc.Invoke(ctx, "/rpcpb.TransactionCommand/FetchUtxos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionCommandClient) SendTransaction(ctx context.Context, in *SendTransactionReq, opts ...grpc.CallOption) (*SendTransactionResp, error) {
	out := new(SendTransactionResp)
	err := c.cc.Invoke(ctx, "/rpcpb.TransactionCommand/SendTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionCommandClient) GetRawTransaction(ctx context.Context, in *GetRawTransactionRequest, opts ...grpc.CallOption) (*GetRawTransactionResponse, error) {
	out := new(GetRawTransactionResponse)
	err := c.cc.Invoke(ctx, "/rpcpb.TransactionCommand/GetRawTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionCommandClient) GetFeePrice(ctx context.Context, in *GetFeePriceRequest, opts ...grpc.CallOption) (*GetFeePriceResponse, error) {
	out := new(GetFeePriceResponse)
	err := c.cc.Invoke(ctx, "/rpcpb.TransactionCommand/GetFeePrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionCommandClient) GetTransactionPool(ctx context.Context, in *GetTransactionPoolRequest, opts ...grpc.CallOption) (*GetTransactionsResponse, error) {
	out := new(GetTransactionsResponse)
	err := c.cc.Invoke(ctx, "/rpcpb.TransactionCommand/GetTransactionPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionCommandClient) MakeUnsignedTx(ctx context.Context, in *MakeTxReq, opts ...grpc.CallOption) (*MakeTxResp, error) {
	out := new(MakeTxResp)
	err := c.cc.Invoke(ctx, "/rpcpb.TransactionCommand/MakeUnsignedTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionCommandServer is the server API for TransactionCommand service.
type TransactionCommandServer interface {
	GetBalance(context.Context, *GetBalanceReq) (*GetBalanceResp, error)
	GetTokenBalance(context.Context, *GetTokenBalanceReq) (*GetBalanceResp, error)
	FetchUtxos(context.Context, *FetchUtxosReq) (*FetchUtxosResp, error)
	SendTransaction(context.Context, *SendTransactionReq) (*SendTransactionResp, error)
	GetRawTransaction(context.Context, *GetRawTransactionRequest) (*GetRawTransactionResponse, error)
	GetFeePrice(context.Context, *GetFeePriceRequest) (*GetFeePriceResponse, error)
	GetTransactionPool(context.Context, *GetTransactionPoolRequest) (*GetTransactionsResponse, error)
	MakeUnsignedTx(context.Context, *MakeTxReq) (*MakeTxResp, error)
}

func RegisterTransactionCommandServer(s *grpc.Server, srv TransactionCommandServer) {
	s.RegisterService(&_TransactionCommand_serviceDesc, srv)
}

func _TransactionCommand_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionCommandServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.TransactionCommand/GetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionCommandServer).GetBalance(ctx, req.(*GetBalanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionCommand_GetTokenBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenBalanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionCommandServer).GetTokenBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.TransactionCommand/GetTokenBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionCommandServer).GetTokenBalance(ctx, req.(*GetTokenBalanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionCommand_FetchUtxos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchUtxosReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionCommandServer).FetchUtxos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.TransactionCommand/FetchUtxos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionCommandServer).FetchUtxos(ctx, req.(*FetchUtxosReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionCommand_SendTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTransactionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionCommandServer).SendTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.TransactionCommand/SendTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionCommandServer).SendTransaction(ctx, req.(*SendTransactionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionCommand_GetRawTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRawTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionCommandServer).GetRawTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.TransactionCommand/GetRawTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionCommandServer).GetRawTransaction(ctx, req.(*GetRawTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionCommand_GetFeePrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeePriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionCommandServer).GetFeePrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.TransactionCommand/GetFeePrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionCommandServer).GetFeePrice(ctx, req.(*GetFeePriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionCommand_GetTransactionPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionCommandServer).GetTransactionPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.TransactionCommand/GetTransactionPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionCommandServer).GetTransactionPool(ctx, req.(*GetTransactionPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionCommand_MakeUnsignedTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeTxReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionCommandServer).MakeUnsignedTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.TransactionCommand/MakeUnsignedTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionCommandServer).MakeUnsignedTx(ctx, req.(*MakeTxReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _TransactionCommand_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpcpb.TransactionCommand",
	HandlerType: (*TransactionCommandServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBalance",
			Handler:    _TransactionCommand_GetBalance_Handler,
		},
		{
			MethodName: "GetTokenBalance",
			Handler:    _TransactionCommand_GetTokenBalance_Handler,
		},
		{
			MethodName: "FetchUtxos",
			Handler:    _TransactionCommand_FetchUtxos_Handler,
		},
		{
			MethodName: "SendTransaction",
			Handler:    _TransactionCommand_SendTransaction_Handler,
		},
		{
			MethodName: "GetRawTransaction",
			Handler:    _TransactionCommand_GetRawTransaction_Handler,
		},
		{
			MethodName: "GetFeePrice",
			Handler:    _TransactionCommand_GetFeePrice_Handler,
		},
		{
			MethodName: "GetTransactionPool",
			Handler:    _TransactionCommand_GetTransactionPool_Handler,
		},
		{
			MethodName: "MakeUnsignedTx",
			Handler:    _TransactionCommand_MakeUnsignedTx_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transaction.proto",
}

func (m *GetBalanceReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBalanceReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Addrs) > 0 {
		for _, s := range m.Addrs {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *GetBalanceResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBalanceResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(m.Code))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if len(m.Balances) > 0 {
		dAtA2 := make([]byte, len(m.Balances)*10)
		var j1 int
		for _, num := range m.Balances {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	return i, nil
}

func (m *GetTokenBalanceReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTokenBalanceReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Addrs) > 0 {
		for _, s := range m.Addrs {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.TokenID != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(m.TokenID.Size()))
		n3, err := m.TokenID.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *FetchUtxosReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchUtxosReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Addr) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Addr)))
		i += copy(dAtA[i:], m.Addr)
	}
	if m.TokenID != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(m.TokenID.Size()))
		n4, err := m.TokenID.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Amount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(m.Amount))
	}
	return i, nil
}

func (m *FetchUtxosResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchUtxosResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(m.Code))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if len(m.Utxos) > 0 {
		for _, msg := range m.Utxos {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintTransaction(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetRawTransactionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRawTransactionRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	return i, nil
}

func (m *GetRawTransactionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRawTransactionResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Tx != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(m.Tx.Size()))
		n5, err := m.Tx.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *GetTransactionPoolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTransactionPoolRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetTransactionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTransactionsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Txs) > 0 {
		for _, msg := range m.Txs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTransaction(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SendTransactionReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendTransactionReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Tx != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(m.Tx.Size()))
		n6, err := m.Tx.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *SendTransactionResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendTransactionResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(m.Code))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if len(m.Hash) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	return i, nil
}

func (m *ListUtxosResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListUtxosResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(m.Code))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.Count != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(m.Count))
	}
	if len(m.Utxos) > 0 {
		for _, msg := range m.Utxos {
			dAtA[i] = 0x22
			i++
			i = encodeVarintTransaction(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetFeePriceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFeePriceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetFeePriceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFeePriceResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BoxPerByte != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(m.BoxPerByte))
	}
	return i, nil
}

func (m *MakeTxReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MakeTxReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.From) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.From)))
		i += copy(dAtA[i:], m.From)
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Amounts) > 0 {
		dAtA8 := make([]byte, len(m.Amounts)*10)
		var j7 int
		for _, num := range m.Amounts {
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(j7))
		i += copy(dAtA[i:], dAtA8[:j7])
	}
	if m.Fee != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(m.Fee))
	}
	return i, nil
}

func (m *MakeTxResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MakeTxResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(m.Code))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.Tx != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(m.Tx.Size()))
		n9, err := m.Tx.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if len(m.RawMsgs) > 0 {
		for _, b := range m.RawMsgs {
			dAtA[i] = 0x22
			i++
			i = encodeVarintTransaction(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func encodeVarintTransaction(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GetBalanceReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Addrs) > 0 {
		for _, s := range m.Addrs {
			l = len(s)
			n += 1 + l + sovTransaction(uint64(l))
		}
	}
	return n
}

func (m *GetBalanceResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovTransaction(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	if len(m.Balances) > 0 {
		l = 0
		for _, e := range m.Balances {
			l += sovTransaction(uint64(e))
		}
		n += 1 + sovTransaction(uint64(l)) + l
	}
	return n
}

func (m *GetTokenBalanceReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Addrs) > 0 {
		for _, s := range m.Addrs {
			l = len(s)
			n += 1 + l + sovTransaction(uint64(l))
		}
	}
	if m.TokenID != nil {
		l = m.TokenID.Size()
		n += 1 + l + sovTransaction(uint64(l))
	}
	return n
}

func (m *FetchUtxosReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	if m.TokenID != nil {
		l = m.TokenID.Size()
		n += 1 + l + sovTransaction(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovTransaction(uint64(m.Amount))
	}
	return n
}

func (m *FetchUtxosResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovTransaction(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	if len(m.Utxos) > 0 {
		for _, e := range m.Utxos {
			l = e.Size()
			n += 1 + l + sovTransaction(uint64(l))
		}
	}
	return n
}

func (m *GetRawTransactionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	return n
}

func (m *GetRawTransactionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tx != nil {
		l = m.Tx.Size()
		n += 1 + l + sovTransaction(uint64(l))
	}
	return n
}

func (m *GetTransactionPoolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetTransactionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Txs) > 0 {
		for _, e := range m.Txs {
			l = e.Size()
			n += 1 + l + sovTransaction(uint64(l))
		}
	}
	return n
}

func (m *SendTransactionReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tx != nil {
		l = m.Tx.Size()
		n += 1 + l + sovTransaction(uint64(l))
	}
	return n
}

func (m *SendTransactionResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovTransaction(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	return n
}

func (m *ListUtxosResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovTransaction(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovTransaction(uint64(m.Count))
	}
	if len(m.Utxos) > 0 {
		for _, e := range m.Utxos {
			l = e.Size()
			n += 1 + l + sovTransaction(uint64(l))
		}
	}
	return n
}

func (m *GetFeePriceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetFeePriceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BoxPerByte != 0 {
		n += 1 + sovTransaction(uint64(m.BoxPerByte))
	}
	return n
}

func (m *MakeTxReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovTransaction(uint64(l))
		}
	}
	if len(m.Amounts) > 0 {
		l = 0
		for _, e := range m.Amounts {
			l += sovTransaction(uint64(e))
		}
		n += 1 + sovTransaction(uint64(l)) + l
	}
	if m.Fee != 0 {
		n += 1 + sovTransaction(uint64(m.Fee))
	}
	return n
}

func (m *MakeTxResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovTransaction(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	if m.Tx != nil {
		l = m.Tx.Size()
		n += 1 + l + sovTransaction(uint64(l))
	}
	if len(m.RawMsgs) > 0 {
		for _, b := range m.RawMsgs {
			l = len(b)
			n += 1 + l + sovTransaction(uint64(l))
		}
	}
	return n
}

func sovTransaction(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTransaction(x uint64) (n int) {
	return sovTransaction(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetBalanceReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBalanceReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBalanceReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addrs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addrs = append(m.Addrs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBalanceResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBalanceResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBalanceResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTransaction
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Balances = append(m.Balances, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTransaction
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTransaction
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Balances) == 0 {
					m.Balances = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTransaction
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Balances = append(m.Balances, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Balances", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTokenBalanceReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTokenBalanceReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTokenBalanceReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addrs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addrs = append(m.Addrs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TokenID == nil {
				m.TokenID = &pb.OutPoint{}
			}
			if err := m.TokenID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchUtxosReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchUtxosReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchUtxosReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TokenID == nil {
				m.TokenID = &pb.OutPoint{}
			}
			if err := m.TokenID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchUtxosResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchUtxosResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchUtxosResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Utxos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Utxos = append(m.Utxos, &Utxo{})
			if err := m.Utxos[len(m.Utxos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRawTransactionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRawTransactionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRawTransactionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRawTransactionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRawTransactionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRawTransactionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tx == nil {
				m.Tx = &pb.Transaction{}
			}
			if err := m.Tx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTransactionPoolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTransactionPoolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTransactionPoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTransactionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTransactionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTransactionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txs = append(m.Txs, &pb.Transaction{})
			if err := m.Txs[len(m.Txs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendTransactionReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendTransactionReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendTransactionReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tx == nil {
				m.Tx = &pb.Transaction{}
			}
			if err := m.Tx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendTransactionResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendTransactionResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendTransactionResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListUtxosResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListUtxosResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListUtxosResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Utxos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Utxos = append(m.Utxos, &Utxo{})
			if err := m.Utxos[len(m.Utxos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFeePriceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFeePriceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFeePriceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFeePriceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFeePriceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFeePriceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxPerByte", wireType)
			}
			m.BoxPerByte = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BoxPerByte |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MakeTxReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MakeTxReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MakeTxReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = append(m.To, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTransaction
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Amounts = append(m.Amounts, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTransaction
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTransaction
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Amounts) == 0 {
					m.Amounts = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTransaction
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Amounts = append(m.Amounts, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Amounts", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			m.Fee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fee |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MakeTxResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MakeTxResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MakeTxResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tx == nil {
				m.Tx = &pb.Transaction{}
			}
			if err := m.Tx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawMsgs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RawMsgs = append(m.RawMsgs, make([]byte, postIndex-iNdEx))
			copy(m.RawMsgs[len(m.RawMsgs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTransaction(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTransaction
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTransaction
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTransaction(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTransaction = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTransaction   = fmt.Errorf("proto: integer overflow")
)
