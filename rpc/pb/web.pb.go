// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: web.proto

package rpcpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import pb "github.com/BOXFoundation/boxd/core/pb"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type GetTransactionsInfoResponse struct {
	Total uint32             `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Txs   []*TransactionInfo `protobuf:"bytes,2,rep,name=txs" json:"txs,omitempty"`
}

func (m *GetTransactionsInfoResponse) Reset()         { *m = GetTransactionsInfoResponse{} }
func (m *GetTransactionsInfoResponse) String() string { return proto.CompactTextString(m) }
func (*GetTransactionsInfoResponse) ProtoMessage()    {}
func (*GetTransactionsInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_web_4b184d1e3a6bc3ac, []int{0}
}
func (m *GetTransactionsInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTransactionsInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTransactionsInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetTransactionsInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTransactionsInfoResponse.Merge(dst, src)
}
func (m *GetTransactionsInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTransactionsInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTransactionsInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTransactionsInfoResponse proto.InternalMessageInfo

func (m *GetTransactionsInfoResponse) GetTotal() uint32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *GetTransactionsInfoResponse) GetTxs() []*TransactionInfo {
	if m != nil {
		return m.Txs
	}
	return nil
}

type GetTransactionHistoryRequest struct {
	Addr   string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Limit  uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset uint32 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (m *GetTransactionHistoryRequest) Reset()         { *m = GetTransactionHistoryRequest{} }
func (m *GetTransactionHistoryRequest) String() string { return proto.CompactTextString(m) }
func (*GetTransactionHistoryRequest) ProtoMessage()    {}
func (*GetTransactionHistoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_web_4b184d1e3a6bc3ac, []int{1}
}
func (m *GetTransactionHistoryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTransactionHistoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTransactionHistoryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetTransactionHistoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTransactionHistoryRequest.Merge(dst, src)
}
func (m *GetTransactionHistoryRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTransactionHistoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTransactionHistoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTransactionHistoryRequest proto.InternalMessageInfo

func (m *GetTransactionHistoryRequest) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *GetTransactionHistoryRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetTransactionHistoryRequest) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type GetPendingTransactionRequest struct {
	Limit  uint32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset uint32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (m *GetPendingTransactionRequest) Reset()         { *m = GetPendingTransactionRequest{} }
func (m *GetPendingTransactionRequest) String() string { return proto.CompactTextString(m) }
func (*GetPendingTransactionRequest) ProtoMessage()    {}
func (*GetPendingTransactionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_web_4b184d1e3a6bc3ac, []int{2}
}
func (m *GetPendingTransactionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPendingTransactionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPendingTransactionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetPendingTransactionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPendingTransactionRequest.Merge(dst, src)
}
func (m *GetPendingTransactionRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPendingTransactionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPendingTransactionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPendingTransactionRequest proto.InternalMessageInfo

func (m *GetPendingTransactionRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetPendingTransactionRequest) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type GetBlockInfoRequest struct {
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *GetBlockInfoRequest) Reset()         { *m = GetBlockInfoRequest{} }
func (m *GetBlockInfoRequest) String() string { return proto.CompactTextString(m) }
func (*GetBlockInfoRequest) ProtoMessage()    {}
func (*GetBlockInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_web_4b184d1e3a6bc3ac, []int{3}
}
func (m *GetBlockInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBlockInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBlockInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetBlockInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBlockInfoRequest.Merge(dst, src)
}
func (m *GetBlockInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetBlockInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBlockInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetBlockInfoRequest proto.InternalMessageInfo

func (m *GetBlockInfoRequest) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type GetTransactionInfoRequest struct {
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *GetTransactionInfoRequest) Reset()         { *m = GetTransactionInfoRequest{} }
func (m *GetTransactionInfoRequest) String() string { return proto.CompactTextString(m) }
func (*GetTransactionInfoRequest) ProtoMessage()    {}
func (*GetTransactionInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_web_4b184d1e3a6bc3ac, []int{4}
}
func (m *GetTransactionInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTransactionInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTransactionInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetTransactionInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTransactionInfoRequest.Merge(dst, src)
}
func (m *GetTransactionInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTransactionInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTransactionInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTransactionInfoRequest proto.InternalMessageInfo

func (m *GetTransactionInfoRequest) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type GetTopHoldersRequest struct {
	Limit  uint32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset uint32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (m *GetTopHoldersRequest) Reset()         { *m = GetTopHoldersRequest{} }
func (m *GetTopHoldersRequest) String() string { return proto.CompactTextString(m) }
func (*GetTopHoldersRequest) ProtoMessage()    {}
func (*GetTopHoldersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_web_4b184d1e3a6bc3ac, []int{5}
}
func (m *GetTopHoldersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTopHoldersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTopHoldersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetTopHoldersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTopHoldersRequest.Merge(dst, src)
}
func (m *GetTopHoldersRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTopHoldersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTopHoldersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTopHoldersRequest proto.InternalMessageInfo

func (m *GetTopHoldersRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetTopHoldersRequest) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type GetTopHoldersResponse struct {
	Total uint32           `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Data  []*AddressAmount `protobuf:"bytes,2,rep,name=data" json:"data,omitempty"`
}

func (m *GetTopHoldersResponse) Reset()         { *m = GetTopHoldersResponse{} }
func (m *GetTopHoldersResponse) String() string { return proto.CompactTextString(m) }
func (*GetTopHoldersResponse) ProtoMessage()    {}
func (*GetTopHoldersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_web_4b184d1e3a6bc3ac, []int{6}
}
func (m *GetTopHoldersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTopHoldersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTopHoldersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetTopHoldersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTopHoldersResponse.Merge(dst, src)
}
func (m *GetTopHoldersResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTopHoldersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTopHoldersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTopHoldersResponse proto.InternalMessageInfo

func (m *GetTopHoldersResponse) GetTotal() uint32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *GetTopHoldersResponse) GetData() []*AddressAmount {
	if m != nil {
		return m.Data
	}
	return nil
}

type AddressAmount struct {
	Addr   string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Amount uint64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *AddressAmount) Reset()         { *m = AddressAmount{} }
func (m *AddressAmount) String() string { return proto.CompactTextString(m) }
func (*AddressAmount) ProtoMessage()    {}
func (*AddressAmount) Descriptor() ([]byte, []int) {
	return fileDescriptor_web_4b184d1e3a6bc3ac, []int{7}
}
func (m *AddressAmount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddressAmount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddressAmount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AddressAmount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddressAmount.Merge(dst, src)
}
func (m *AddressAmount) XXX_Size() int {
	return m.Size()
}
func (m *AddressAmount) XXX_DiscardUnknown() {
	xxx_messageInfo_AddressAmount.DiscardUnknown(m)
}

var xxx_messageInfo_AddressAmount proto.InternalMessageInfo

func (m *AddressAmount) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *AddressAmount) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type GetHolderCountRequest struct {
}

func (m *GetHolderCountRequest) Reset()         { *m = GetHolderCountRequest{} }
func (m *GetHolderCountRequest) String() string { return proto.CompactTextString(m) }
func (*GetHolderCountRequest) ProtoMessage()    {}
func (*GetHolderCountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_web_4b184d1e3a6bc3ac, []int{8}
}
func (m *GetHolderCountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetHolderCountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetHolderCountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetHolderCountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHolderCountRequest.Merge(dst, src)
}
func (m *GetHolderCountRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetHolderCountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHolderCountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetHolderCountRequest proto.InternalMessageInfo

type GetHolderCountResponse struct {
	HolderCount uint32 `protobuf:"varint,1,opt,name=holder_count,json=holderCount,proto3" json:"holder_count,omitempty"`
}

func (m *GetHolderCountResponse) Reset()         { *m = GetHolderCountResponse{} }
func (m *GetHolderCountResponse) String() string { return proto.CompactTextString(m) }
func (*GetHolderCountResponse) ProtoMessage()    {}
func (*GetHolderCountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_web_4b184d1e3a6bc3ac, []int{9}
}
func (m *GetHolderCountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetHolderCountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetHolderCountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetHolderCountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHolderCountResponse.Merge(dst, src)
}
func (m *GetHolderCountResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetHolderCountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHolderCountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetHolderCountResponse proto.InternalMessageInfo

func (m *GetHolderCountResponse) GetHolderCount() uint32 {
	if m != nil {
		return m.HolderCount
	}
	return 0
}

type HeaderInfo struct {
	Version        int32  `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	PrevBlockHash  string `protobuf:"bytes,2,opt,name=prev_block_hash,json=prevBlockHash,proto3" json:"prev_block_hash,omitempty"`
	TxsRoot        string `protobuf:"bytes,3,opt,name=txs_root,json=txsRoot,proto3" json:"txs_root,omitempty"`
	TimeStamp      int64  `protobuf:"varint,4,opt,name=time_stamp,json=timeStamp,proto3" json:"time_stamp,omitempty"`
	Magic          uint32 `protobuf:"varint,5,opt,name=magic,proto3" json:"magic,omitempty"`
	PeriodHash     string `protobuf:"bytes,6,opt,name=period_hash,json=periodHash,proto3" json:"period_hash,omitempty"`
	CandidatesHash string `protobuf:"bytes,7,opt,name=candidates_hash,json=candidatesHash,proto3" json:"candidates_hash,omitempty"`
}

func (m *HeaderInfo) Reset()         { *m = HeaderInfo{} }
func (m *HeaderInfo) String() string { return proto.CompactTextString(m) }
func (*HeaderInfo) ProtoMessage()    {}
func (*HeaderInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_web_4b184d1e3a6bc3ac, []int{10}
}
func (m *HeaderInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HeaderInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HeaderInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *HeaderInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeaderInfo.Merge(dst, src)
}
func (m *HeaderInfo) XXX_Size() int {
	return m.Size()
}
func (m *HeaderInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_HeaderInfo.DiscardUnknown(m)
}

var xxx_messageInfo_HeaderInfo proto.InternalMessageInfo

func (m *HeaderInfo) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *HeaderInfo) GetPrevBlockHash() string {
	if m != nil {
		return m.PrevBlockHash
	}
	return ""
}

func (m *HeaderInfo) GetTxsRoot() string {
	if m != nil {
		return m.TxsRoot
	}
	return ""
}

func (m *HeaderInfo) GetTimeStamp() int64 {
	if m != nil {
		return m.TimeStamp
	}
	return 0
}

func (m *HeaderInfo) GetMagic() uint32 {
	if m != nil {
		return m.Magic
	}
	return 0
}

func (m *HeaderInfo) GetPeriodHash() string {
	if m != nil {
		return m.PeriodHash
	}
	return ""
}

func (m *HeaderInfo) GetCandidatesHash() string {
	if m != nil {
		return m.CandidatesHash
	}
	return ""
}

type TransactionInfo struct {
	Version  int32        `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Vin      []*pb.TxIn   `protobuf:"bytes,2,rep,name=vin" json:"vin,omitempty"`
	Vout     []*TxOutInfo `protobuf:"bytes,3,rep,name=vout" json:"vout,omitempty"`
	Data     *pb.Data     `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
	Magic    uint32       `protobuf:"varint,5,opt,name=magic,proto3" json:"magic,omitempty"`
	LockTime int64        `protobuf:"varint,6,opt,name=lock_time,json=lockTime,proto3" json:"lock_time,omitempty"`
	Hash     string       `protobuf:"bytes,7,opt,name=hash,proto3" json:"hash,omitempty"`
	Fee      uint64       `protobuf:"varint,8,opt,name=fee,proto3" json:"fee,omitempty"`
	Size_    uint64       `protobuf:"varint,9,opt,name=size,proto3" json:"size,omitempty"`
}

func (m *TransactionInfo) Reset()         { *m = TransactionInfo{} }
func (m *TransactionInfo) String() string { return proto.CompactTextString(m) }
func (*TransactionInfo) ProtoMessage()    {}
func (*TransactionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_web_4b184d1e3a6bc3ac, []int{11}
}
func (m *TransactionInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TransactionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionInfo.Merge(dst, src)
}
func (m *TransactionInfo) XXX_Size() int {
	return m.Size()
}
func (m *TransactionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionInfo proto.InternalMessageInfo

func (m *TransactionInfo) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *TransactionInfo) GetVin() []*pb.TxIn {
	if m != nil {
		return m.Vin
	}
	return nil
}

func (m *TransactionInfo) GetVout() []*TxOutInfo {
	if m != nil {
		return m.Vout
	}
	return nil
}

func (m *TransactionInfo) GetData() *pb.Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *TransactionInfo) GetMagic() uint32 {
	if m != nil {
		return m.Magic
	}
	return 0
}

func (m *TransactionInfo) GetLockTime() int64 {
	if m != nil {
		return m.LockTime
	}
	return 0
}

func (m *TransactionInfo) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *TransactionInfo) GetFee() uint64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *TransactionInfo) GetSize_() uint64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

type TokenTransferInfo struct {
	Token  *Token `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	Amount uint64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *TokenTransferInfo) Reset()         { *m = TokenTransferInfo{} }
func (m *TokenTransferInfo) String() string { return proto.CompactTextString(m) }
func (*TokenTransferInfo) ProtoMessage()    {}
func (*TokenTransferInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_web_4b184d1e3a6bc3ac, []int{12}
}
func (m *TokenTransferInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenTransferInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenTransferInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TokenTransferInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenTransferInfo.Merge(dst, src)
}
func (m *TokenTransferInfo) XXX_Size() int {
	return m.Size()
}
func (m *TokenTransferInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenTransferInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TokenTransferInfo proto.InternalMessageInfo

func (m *TokenTransferInfo) GetToken() *Token {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *TokenTransferInfo) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type TokenIssueInfo struct {
	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	TotalSupply uint64 `protobuf:"varint,2,opt,name=total_supply,json=totalSupply,proto3" json:"total_supply,omitempty"`
}

func (m *TokenIssueInfo) Reset()         { *m = TokenIssueInfo{} }
func (m *TokenIssueInfo) String() string { return proto.CompactTextString(m) }
func (*TokenIssueInfo) ProtoMessage()    {}
func (*TokenIssueInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_web_4b184d1e3a6bc3ac, []int{13}
}
func (m *TokenIssueInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenIssueInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenIssueInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TokenIssueInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenIssueInfo.Merge(dst, src)
}
func (m *TokenIssueInfo) XXX_Size() int {
	return m.Size()
}
func (m *TokenIssueInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenIssueInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TokenIssueInfo proto.InternalMessageInfo

func (m *TokenIssueInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TokenIssueInfo) GetTotalSupply() uint64 {
	if m != nil {
		return m.TotalSupply
	}
	return 0
}

type TxOutInfo struct {
	Value        uint64             `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	ScriptPubKey []byte             `protobuf:"bytes,2,opt,name=script_pub_key,json=scriptPubKey,proto3" json:"script_pub_key,omitempty"`
	ScriptDisasm string             `protobuf:"bytes,3,opt,name=script_disasm,json=scriptDisasm,proto3" json:"script_disasm,omitempty"`
	IssueInfo    *TokenIssueInfo    `protobuf:"bytes,4,opt,name=issue_info,json=issueInfo" json:"issue_info,omitempty"`
	TransferInfo *TokenTransferInfo `protobuf:"bytes,5,opt,name=transfer_info,json=transferInfo" json:"transfer_info,omitempty"`
}

func (m *TxOutInfo) Reset()         { *m = TxOutInfo{} }
func (m *TxOutInfo) String() string { return proto.CompactTextString(m) }
func (*TxOutInfo) ProtoMessage()    {}
func (*TxOutInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_web_4b184d1e3a6bc3ac, []int{14}
}
func (m *TxOutInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxOutInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxOutInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TxOutInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxOutInfo.Merge(dst, src)
}
func (m *TxOutInfo) XXX_Size() int {
	return m.Size()
}
func (m *TxOutInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TxOutInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TxOutInfo proto.InternalMessageInfo

func (m *TxOutInfo) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *TxOutInfo) GetScriptPubKey() []byte {
	if m != nil {
		return m.ScriptPubKey
	}
	return nil
}

func (m *TxOutInfo) GetScriptDisasm() string {
	if m != nil {
		return m.ScriptDisasm
	}
	return ""
}

func (m *TxOutInfo) GetIssueInfo() *TokenIssueInfo {
	if m != nil {
		return m.IssueInfo
	}
	return nil
}

func (m *TxOutInfo) GetTransferInfo() *TokenTransferInfo {
	if m != nil {
		return m.TransferInfo
	}
	return nil
}

type BlockInfo struct {
	Header    *HeaderInfo        `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Txs       []*TransactionInfo `protobuf:"bytes,2,rep,name=txs" json:"txs,omitempty"`
	Height    uint32             `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	Signature []byte             `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	Hash      string             `protobuf:"bytes,5,opt,name=hash,proto3" json:"hash,omitempty"`
	Size_     uint64             `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`
	CoinBase  string             `protobuf:"bytes,7,opt,name=coin_base,json=coinBase,proto3" json:"coin_base,omitempty"`
}

func (m *BlockInfo) Reset()         { *m = BlockInfo{} }
func (m *BlockInfo) String() string { return proto.CompactTextString(m) }
func (*BlockInfo) ProtoMessage()    {}
func (*BlockInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_web_4b184d1e3a6bc3ac, []int{15}
}
func (m *BlockInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BlockInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockInfo.Merge(dst, src)
}
func (m *BlockInfo) XXX_Size() int {
	return m.Size()
}
func (m *BlockInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BlockInfo proto.InternalMessageInfo

func (m *BlockInfo) GetHeader() *HeaderInfo {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *BlockInfo) GetTxs() []*TransactionInfo {
	if m != nil {
		return m.Txs
	}
	return nil
}

func (m *BlockInfo) GetHeight() uint32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *BlockInfo) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *BlockInfo) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *BlockInfo) GetSize_() uint64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *BlockInfo) GetCoinBase() string {
	if m != nil {
		return m.CoinBase
	}
	return ""
}

type Token struct {
	Hash  string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Index uint32 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *Token) Reset()         { *m = Token{} }
func (m *Token) String() string { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()    {}
func (*Token) Descriptor() ([]byte, []int) {
	return fileDescriptor_web_4b184d1e3a6bc3ac, []int{16}
}
func (m *Token) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Token) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Token.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Token) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Token.Merge(dst, src)
}
func (m *Token) XXX_Size() int {
	return m.Size()
}
func (m *Token) XXX_DiscardUnknown() {
	xxx_messageInfo_Token.DiscardUnknown(m)
}

var xxx_messageInfo_Token proto.InternalMessageInfo

func (m *Token) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *Token) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

type ListTokensRequest struct {
	Offset uint32 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *ListTokensRequest) Reset()         { *m = ListTokensRequest{} }
func (m *ListTokensRequest) String() string { return proto.CompactTextString(m) }
func (*ListTokensRequest) ProtoMessage()    {}
func (*ListTokensRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_web_4b184d1e3a6bc3ac, []int{17}
}
func (m *ListTokensRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTokensRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTokensRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ListTokensRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTokensRequest.Merge(dst, src)
}
func (m *ListTokensRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListTokensRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTokensRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListTokensRequest proto.InternalMessageInfo

func (m *ListTokensRequest) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ListTokensRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type GetTokenHoldersRequest struct {
	Token  *Token `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	Offset uint32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  uint32 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *GetTokenHoldersRequest) Reset()         { *m = GetTokenHoldersRequest{} }
func (m *GetTokenHoldersRequest) String() string { return proto.CompactTextString(m) }
func (*GetTokenHoldersRequest) ProtoMessage()    {}
func (*GetTokenHoldersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_web_4b184d1e3a6bc3ac, []int{18}
}
func (m *GetTokenHoldersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTokenHoldersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTokenHoldersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetTokenHoldersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTokenHoldersRequest.Merge(dst, src)
}
func (m *GetTokenHoldersRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTokenHoldersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTokenHoldersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTokenHoldersRequest proto.InternalMessageInfo

func (m *GetTokenHoldersRequest) GetToken() *Token {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *GetTokenHoldersRequest) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *GetTokenHoldersRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type GetTokenTransactionsRequest struct {
	Token  *Token `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	Offset uint32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  uint32 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *GetTokenTransactionsRequest) Reset()         { *m = GetTokenTransactionsRequest{} }
func (m *GetTokenTransactionsRequest) String() string { return proto.CompactTextString(m) }
func (*GetTokenTransactionsRequest) ProtoMessage()    {}
func (*GetTokenTransactionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_web_4b184d1e3a6bc3ac, []int{19}
}
func (m *GetTokenTransactionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTokenTransactionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTokenTransactionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetTokenTransactionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTokenTransactionsRequest.Merge(dst, src)
}
func (m *GetTokenTransactionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTokenTransactionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTokenTransactionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTokenTransactionsRequest proto.InternalMessageInfo

func (m *GetTokenTransactionsRequest) GetToken() *Token {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *GetTokenTransactionsRequest) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *GetTokenTransactionsRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type TokenBasicInfo struct {
	Token       *Token `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	TotalSupply uint64 `protobuf:"varint,3,opt,name=total_supply,json=totalSupply,proto3" json:"total_supply,omitempty"`
	CreatorAddr string `protobuf:"bytes,4,opt,name=creator_addr,json=creatorAddr,proto3" json:"creator_addr,omitempty"`
	CreatorTime uint64 `protobuf:"varint,5,opt,name=creator_time,json=creatorTime,proto3" json:"creator_time,omitempty"`
}

func (m *TokenBasicInfo) Reset()         { *m = TokenBasicInfo{} }
func (m *TokenBasicInfo) String() string { return proto.CompactTextString(m) }
func (*TokenBasicInfo) ProtoMessage()    {}
func (*TokenBasicInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_web_4b184d1e3a6bc3ac, []int{20}
}
func (m *TokenBasicInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenBasicInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenBasicInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TokenBasicInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenBasicInfo.Merge(dst, src)
}
func (m *TokenBasicInfo) XXX_Size() int {
	return m.Size()
}
func (m *TokenBasicInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenBasicInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TokenBasicInfo proto.InternalMessageInfo

func (m *TokenBasicInfo) GetToken() *Token {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *TokenBasicInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TokenBasicInfo) GetTotalSupply() uint64 {
	if m != nil {
		return m.TotalSupply
	}
	return 0
}

func (m *TokenBasicInfo) GetCreatorAddr() string {
	if m != nil {
		return m.CreatorAddr
	}
	return ""
}

func (m *TokenBasicInfo) GetCreatorTime() uint64 {
	if m != nil {
		return m.CreatorTime
	}
	return 0
}

type ListTokensResponse struct {
	Count  uint32            `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Tokens []*TokenBasicInfo `protobuf:"bytes,2,rep,name=tokens" json:"tokens,omitempty"`
}

func (m *ListTokensResponse) Reset()         { *m = ListTokensResponse{} }
func (m *ListTokensResponse) String() string { return proto.CompactTextString(m) }
func (*ListTokensResponse) ProtoMessage()    {}
func (*ListTokensResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_web_4b184d1e3a6bc3ac, []int{21}
}
func (m *ListTokensResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTokensResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTokensResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ListTokensResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTokensResponse.Merge(dst, src)
}
func (m *ListTokensResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListTokensResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTokensResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListTokensResponse proto.InternalMessageInfo

func (m *ListTokensResponse) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ListTokensResponse) GetTokens() []*TokenBasicInfo {
	if m != nil {
		return m.Tokens
	}
	return nil
}

type GetTokenHoldersResponse struct {
	Token *Token           `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	Count uint32           `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Data  []*AddressAmount `protobuf:"bytes,3,rep,name=data" json:"data,omitempty"`
}

func (m *GetTokenHoldersResponse) Reset()         { *m = GetTokenHoldersResponse{} }
func (m *GetTokenHoldersResponse) String() string { return proto.CompactTextString(m) }
func (*GetTokenHoldersResponse) ProtoMessage()    {}
func (*GetTokenHoldersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_web_4b184d1e3a6bc3ac, []int{22}
}
func (m *GetTokenHoldersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTokenHoldersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTokenHoldersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetTokenHoldersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTokenHoldersResponse.Merge(dst, src)
}
func (m *GetTokenHoldersResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTokenHoldersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTokenHoldersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTokenHoldersResponse proto.InternalMessageInfo

func (m *GetTokenHoldersResponse) GetToken() *Token {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *GetTokenHoldersResponse) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *GetTokenHoldersResponse) GetData() []*AddressAmount {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*GetTransactionsInfoResponse)(nil), "rpcpb.GetTransactionsInfoResponse")
	proto.RegisterType((*GetTransactionHistoryRequest)(nil), "rpcpb.GetTransactionHistoryRequest")
	proto.RegisterType((*GetPendingTransactionRequest)(nil), "rpcpb.GetPendingTransactionRequest")
	proto.RegisterType((*GetBlockInfoRequest)(nil), "rpcpb.GetBlockInfoRequest")
	proto.RegisterType((*GetTransactionInfoRequest)(nil), "rpcpb.GetTransactionInfoRequest")
	proto.RegisterType((*GetTopHoldersRequest)(nil), "rpcpb.GetTopHoldersRequest")
	proto.RegisterType((*GetTopHoldersResponse)(nil), "rpcpb.GetTopHoldersResponse")
	proto.RegisterType((*AddressAmount)(nil), "rpcpb.AddressAmount")
	proto.RegisterType((*GetHolderCountRequest)(nil), "rpcpb.GetHolderCountRequest")
	proto.RegisterType((*GetHolderCountResponse)(nil), "rpcpb.GetHolderCountResponse")
	proto.RegisterType((*HeaderInfo)(nil), "rpcpb.HeaderInfo")
	proto.RegisterType((*TransactionInfo)(nil), "rpcpb.TransactionInfo")
	proto.RegisterType((*TokenTransferInfo)(nil), "rpcpb.TokenTransferInfo")
	proto.RegisterType((*TokenIssueInfo)(nil), "rpcpb.TokenIssueInfo")
	proto.RegisterType((*TxOutInfo)(nil), "rpcpb.TxOutInfo")
	proto.RegisterType((*BlockInfo)(nil), "rpcpb.BlockInfo")
	proto.RegisterType((*Token)(nil), "rpcpb.Token")
	proto.RegisterType((*ListTokensRequest)(nil), "rpcpb.ListTokensRequest")
	proto.RegisterType((*GetTokenHoldersRequest)(nil), "rpcpb.GetTokenHoldersRequest")
	proto.RegisterType((*GetTokenTransactionsRequest)(nil), "rpcpb.GetTokenTransactionsRequest")
	proto.RegisterType((*TokenBasicInfo)(nil), "rpcpb.TokenBasicInfo")
	proto.RegisterType((*ListTokensResponse)(nil), "rpcpb.ListTokensResponse")
	proto.RegisterType((*GetTokenHoldersResponse)(nil), "rpcpb.GetTokenHoldersResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WebApiClient is the client API for WebApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WebApiClient interface {
	GetTransaction(ctx context.Context, in *GetTransactionInfoRequest, opts ...grpc.CallOption) (*TransactionInfo, error)
	GetBlock(ctx context.Context, in *GetBlockInfoRequest, opts ...grpc.CallOption) (*BlockInfo, error)
	GetTopHolders(ctx context.Context, in *GetTopHoldersRequest, opts ...grpc.CallOption) (*GetTopHoldersResponse, error)
	GetHolderCount(ctx context.Context, in *GetHolderCountRequest, opts ...grpc.CallOption) (*GetHolderCountResponse, error)
	GetPendingTransaction(ctx context.Context, in *GetPendingTransactionRequest, opts ...grpc.CallOption) (*GetTransactionsInfoResponse, error)
	GetTransactionHistory(ctx context.Context, in *GetTransactionHistoryRequest, opts ...grpc.CallOption) (*GetTransactionsInfoResponse, error)
	ListTokens(ctx context.Context, in *ListTokensRequest, opts ...grpc.CallOption) (*ListTokensResponse, error)
	GetTokenHolders(ctx context.Context, in *GetTokenHoldersRequest, opts ...grpc.CallOption) (*GetTokenHoldersResponse, error)
	GetTokenTransactions(ctx context.Context, in *GetTokenTransactionsRequest, opts ...grpc.CallOption) (*GetTransactionsInfoResponse, error)
}

type webApiClient struct {
	cc *grpc.ClientConn
}

func NewWebApiClient(cc *grpc.ClientConn) WebApiClient {
	return &webApiClient{cc}
}

func (c *webApiClient) GetTransaction(ctx context.Context, in *GetTransactionInfoRequest, opts ...grpc.CallOption) (*TransactionInfo, error) {
	out := new(TransactionInfo)
	err := c.cc.Invoke(ctx, "/rpcpb.WebApi/GetTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) GetBlock(ctx context.Context, in *GetBlockInfoRequest, opts ...grpc.CallOption) (*BlockInfo, error) {
	out := new(BlockInfo)
	err := c.cc.Invoke(ctx, "/rpcpb.WebApi/GetBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) GetTopHolders(ctx context.Context, in *GetTopHoldersRequest, opts ...grpc.CallOption) (*GetTopHoldersResponse, error) {
	out := new(GetTopHoldersResponse)
	err := c.cc.Invoke(ctx, "/rpcpb.WebApi/GetTopHolders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) GetHolderCount(ctx context.Context, in *GetHolderCountRequest, opts ...grpc.CallOption) (*GetHolderCountResponse, error) {
	out := new(GetHolderCountResponse)
	err := c.cc.Invoke(ctx, "/rpcpb.WebApi/GetHolderCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) GetPendingTransaction(ctx context.Context, in *GetPendingTransactionRequest, opts ...grpc.CallOption) (*GetTransactionsInfoResponse, error) {
	out := new(GetTransactionsInfoResponse)
	err := c.cc.Invoke(ctx, "/rpcpb.WebApi/GetPendingTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) GetTransactionHistory(ctx context.Context, in *GetTransactionHistoryRequest, opts ...grpc.CallOption) (*GetTransactionsInfoResponse, error) {
	out := new(GetTransactionsInfoResponse)
	err := c.cc.Invoke(ctx, "/rpcpb.WebApi/GetTransactionHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) ListTokens(ctx context.Context, in *ListTokensRequest, opts ...grpc.CallOption) (*ListTokensResponse, error) {
	out := new(ListTokensResponse)
	err := c.cc.Invoke(ctx, "/rpcpb.WebApi/ListTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) GetTokenHolders(ctx context.Context, in *GetTokenHoldersRequest, opts ...grpc.CallOption) (*GetTokenHoldersResponse, error) {
	out := new(GetTokenHoldersResponse)
	err := c.cc.Invoke(ctx, "/rpcpb.WebApi/GetTokenHolders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) GetTokenTransactions(ctx context.Context, in *GetTokenTransactionsRequest, opts ...grpc.CallOption) (*GetTransactionsInfoResponse, error) {
	out := new(GetTransactionsInfoResponse)
	err := c.cc.Invoke(ctx, "/rpcpb.WebApi/GetTokenTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebApiServer is the server API for WebApi service.
type WebApiServer interface {
	GetTransaction(context.Context, *GetTransactionInfoRequest) (*TransactionInfo, error)
	GetBlock(context.Context, *GetBlockInfoRequest) (*BlockInfo, error)
	GetTopHolders(context.Context, *GetTopHoldersRequest) (*GetTopHoldersResponse, error)
	GetHolderCount(context.Context, *GetHolderCountRequest) (*GetHolderCountResponse, error)
	GetPendingTransaction(context.Context, *GetPendingTransactionRequest) (*GetTransactionsInfoResponse, error)
	GetTransactionHistory(context.Context, *GetTransactionHistoryRequest) (*GetTransactionsInfoResponse, error)
	ListTokens(context.Context, *ListTokensRequest) (*ListTokensResponse, error)
	GetTokenHolders(context.Context, *GetTokenHoldersRequest) (*GetTokenHoldersResponse, error)
	GetTokenTransactions(context.Context, *GetTokenTransactionsRequest) (*GetTransactionsInfoResponse, error)
}

func RegisterWebApiServer(s *grpc.Server, srv WebApiServer) {
	s.RegisterService(&_WebApi_serviceDesc, srv)
}

func _WebApi_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.WebApi/GetTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).GetTransaction(ctx, req.(*GetTransactionInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.WebApi/GetBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).GetBlock(ctx, req.(*GetBlockInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_GetTopHolders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopHoldersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).GetTopHolders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.WebApi/GetTopHolders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).GetTopHolders(ctx, req.(*GetTopHoldersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_GetHolderCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHolderCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).GetHolderCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.WebApi/GetHolderCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).GetHolderCount(ctx, req.(*GetHolderCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_GetPendingTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPendingTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).GetPendingTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.WebApi/GetPendingTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).GetPendingTransaction(ctx, req.(*GetPendingTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_GetTransactionHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).GetTransactionHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.WebApi/GetTransactionHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).GetTransactionHistory(ctx, req.(*GetTransactionHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_ListTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).ListTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.WebApi/ListTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).ListTokens(ctx, req.(*ListTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_GetTokenHolders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenHoldersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).GetTokenHolders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.WebApi/GetTokenHolders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).GetTokenHolders(ctx, req.(*GetTokenHoldersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_GetTokenTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).GetTokenTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.WebApi/GetTokenTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).GetTokenTransactions(ctx, req.(*GetTokenTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WebApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpcpb.WebApi",
	HandlerType: (*WebApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTransaction",
			Handler:    _WebApi_GetTransaction_Handler,
		},
		{
			MethodName: "GetBlock",
			Handler:    _WebApi_GetBlock_Handler,
		},
		{
			MethodName: "GetTopHolders",
			Handler:    _WebApi_GetTopHolders_Handler,
		},
		{
			MethodName: "GetHolderCount",
			Handler:    _WebApi_GetHolderCount_Handler,
		},
		{
			MethodName: "GetPendingTransaction",
			Handler:    _WebApi_GetPendingTransaction_Handler,
		},
		{
			MethodName: "GetTransactionHistory",
			Handler:    _WebApi_GetTransactionHistory_Handler,
		},
		{
			MethodName: "ListTokens",
			Handler:    _WebApi_ListTokens_Handler,
		},
		{
			MethodName: "GetTokenHolders",
			Handler:    _WebApi_GetTokenHolders_Handler,
		},
		{
			MethodName: "GetTokenTransactions",
			Handler:    _WebApi_GetTokenTransactions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "web.proto",
}

func (m *GetTransactionsInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTransactionsInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.Total))
	}
	if len(m.Txs) > 0 {
		for _, msg := range m.Txs {
			dAtA[i] = 0x12
			i++
			i = encodeVarintWeb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetTransactionHistoryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTransactionHistoryRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Addr) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWeb(dAtA, i, uint64(len(m.Addr)))
		i += copy(dAtA[i:], m.Addr)
	}
	if m.Limit != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.Limit))
	}
	if m.Offset != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.Offset))
	}
	return i, nil
}

func (m *GetPendingTransactionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPendingTransactionRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.Limit))
	}
	if m.Offset != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.Offset))
	}
	return i, nil
}

func (m *GetBlockInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBlockInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWeb(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	return i, nil
}

func (m *GetTransactionInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTransactionInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWeb(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	return i, nil
}

func (m *GetTopHoldersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTopHoldersRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.Limit))
	}
	if m.Offset != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.Offset))
	}
	return i, nil
}

func (m *GetTopHoldersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTopHoldersResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.Total))
	}
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0x12
			i++
			i = encodeVarintWeb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AddressAmount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddressAmount) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Addr) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWeb(dAtA, i, uint64(len(m.Addr)))
		i += copy(dAtA[i:], m.Addr)
	}
	if m.Amount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.Amount))
	}
	return i, nil
}

func (m *GetHolderCountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetHolderCountRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetHolderCountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetHolderCountResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HolderCount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.HolderCount))
	}
	return i, nil
}

func (m *HeaderInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeaderInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.Version))
	}
	if len(m.PrevBlockHash) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWeb(dAtA, i, uint64(len(m.PrevBlockHash)))
		i += copy(dAtA[i:], m.PrevBlockHash)
	}
	if len(m.TxsRoot) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintWeb(dAtA, i, uint64(len(m.TxsRoot)))
		i += copy(dAtA[i:], m.TxsRoot)
	}
	if m.TimeStamp != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.TimeStamp))
	}
	if m.Magic != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.Magic))
	}
	if len(m.PeriodHash) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintWeb(dAtA, i, uint64(len(m.PeriodHash)))
		i += copy(dAtA[i:], m.PeriodHash)
	}
	if len(m.CandidatesHash) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintWeb(dAtA, i, uint64(len(m.CandidatesHash)))
		i += copy(dAtA[i:], m.CandidatesHash)
	}
	return i, nil
}

func (m *TransactionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.Version))
	}
	if len(m.Vin) > 0 {
		for _, msg := range m.Vin {
			dAtA[i] = 0x12
			i++
			i = encodeVarintWeb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Vout) > 0 {
		for _, msg := range m.Vout {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintWeb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Data != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.Data.Size()))
		n1, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Magic != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.Magic))
	}
	if m.LockTime != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.LockTime))
	}
	if len(m.Hash) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintWeb(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	if m.Fee != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.Fee))
	}
	if m.Size_ != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.Size_))
	}
	return i, nil
}

func (m *TokenTransferInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenTransferInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Token != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.Token.Size()))
		n2, err := m.Token.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Amount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.Amount))
	}
	return i, nil
}

func (m *TokenIssueInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenIssueInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWeb(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.TotalSupply != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.TotalSupply))
	}
	return i, nil
}

func (m *TxOutInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxOutInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.Value))
	}
	if len(m.ScriptPubKey) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWeb(dAtA, i, uint64(len(m.ScriptPubKey)))
		i += copy(dAtA[i:], m.ScriptPubKey)
	}
	if len(m.ScriptDisasm) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintWeb(dAtA, i, uint64(len(m.ScriptDisasm)))
		i += copy(dAtA[i:], m.ScriptDisasm)
	}
	if m.IssueInfo != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.IssueInfo.Size()))
		n3, err := m.IssueInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.TransferInfo != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.TransferInfo.Size()))
		n4, err := m.TransferInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *BlockInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.Header.Size()))
		n5, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.Txs) > 0 {
		for _, msg := range m.Txs {
			dAtA[i] = 0x12
			i++
			i = encodeVarintWeb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Height != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.Height))
	}
	if len(m.Signature) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintWeb(dAtA, i, uint64(len(m.Signature)))
		i += copy(dAtA[i:], m.Signature)
	}
	if len(m.Hash) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintWeb(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	if m.Size_ != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.Size_))
	}
	if len(m.CoinBase) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintWeb(dAtA, i, uint64(len(m.CoinBase)))
		i += copy(dAtA[i:], m.CoinBase)
	}
	return i, nil
}

func (m *Token) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Token) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWeb(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	if m.Index != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.Index))
	}
	return i, nil
}

func (m *ListTokensRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTokensRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Offset != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.Offset))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.Limit))
	}
	return i, nil
}

func (m *GetTokenHoldersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTokenHoldersRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Token != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.Token.Size()))
		n6, err := m.Token.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.Offset != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.Offset))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.Limit))
	}
	return i, nil
}

func (m *GetTokenTransactionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTokenTransactionsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Token != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.Token.Size()))
		n7, err := m.Token.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.Offset != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.Offset))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.Limit))
	}
	return i, nil
}

func (m *TokenBasicInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenBasicInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Token != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.Token.Size()))
		n8, err := m.Token.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWeb(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.TotalSupply != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.TotalSupply))
	}
	if len(m.CreatorAddr) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintWeb(dAtA, i, uint64(len(m.CreatorAddr)))
		i += copy(dAtA[i:], m.CreatorAddr)
	}
	if m.CreatorTime != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.CreatorTime))
	}
	return i, nil
}

func (m *ListTokensResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTokensResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.Count))
	}
	if len(m.Tokens) > 0 {
		for _, msg := range m.Tokens {
			dAtA[i] = 0x12
			i++
			i = encodeVarintWeb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetTokenHoldersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTokenHoldersResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Token != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.Token.Size()))
		n9, err := m.Token.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.Count))
	}
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintWeb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintWeb(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GetTransactionsInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovWeb(uint64(m.Total))
	}
	if len(m.Txs) > 0 {
		for _, e := range m.Txs {
			l = e.Size()
			n += 1 + l + sovWeb(uint64(l))
		}
	}
	return n
}

func (m *GetTransactionHistoryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovWeb(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovWeb(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovWeb(uint64(m.Offset))
	}
	return n
}

func (m *GetPendingTransactionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovWeb(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovWeb(uint64(m.Offset))
	}
	return n
}

func (m *GetBlockInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovWeb(uint64(l))
	}
	return n
}

func (m *GetTransactionInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovWeb(uint64(l))
	}
	return n
}

func (m *GetTopHoldersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovWeb(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovWeb(uint64(m.Offset))
	}
	return n
}

func (m *GetTopHoldersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovWeb(uint64(m.Total))
	}
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovWeb(uint64(l))
		}
	}
	return n
}

func (m *AddressAmount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovWeb(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovWeb(uint64(m.Amount))
	}
	return n
}

func (m *GetHolderCountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetHolderCountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HolderCount != 0 {
		n += 1 + sovWeb(uint64(m.HolderCount))
	}
	return n
}

func (m *HeaderInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovWeb(uint64(m.Version))
	}
	l = len(m.PrevBlockHash)
	if l > 0 {
		n += 1 + l + sovWeb(uint64(l))
	}
	l = len(m.TxsRoot)
	if l > 0 {
		n += 1 + l + sovWeb(uint64(l))
	}
	if m.TimeStamp != 0 {
		n += 1 + sovWeb(uint64(m.TimeStamp))
	}
	if m.Magic != 0 {
		n += 1 + sovWeb(uint64(m.Magic))
	}
	l = len(m.PeriodHash)
	if l > 0 {
		n += 1 + l + sovWeb(uint64(l))
	}
	l = len(m.CandidatesHash)
	if l > 0 {
		n += 1 + l + sovWeb(uint64(l))
	}
	return n
}

func (m *TransactionInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovWeb(uint64(m.Version))
	}
	if len(m.Vin) > 0 {
		for _, e := range m.Vin {
			l = e.Size()
			n += 1 + l + sovWeb(uint64(l))
		}
	}
	if len(m.Vout) > 0 {
		for _, e := range m.Vout {
			l = e.Size()
			n += 1 + l + sovWeb(uint64(l))
		}
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovWeb(uint64(l))
	}
	if m.Magic != 0 {
		n += 1 + sovWeb(uint64(m.Magic))
	}
	if m.LockTime != 0 {
		n += 1 + sovWeb(uint64(m.LockTime))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovWeb(uint64(l))
	}
	if m.Fee != 0 {
		n += 1 + sovWeb(uint64(m.Fee))
	}
	if m.Size_ != 0 {
		n += 1 + sovWeb(uint64(m.Size_))
	}
	return n
}

func (m *TokenTransferInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Token != nil {
		l = m.Token.Size()
		n += 1 + l + sovWeb(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovWeb(uint64(m.Amount))
	}
	return n
}

func (m *TokenIssueInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovWeb(uint64(l))
	}
	if m.TotalSupply != 0 {
		n += 1 + sovWeb(uint64(m.TotalSupply))
	}
	return n
}

func (m *TxOutInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovWeb(uint64(m.Value))
	}
	l = len(m.ScriptPubKey)
	if l > 0 {
		n += 1 + l + sovWeb(uint64(l))
	}
	l = len(m.ScriptDisasm)
	if l > 0 {
		n += 1 + l + sovWeb(uint64(l))
	}
	if m.IssueInfo != nil {
		l = m.IssueInfo.Size()
		n += 1 + l + sovWeb(uint64(l))
	}
	if m.TransferInfo != nil {
		l = m.TransferInfo.Size()
		n += 1 + l + sovWeb(uint64(l))
	}
	return n
}

func (m *BlockInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovWeb(uint64(l))
	}
	if len(m.Txs) > 0 {
		for _, e := range m.Txs {
			l = e.Size()
			n += 1 + l + sovWeb(uint64(l))
		}
	}
	if m.Height != 0 {
		n += 1 + sovWeb(uint64(m.Height))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovWeb(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovWeb(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovWeb(uint64(m.Size_))
	}
	l = len(m.CoinBase)
	if l > 0 {
		n += 1 + l + sovWeb(uint64(l))
	}
	return n
}

func (m *Token) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovWeb(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovWeb(uint64(m.Index))
	}
	return n
}

func (m *ListTokensRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Offset != 0 {
		n += 1 + sovWeb(uint64(m.Offset))
	}
	if m.Limit != 0 {
		n += 1 + sovWeb(uint64(m.Limit))
	}
	return n
}

func (m *GetTokenHoldersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Token != nil {
		l = m.Token.Size()
		n += 1 + l + sovWeb(uint64(l))
	}
	if m.Offset != 0 {
		n += 1 + sovWeb(uint64(m.Offset))
	}
	if m.Limit != 0 {
		n += 1 + sovWeb(uint64(m.Limit))
	}
	return n
}

func (m *GetTokenTransactionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Token != nil {
		l = m.Token.Size()
		n += 1 + l + sovWeb(uint64(l))
	}
	if m.Offset != 0 {
		n += 1 + sovWeb(uint64(m.Offset))
	}
	if m.Limit != 0 {
		n += 1 + sovWeb(uint64(m.Limit))
	}
	return n
}

func (m *TokenBasicInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Token != nil {
		l = m.Token.Size()
		n += 1 + l + sovWeb(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovWeb(uint64(l))
	}
	if m.TotalSupply != 0 {
		n += 1 + sovWeb(uint64(m.TotalSupply))
	}
	l = len(m.CreatorAddr)
	if l > 0 {
		n += 1 + l + sovWeb(uint64(l))
	}
	if m.CreatorTime != 0 {
		n += 1 + sovWeb(uint64(m.CreatorTime))
	}
	return n
}

func (m *ListTokensResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovWeb(uint64(m.Count))
	}
	if len(m.Tokens) > 0 {
		for _, e := range m.Tokens {
			l = e.Size()
			n += 1 + l + sovWeb(uint64(l))
		}
	}
	return n
}

func (m *GetTokenHoldersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Token != nil {
		l = m.Token.Size()
		n += 1 + l + sovWeb(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovWeb(uint64(m.Count))
	}
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovWeb(uint64(l))
		}
	}
	return n
}

func sovWeb(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozWeb(x uint64) (n int) {
	return sovWeb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetTransactionsInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWeb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTransactionsInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTransactionsInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txs = append(m.Txs, &TransactionInfo{})
			if err := m.Txs[len(m.Txs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWeb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWeb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTransactionHistoryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWeb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTransactionHistoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTransactionHistoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWeb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWeb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPendingTransactionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWeb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPendingTransactionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPendingTransactionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWeb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWeb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBlockInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWeb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBlockInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBlockInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWeb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWeb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTransactionInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWeb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTransactionInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTransactionInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWeb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWeb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTopHoldersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWeb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTopHoldersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTopHoldersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWeb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWeb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTopHoldersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWeb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTopHoldersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTopHoldersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &AddressAmount{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWeb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWeb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddressAmount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWeb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddressAmount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddressAmount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWeb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWeb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetHolderCountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWeb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetHolderCountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetHolderCountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipWeb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWeb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetHolderCountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWeb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetHolderCountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetHolderCountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HolderCount", wireType)
			}
			m.HolderCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HolderCount |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWeb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWeb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeaderInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWeb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeaderInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeaderInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevBlockHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrevBlockHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxsRoot", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxsRoot = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeStamp", wireType)
			}
			m.TimeStamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeStamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Magic", wireType)
			}
			m.Magic = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Magic |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeriodHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeriodHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CandidatesHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CandidatesHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWeb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWeb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWeb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vin = append(m.Vin, &pb.TxIn{})
			if err := m.Vin[len(m.Vin)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vout = append(m.Vout, &TxOutInfo{})
			if err := m.Vout[len(m.Vout)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &pb.Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Magic", wireType)
			}
			m.Magic = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Magic |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockTime", wireType)
			}
			m.LockTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			m.Fee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fee |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWeb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWeb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenTransferInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWeb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenTransferInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenTransferInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Token == nil {
				m.Token = &Token{}
			}
			if err := m.Token.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWeb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWeb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenIssueInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWeb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenIssueInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenIssueInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSupply", wireType)
			}
			m.TotalSupply = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalSupply |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWeb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWeb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxOutInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWeb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxOutInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxOutInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScriptPubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScriptPubKey = append(m.ScriptPubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.ScriptPubKey == nil {
				m.ScriptPubKey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScriptDisasm", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScriptDisasm = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssueInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IssueInfo == nil {
				m.IssueInfo = &TokenIssueInfo{}
			}
			if err := m.IssueInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TransferInfo == nil {
				m.TransferInfo = &TokenTransferInfo{}
			}
			if err := m.TransferInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWeb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWeb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWeb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &HeaderInfo{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txs = append(m.Txs, &TransactionInfo{})
			if err := m.Txs[len(m.Txs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinBase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoinBase = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWeb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWeb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Token) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWeb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Token: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Token: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWeb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWeb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTokensRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWeb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTokensRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTokensRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWeb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWeb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTokenHoldersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWeb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTokenHoldersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTokenHoldersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Token == nil {
				m.Token = &Token{}
			}
			if err := m.Token.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWeb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWeb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTokenTransactionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWeb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTokenTransactionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTokenTransactionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Token == nil {
				m.Token = &Token{}
			}
			if err := m.Token.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWeb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWeb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenBasicInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWeb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenBasicInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenBasicInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Token == nil {
				m.Token = &Token{}
			}
			if err := m.Token.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSupply", wireType)
			}
			m.TotalSupply = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalSupply |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatorTime", wireType)
			}
			m.CreatorTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatorTime |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWeb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWeb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTokensResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWeb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTokensResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTokensResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tokens = append(m.Tokens, &TokenBasicInfo{})
			if err := m.Tokens[len(m.Tokens)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWeb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWeb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTokenHoldersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWeb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTokenHoldersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTokenHoldersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Token == nil {
				m.Token = &Token{}
			}
			if err := m.Token.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &AddressAmount{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWeb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWeb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWeb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWeb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthWeb
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowWeb
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipWeb(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthWeb = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWeb   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("web.proto", fileDescriptor_web_4b184d1e3a6bc3ac) }

var fileDescriptor_web_4b184d1e3a6bc3ac = []byte{
	// 1360 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0x4b, 0x6f, 0x5b, 0xc5,
	0x17, 0xef, 0xf5, 0x2b, 0xf1, 0xc9, 0xab, 0x9d, 0xb6, 0xa9, 0xe3, 0x24, 0x6e, 0x3a, 0xed, 0xff,
	0x4f, 0x8a, 0x44, 0xac, 0x16, 0x56, 0x54, 0x2c, 0x12, 0x2a, 0x9a, 0x8a, 0x4a, 0xad, 0x6e, 0x2b,
	0xb5, 0x2c, 0x90, 0x19, 0xfb, 0x4e, 0xec, 0x21, 0xf6, 0x9d, 0xcb, 0x9d, 0x71, 0xea, 0x22, 0x21,
	0x01, 0x82, 0x3d, 0x12, 0x9f, 0x81, 0x0f, 0xc0, 0xb7, 0x60, 0x59, 0x89, 0x0d, 0x12, 0x1b, 0x68,
	0x59, 0xf0, 0x31, 0xd0, 0x9c, 0x99, 0xfb, 0xf0, 0xab, 0x89, 0x90, 0xd8, 0xdd, 0x39, 0x73, 0xe6,
	0x77, 0xde, 0x8f, 0x0b, 0xd5, 0xe7, 0xbc, 0xbd, 0x17, 0xc5, 0x52, 0x4b, 0x52, 0x8e, 0xa3, 0x4e,
	0xd4, 0xae, 0xdf, 0xea, 0x0a, 0xdd, 0x1b, 0xb6, 0xf7, 0x3a, 0x72, 0xd0, 0x3c, 0x78, 0xf8, 0xec,
	0x23, 0x39, 0x0c, 0x03, 0xa6, 0x85, 0x0c, 0x9b, 0x6d, 0x39, 0x0a, 0x9a, 0x1d, 0x19, 0xf3, 0x66,
	0xd4, 0x6e, 0xb6, 0xfb, 0xb2, 0x73, 0x6c, 0x5f, 0xd6, 0xb7, 0xba, 0x52, 0x76, 0xfb, 0xbc, 0xc9,
	0x22, 0xd1, 0x64, 0x61, 0x28, 0x35, 0xf2, 0x2b, 0x7b, 0x4b, 0x3f, 0x85, 0xcd, 0x7b, 0x5c, 0x3f,
	0x89, 0x59, 0xa8, 0x58, 0x07, 0x2f, 0xee, 0x87, 0x47, 0xd2, 0xe7, 0x2a, 0x92, 0xa1, 0xe2, 0xe4,
	0x12, 0x94, 0xb5, 0xd4, 0xac, 0x5f, 0xf3, 0x76, 0xbc, 0xdd, 0x15, 0xdf, 0x1e, 0xc8, 0x2e, 0x14,
	0xf5, 0x48, 0xd5, 0x0a, 0x3b, 0xc5, 0xdd, 0xa5, 0xdb, 0xeb, 0x7b, 0xa8, 0xda, 0x5e, 0x0e, 0x03,
	0x21, 0x0c, 0x0b, 0xfd, 0x0c, 0xb6, 0xc6, 0xe1, 0x0f, 0x85, 0xd2, 0x32, 0x7e, 0xe1, 0xf3, 0x2f,
	0x86, 0x5c, 0x69, 0x42, 0xa0, 0xc4, 0x82, 0x20, 0x46, 0xf8, 0xaa, 0x8f, 0xdf, 0x46, 0x66, 0x5f,
	0x0c, 0x84, 0xae, 0x15, 0xac, 0x4c, 0x3c, 0x90, 0x75, 0xa8, 0xc8, 0xa3, 0x23, 0xc5, 0x75, 0xad,
	0x88, 0x64, 0x77, 0xa2, 0x0f, 0x50, 0xc2, 0x23, 0x1e, 0x06, 0x22, 0xec, 0xe6, 0x04, 0x25, 0x12,
	0x52, 0x34, 0x6f, 0x36, 0x5a, 0x61, 0x0c, 0xed, 0x26, 0x5c, 0xbc, 0xc7, 0xf5, 0x81, 0x71, 0x9f,
	0xf5, 0x43, 0xaa, 0x66, 0x8f, 0xa9, 0x5e, 0xa2, 0xa6, 0xf9, 0xa6, 0x4d, 0xd8, 0x18, 0x37, 0xed,
	0xb4, 0x07, 0x77, 0xe1, 0x92, 0x79, 0x20, 0xa3, 0x43, 0xd9, 0x0f, 0x78, 0xac, 0xfe, 0x9d, 0x86,
	0x4f, 0xe1, 0xf2, 0x04, 0xca, 0x29, 0xa1, 0x2a, 0x05, 0x4c, 0x33, 0x17, 0xab, 0x4b, 0x2e, 0x56,
	0xfb, 0x41, 0x10, 0x73, 0xa5, 0xf6, 0x07, 0x72, 0x18, 0x6a, 0x1f, 0x39, 0xe8, 0x1d, 0x58, 0x19,
	0x23, 0xcf, 0x8c, 0xcd, 0x3a, 0x54, 0x18, 0xde, 0xa2, 0x56, 0x25, 0xdf, 0x9d, 0xe8, 0x15, 0xd4,
	0xca, 0xaa, 0xf4, 0x21, 0x82, 0x5a, 0xe3, 0xe8, 0x1d, 0x58, 0x9f, 0xbc, 0x70, 0xfa, 0x5e, 0x83,
	0xe5, 0x1e, 0x92, 0x5b, 0x1d, 0x04, 0xb4, 0x6a, 0x2f, 0xf5, 0x32, 0x56, 0xfa, 0xb7, 0x07, 0x70,
	0xc8, 0x59, 0xc0, 0x63, 0xe3, 0x5b, 0x52, 0x83, 0x85, 0x13, 0x1e, 0x2b, 0x21, 0x43, 0x64, 0x2e,
	0xfb, 0xc9, 0x91, 0xfc, 0x1f, 0xd6, 0xa2, 0x98, 0x9f, 0xb4, 0x30, 0xef, 0x5b, 0xe8, 0xf9, 0x02,
	0x6a, 0xbd, 0x62, 0xc8, 0x18, 0xce, 0x43, 0xa6, 0x7a, 0x64, 0x03, 0x16, 0xf5, 0x48, 0xb5, 0x62,
	0x29, 0x6d, 0x1a, 0x55, 0xfd, 0x05, 0x3d, 0x52, 0xbe, 0x94, 0x9a, 0x6c, 0x03, 0x68, 0x31, 0xe0,
	0x2d, 0xa5, 0xd9, 0x20, 0xaa, 0x95, 0x76, 0xbc, 0xdd, 0xa2, 0x5f, 0x35, 0x94, 0xc7, 0x86, 0x60,
	0xbc, 0x3b, 0x60, 0x5d, 0xd1, 0xa9, 0x95, 0xad, 0x77, 0xf1, 0x40, 0xae, 0xc2, 0x52, 0xc4, 0x63,
	0x21, 0x03, 0x2b, 0xb3, 0x82, 0x90, 0x60, 0x49, 0x28, 0xf0, 0x2d, 0x58, 0xeb, 0xb0, 0x30, 0x10,
	0x01, 0xd3, 0x5c, 0x59, 0xa6, 0x05, 0x64, 0x5a, 0xcd, 0xc8, 0x86, 0x91, 0x7e, 0x5d, 0x80, 0xb5,
	0x89, 0x5c, 0x7a, 0x83, 0xbd, 0x0d, 0x28, 0x9e, 0x88, 0xd0, 0x05, 0x75, 0x79, 0xcf, 0x94, 0xbd,
	0xa9, 0xc0, 0xd1, 0xfd, 0xd0, 0x37, 0x17, 0xe4, 0x06, 0x94, 0x4e, 0xe4, 0xd0, 0xd8, 0x68, 0x18,
	0xce, 0x27, 0x15, 0x3a, 0x7a, 0x38, 0xd4, 0x98, 0xa5, 0x78, 0x4b, 0x76, 0x5c, 0x6e, 0x18, 0x63,
	0x73, 0x30, 0x77, 0x99, 0x66, 0x36, 0x27, 0xe6, 0x58, 0xbd, 0x09, 0x55, 0xf4, 0xb3, 0xf1, 0x0e,
	0xda, 0x5c, 0xf4, 0x17, 0x0d, 0xe1, 0x89, 0x18, 0xf0, 0x34, 0xf3, 0x17, 0xb2, 0xcc, 0x27, 0xe7,
	0xa1, 0x78, 0xc4, 0x79, 0x6d, 0x11, 0x53, 0xc6, 0x7c, 0x1a, 0x2e, 0x25, 0xbe, 0xe4, 0xb5, 0x2a,
	0x92, 0xf0, 0x9b, 0x3e, 0x84, 0x0b, 0x4f, 0xe4, 0x31, 0x0f, 0xd1, 0x0d, 0x47, 0x2e, 0xe6, 0xd4,
	0x64, 0xf5, 0x31, 0xb7, 0x1e, 0x30, 0x4a, 0x3a, 0x53, 0x0c, 0xcd, 0xb7, 0x57, 0x73, 0x93, 0xf2,
	0x1e, 0xac, 0x22, 0xdf, 0x7d, 0xa5, 0x86, 0x1c, 0xd1, 0x08, 0x94, 0x42, 0x36, 0xe0, 0x49, 0x4a,
	0x9b, 0x6f, 0x93, 0x87, 0x58, 0x2a, 0x2d, 0x35, 0x8c, 0xa2, 0xfe, 0x0b, 0x87, 0xb1, 0x84, 0xb4,
	0xc7, 0x48, 0xa2, 0x7f, 0x7a, 0x50, 0x4d, 0x9d, 0x67, 0x9c, 0x72, 0xc2, 0xfa, 0x43, 0x8b, 0x52,
	0xf2, 0xed, 0x81, 0xdc, 0x80, 0x55, 0xd5, 0x89, 0x45, 0xa4, 0x5b, 0xd1, 0xb0, 0xdd, 0x3a, 0xe6,
	0x16, 0x68, 0xd9, 0x5f, 0xb6, 0xd4, 0x47, 0xc3, 0xf6, 0xc7, 0xfc, 0x05, 0xb9, 0x0e, 0x2b, 0x8e,
	0x2b, 0x10, 0x8a, 0xa9, 0x81, 0xcb, 0x42, 0xc7, 0x74, 0x17, 0x69, 0xe4, 0x3d, 0x00, 0x61, 0x54,
	0x6e, 0x89, 0xf0, 0x48, 0xba, 0xe8, 0x5c, 0xce, 0x1b, 0x9e, 0x1a, 0xe4, 0x57, 0x45, 0x6a, 0xdb,
	0x07, 0xb0, 0xa2, 0x9d, 0xe7, 0xec, 0xc3, 0x32, 0x3e, 0xac, 0xe5, 0x1f, 0xe6, 0x5d, 0xeb, 0x2f,
	0xeb, 0xdc, 0x89, 0xfe, 0xee, 0x41, 0x35, 0xed, 0x7b, 0xe4, 0x26, 0x54, 0x7a, 0x58, 0x78, 0xce,
	0xef, 0x17, 0x1c, 0x4a, 0x56, 0x8d, 0xbe, 0x63, 0x38, 0xfb, 0x30, 0x30, 0x71, 0xea, 0x71, 0xd1,
	0xed, 0xa5, 0x2d, 0xdc, 0x9e, 0xc8, 0x16, 0x54, 0x95, 0xe8, 0x86, 0x4c, 0x0f, 0x63, 0x8e, 0xe6,
	0x2e, 0xfb, 0x19, 0x21, 0x4d, 0xa8, 0x72, 0x2e, 0xa1, 0x92, 0xf4, 0xa9, 0x64, 0xe9, 0x63, 0xb2,
	0xb2, 0x23, 0x45, 0xd8, 0x6a, 0x33, 0xc5, 0x5d, 0xf6, 0x2d, 0x1a, 0xc2, 0x01, 0x53, 0x9c, 0xde,
	0x82, 0x32, 0x3a, 0x60, 0x56, 0x63, 0x36, 0x01, 0x15, 0x61, 0xc0, 0x47, 0xc9, 0xc0, 0xc1, 0x03,
	0xdd, 0x87, 0x0b, 0x0f, 0x84, 0xd2, 0xf8, 0x2c, 0xed, 0xd5, 0x59, 0x57, 0xf6, 0xf2, 0x5d, 0x79,
	0xf6, 0xcc, 0xa2, 0x9f, 0x63, 0xf3, 0x43, 0x84, 0x89, 0x9e, 0x7f, 0xc6, 0xb4, 0x9e, 0x35, 0x01,
	0x32, 0x59, 0xc5, 0xbc, 0x2c, 0x69, 0x07, 0x79, 0x1a, 0x65, 0x37, 0xcd, 0xff, 0x3b, 0x81, 0x3f,
	0x7b, 0xae, 0xbc, 0x0e, 0x98, 0x12, 0x9d, 0x33, 0x17, 0x6b, 0x52, 0x82, 0x85, 0x37, 0x94, 0x60,
	0x71, 0xaa, 0x04, 0x0d, 0x4b, 0x27, 0xe6, 0x4c, 0xcb, 0xb8, 0x85, 0x43, 0xa9, 0x84, 0xcf, 0x97,
	0x1c, 0xcd, 0x0c, 0xae, 0x3c, 0x0b, 0x76, 0xa6, 0xb2, 0x45, 0x71, 0x34, 0xd3, 0x9c, 0xe8, 0x27,
	0x40, 0xf2, 0x31, 0xcd, 0x26, 0x67, 0x7e, 0x04, 0xd9, 0x03, 0x79, 0x07, 0x2a, 0xa8, 0x71, 0x92,
	0xda, 0x63, 0x15, 0x98, 0xda, 0xec, 0x3b, 0x26, 0xfa, 0x15, 0x5c, 0x99, 0x8a, 0xb5, 0xc3, 0x3f,
	0x8b, 0x5b, 0x52, 0x1d, 0x0a, 0x79, 0x1d, 0x92, 0xe9, 0x5d, 0x3c, 0x6d, 0x7a, 0xdf, 0xfe, 0x69,
	0x11, 0x2a, 0x4f, 0x79, 0x7b, 0x3f, 0x12, 0x24, 0x82, 0xd5, 0xf1, 0xc5, 0x84, 0xec, 0xb8, 0x87,
	0x73, 0xf7, 0x95, 0xfa, 0x9c, 0xba, 0xa5, 0x37, 0xbe, 0xfd, 0xf5, 0xaf, 0x1f, 0x0b, 0x0d, 0xba,
	0xd1, 0x3c, 0xb9, 0xd5, 0x7c, 0xce, 0xdb, 0x66, 0x89, 0xec, 0x72, 0xad, 0x33, 0xb6, 0xf7, 0xbd,
	0xb7, 0xc9, 0x33, 0x58, 0x4c, 0xb6, 0x26, 0x52, 0xcf, 0x64, 0x4d, 0xae, 0x51, 0xf5, 0x64, 0x10,
	0xa5, 0x17, 0xb4, 0x81, 0xf8, 0x35, 0x7a, 0x71, 0x1c, 0x1f, 0xe7, 0xb8, 0x41, 0xee, 0xc3, 0xca,
	0xd8, 0xb6, 0x43, 0x36, 0x73, 0xa6, 0x4c, 0x6e, 0x52, 0xf5, 0xad, 0xd9, 0x97, 0x36, 0x0c, 0x74,
	0x07, 0x65, 0xd5, 0xe9, 0xe5, 0x9c, 0x2c, 0x2d, 0x23, 0xbb, 0x70, 0x28, 0x23, 0xcd, 0x7a, 0x2e,
	0xb7, 0xac, 0x90, 0x1c, 0xe2, 0xf4, 0x72, 0x53, 0xdf, 0x9e, 0x73, 0xeb, 0x04, 0x5e, 0x43, 0x81,
	0x9b, 0x74, 0x3d, 0x27, 0xd0, 0x4a, 0xc3, 0xe8, 0x1a, 0x89, 0xdf, 0x7b, 0xb8, 0x38, 0x4d, 0xaf,
	0xaf, 0xe4, 0x7a, 0x86, 0x3d, 0x77, 0xb9, 0xad, 0xd3, 0x99, 0x81, 0x1d, 0x5b, 0xe1, 0xe9, 0x75,
	0xd4, 0x62, 0x9b, 0xd6, 0xc6, 0x5d, 0x1c, 0x59, 0x50, 0x3d, 0x42, 0xcb, 0xbf, 0xb3, 0x7a, 0x4c,
	0x2f, 0xea, 0x79, 0x3d, 0xe6, 0xae, 0xf1, 0x67, 0xd2, 0x83, 0xa2, 0x1e, 0x5b, 0xf4, 0xca, 0x44,
	0x2a, 0x8d, 0x7a, 0x16, 0xcb, 0xa8, 0xd1, 0x01, 0xc8, 0xea, 0x93, 0x24, 0xa3, 0x6b, 0xaa, 0x0d,
	0xd7, 0x37, 0x66, 0xdc, 0xbc, 0x21, 0xca, 0x7d, 0xa1, 0xb4, 0x2d, 0x53, 0x23, 0xe4, 0x39, 0xac,
	0x4d, 0x54, 0x2a, 0xd9, 0xce, 0x27, 0xce, 0x54, 0xb7, 0xae, 0x37, 0xe6, 0x5d, 0x3b, 0x99, 0xff,
	0x43, 0x99, 0x57, 0x69, 0x7d, 0xc2, 0x34, 0xc3, 0x9b, 0x4b, 0xaf, 0x6f, 0x3c, 0xf7, 0x07, 0x30,
	0xd1, 0xa3, 0x09, 0x9d, 0xc0, 0x9f, 0xd1, 0xc0, 0xcf, 0xe4, 0xe2, 0x59, 0x09, 0x97, 0xe8, 0x61,
	0x03, 0x7d, 0x50, 0xfb, 0xe5, 0x55, 0xc3, 0x7b, 0xf9, 0xaa, 0xe1, 0xfd, 0xf1, 0xaa, 0xe1, 0xfd,
	0xf0, 0xba, 0x71, 0xee, 0xe5, 0xeb, 0xc6, 0xb9, 0xdf, 0x5e, 0x37, 0xce, 0xb5, 0x2b, 0xf8, 0x43,
	0xf8, 0xee, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x8f, 0x76, 0xfe, 0x95, 0x75, 0x0e, 0x00, 0x00,
}
