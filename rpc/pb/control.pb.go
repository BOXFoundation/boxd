// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: control.proto

package rpcpb

import (
	context "context"
	fmt "fmt"
	pb "github.com/BOXFoundation/boxd/core/pb"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type DelegatesReq_Type int32

const (
	DelegatesReq_BOOKKEEPERS DelegatesReq_Type = 0
	DelegatesReq_DELEGATES   DelegatesReq_Type = 1
	DelegatesReq_CANDIDATES  DelegatesReq_Type = 2
)

var DelegatesReq_Type_name = map[int32]string{
	0: "BOOKKEEPERS",
	1: "DELEGATES",
	2: "CANDIDATES",
}

var DelegatesReq_Type_value = map[string]int32{
	"BOOKKEEPERS": 0,
	"DELEGATES":   1,
	"CANDIDATES":  2,
}

func (x DelegatesReq_Type) String() string {
	return proto.EnumName(DelegatesReq_Type_name, int32(x))
}

func (DelegatesReq_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{30, 0}
}

// The request message containing debug level.
type DebugLevelRequest struct {
	Level string `protobuf:"bytes,1,opt,name=level,proto3" json:"level,omitempty"`
}

func (m *DebugLevelRequest) Reset()         { *m = DebugLevelRequest{} }
func (m *DebugLevelRequest) String() string { return proto.CompactTextString(m) }
func (*DebugLevelRequest) ProtoMessage()    {}
func (*DebugLevelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{0}
}
func (m *DebugLevelRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DebugLevelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DebugLevelRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DebugLevelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DebugLevelRequest.Merge(m, src)
}
func (m *DebugLevelRequest) XXX_Size() int {
	return m.Size()
}
func (m *DebugLevelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DebugLevelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DebugLevelRequest proto.InternalMessageInfo

func (m *DebugLevelRequest) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

type UpdateNetworkIDRequest struct {
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *UpdateNetworkIDRequest) Reset()         { *m = UpdateNetworkIDRequest{} }
func (m *UpdateNetworkIDRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateNetworkIDRequest) ProtoMessage()    {}
func (*UpdateNetworkIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{1}
}
func (m *UpdateNetworkIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateNetworkIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateNetworkIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateNetworkIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateNetworkIDRequest.Merge(m, src)
}
func (m *UpdateNetworkIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateNetworkIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateNetworkIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateNetworkIDRequest proto.InternalMessageInfo

func (m *UpdateNetworkIDRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetNetworkIDRequest struct {
}

func (m *GetNetworkIDRequest) Reset()         { *m = GetNetworkIDRequest{} }
func (m *GetNetworkIDRequest) String() string { return proto.CompactTextString(m) }
func (*GetNetworkIDRequest) ProtoMessage()    {}
func (*GetNetworkIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{2}
}
func (m *GetNetworkIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNetworkIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNetworkIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetNetworkIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNetworkIDRequest.Merge(m, src)
}
func (m *GetNetworkIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetNetworkIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNetworkIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetNetworkIDRequest proto.InternalMessageInfo

type GetNetworkIDResponse struct {
	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Id      uint32 `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	Literal string `protobuf:"bytes,4,opt,name=literal,proto3" json:"literal,omitempty"`
}

func (m *GetNetworkIDResponse) Reset()         { *m = GetNetworkIDResponse{} }
func (m *GetNetworkIDResponse) String() string { return proto.CompactTextString(m) }
func (*GetNetworkIDResponse) ProtoMessage()    {}
func (*GetNetworkIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{3}
}
func (m *GetNetworkIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNetworkIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNetworkIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetNetworkIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNetworkIDResponse.Merge(m, src)
}
func (m *GetNetworkIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetNetworkIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNetworkIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetNetworkIDResponse proto.InternalMessageInfo

func (m *GetNetworkIDResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetNetworkIDResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *GetNetworkIDResponse) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GetNetworkIDResponse) GetLiteral() string {
	if m != nil {
		return m.Literal
	}
	return ""
}

type AddNodeRequest struct {
	Node string `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
}

func (m *AddNodeRequest) Reset()         { *m = AddNodeRequest{} }
func (m *AddNodeRequest) String() string { return proto.CompactTextString(m) }
func (*AddNodeRequest) ProtoMessage()    {}
func (*AddNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{4}
}
func (m *AddNodeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddNodeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddNodeRequest.Merge(m, src)
}
func (m *AddNodeRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddNodeRequest proto.InternalMessageInfo

func (m *AddNodeRequest) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

type GetCurrentBlockHeightRequest struct {
}

func (m *GetCurrentBlockHeightRequest) Reset()         { *m = GetCurrentBlockHeightRequest{} }
func (m *GetCurrentBlockHeightRequest) String() string { return proto.CompactTextString(m) }
func (*GetCurrentBlockHeightRequest) ProtoMessage()    {}
func (*GetCurrentBlockHeightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{5}
}
func (m *GetCurrentBlockHeightRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCurrentBlockHeightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCurrentBlockHeightRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCurrentBlockHeightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCurrentBlockHeightRequest.Merge(m, src)
}
func (m *GetCurrentBlockHeightRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetCurrentBlockHeightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCurrentBlockHeightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCurrentBlockHeightRequest proto.InternalMessageInfo

type GetCurrentBlockHeightResponse struct {
	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Height  uint32 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *GetCurrentBlockHeightResponse) Reset()         { *m = GetCurrentBlockHeightResponse{} }
func (m *GetCurrentBlockHeightResponse) String() string { return proto.CompactTextString(m) }
func (*GetCurrentBlockHeightResponse) ProtoMessage()    {}
func (*GetCurrentBlockHeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{6}
}
func (m *GetCurrentBlockHeightResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCurrentBlockHeightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCurrentBlockHeightResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCurrentBlockHeightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCurrentBlockHeightResponse.Merge(m, src)
}
func (m *GetCurrentBlockHeightResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetCurrentBlockHeightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCurrentBlockHeightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCurrentBlockHeightResponse proto.InternalMessageInfo

func (m *GetCurrentBlockHeightResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetCurrentBlockHeightResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *GetCurrentBlockHeightResponse) GetHeight() uint32 {
	if m != nil {
		return m.Height
	}
	return 0
}

type GetCurrentBlockHashRequest struct {
}

func (m *GetCurrentBlockHashRequest) Reset()         { *m = GetCurrentBlockHashRequest{} }
func (m *GetCurrentBlockHashRequest) String() string { return proto.CompactTextString(m) }
func (*GetCurrentBlockHashRequest) ProtoMessage()    {}
func (*GetCurrentBlockHashRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{7}
}
func (m *GetCurrentBlockHashRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCurrentBlockHashRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCurrentBlockHashRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCurrentBlockHashRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCurrentBlockHashRequest.Merge(m, src)
}
func (m *GetCurrentBlockHashRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetCurrentBlockHashRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCurrentBlockHashRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCurrentBlockHashRequest proto.InternalMessageInfo

type GetCurrentBlockHashResponse struct {
	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Hash    string `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *GetCurrentBlockHashResponse) Reset()         { *m = GetCurrentBlockHashResponse{} }
func (m *GetCurrentBlockHashResponse) String() string { return proto.CompactTextString(m) }
func (*GetCurrentBlockHashResponse) ProtoMessage()    {}
func (*GetCurrentBlockHashResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{8}
}
func (m *GetCurrentBlockHashResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCurrentBlockHashResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCurrentBlockHashResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCurrentBlockHashResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCurrentBlockHashResponse.Merge(m, src)
}
func (m *GetCurrentBlockHashResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetCurrentBlockHashResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCurrentBlockHashResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCurrentBlockHashResponse proto.InternalMessageInfo

func (m *GetCurrentBlockHashResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetCurrentBlockHashResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *GetCurrentBlockHashResponse) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type GetBlockHashRequest struct {
	Height uint32 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *GetBlockHashRequest) Reset()         { *m = GetBlockHashRequest{} }
func (m *GetBlockHashRequest) String() string { return proto.CompactTextString(m) }
func (*GetBlockHashRequest) ProtoMessage()    {}
func (*GetBlockHashRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{9}
}
func (m *GetBlockHashRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBlockHashRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBlockHashRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBlockHashRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBlockHashRequest.Merge(m, src)
}
func (m *GetBlockHashRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetBlockHashRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBlockHashRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetBlockHashRequest proto.InternalMessageInfo

func (m *GetBlockHashRequest) GetHeight() uint32 {
	if m != nil {
		return m.Height
	}
	return 0
}

type GetBlockHashResponse struct {
	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Hash    string `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *GetBlockHashResponse) Reset()         { *m = GetBlockHashResponse{} }
func (m *GetBlockHashResponse) String() string { return proto.CompactTextString(m) }
func (*GetBlockHashResponse) ProtoMessage()    {}
func (*GetBlockHashResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{10}
}
func (m *GetBlockHashResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBlockHashResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBlockHashResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBlockHashResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBlockHashResponse.Merge(m, src)
}
func (m *GetBlockHashResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetBlockHashResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBlockHashResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetBlockHashResponse proto.InternalMessageInfo

func (m *GetBlockHashResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetBlockHashResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *GetBlockHashResponse) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type GetBlockRequest struct {
	BlockHash string `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
}

func (m *GetBlockRequest) Reset()         { *m = GetBlockRequest{} }
func (m *GetBlockRequest) String() string { return proto.CompactTextString(m) }
func (*GetBlockRequest) ProtoMessage()    {}
func (*GetBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{11}
}
func (m *GetBlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBlockRequest.Merge(m, src)
}
func (m *GetBlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetBlockRequest proto.InternalMessageInfo

func (m *GetBlockRequest) GetBlockHash() string {
	if m != nil {
		return m.BlockHash
	}
	return ""
}

type GetBlockHeaderResponse struct {
	Code    int32           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Header  *pb.BlockHeader `protobuf:"bytes,3,opt,name=header,proto3" json:"header,omitempty"`
}

func (m *GetBlockHeaderResponse) Reset()         { *m = GetBlockHeaderResponse{} }
func (m *GetBlockHeaderResponse) String() string { return proto.CompactTextString(m) }
func (*GetBlockHeaderResponse) ProtoMessage()    {}
func (*GetBlockHeaderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{12}
}
func (m *GetBlockHeaderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBlockHeaderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBlockHeaderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBlockHeaderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBlockHeaderResponse.Merge(m, src)
}
func (m *GetBlockHeaderResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetBlockHeaderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBlockHeaderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetBlockHeaderResponse proto.InternalMessageInfo

func (m *GetBlockHeaderResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetBlockHeaderResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *GetBlockHeaderResponse) GetHeader() *pb.BlockHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type GetBlockResponse struct {
	Code    int32     `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Block   *pb.Block `protobuf:"bytes,3,opt,name=block,proto3" json:"block,omitempty"`
}

func (m *GetBlockResponse) Reset()         { *m = GetBlockResponse{} }
func (m *GetBlockResponse) String() string { return proto.CompactTextString(m) }
func (*GetBlockResponse) ProtoMessage()    {}
func (*GetBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{13}
}
func (m *GetBlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBlockResponse.Merge(m, src)
}
func (m *GetBlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetBlockResponse proto.InternalMessageInfo

func (m *GetBlockResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetBlockResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *GetBlockResponse) GetBlock() *pb.Block {
	if m != nil {
		return m.Block
	}
	return nil
}

type Node struct {
	Id    string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Addrs []string `protobuf:"bytes,2,rep,name=addrs,proto3" json:"addrs,omitempty"`
	Ttl   string   `protobuf:"bytes,3,opt,name=ttl,proto3" json:"ttl,omitempty"`
}

func (m *Node) Reset()         { *m = Node{} }
func (m *Node) String() string { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()    {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{14}
}
func (m *Node) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Node.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(m, src)
}
func (m *Node) XXX_Size() int {
	return m.Size()
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

func (m *Node) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Node) GetAddrs() []string {
	if m != nil {
		return m.Addrs
	}
	return nil
}

func (m *Node) GetTtl() string {
	if m != nil {
		return m.Ttl
	}
	return ""
}

type GetNodeInfoRequest struct {
}

func (m *GetNodeInfoRequest) Reset()         { *m = GetNodeInfoRequest{} }
func (m *GetNodeInfoRequest) String() string { return proto.CompactTextString(m) }
func (*GetNodeInfoRequest) ProtoMessage()    {}
func (*GetNodeInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{15}
}
func (m *GetNodeInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNodeInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNodeInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetNodeInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNodeInfoRequest.Merge(m, src)
}
func (m *GetNodeInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetNodeInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNodeInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetNodeInfoRequest proto.InternalMessageInfo

type GetNodeInfoResponse struct {
	Code    int32   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string  `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Nodes   []*Node `protobuf:"bytes,3,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (m *GetNodeInfoResponse) Reset()         { *m = GetNodeInfoResponse{} }
func (m *GetNodeInfoResponse) String() string { return proto.CompactTextString(m) }
func (*GetNodeInfoResponse) ProtoMessage()    {}
func (*GetNodeInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{16}
}
func (m *GetNodeInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNodeInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNodeInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetNodeInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNodeInfoResponse.Merge(m, src)
}
func (m *GetNodeInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetNodeInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNodeInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetNodeInfoResponse proto.InternalMessageInfo

func (m *GetNodeInfoResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetNodeInfoResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *GetNodeInfoResponse) GetNodes() []*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type GetBlockByHeightReq struct {
	Height uint32 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *GetBlockByHeightReq) Reset()         { *m = GetBlockByHeightReq{} }
func (m *GetBlockByHeightReq) String() string { return proto.CompactTextString(m) }
func (*GetBlockByHeightReq) ProtoMessage()    {}
func (*GetBlockByHeightReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{17}
}
func (m *GetBlockByHeightReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBlockByHeightReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBlockByHeightReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBlockByHeightReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBlockByHeightReq.Merge(m, src)
}
func (m *GetBlockByHeightReq) XXX_Size() int {
	return m.Size()
}
func (m *GetBlockByHeightReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBlockByHeightReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetBlockByHeightReq proto.InternalMessageInfo

func (m *GetBlockByHeightReq) GetHeight() uint32 {
	if m != nil {
		return m.Height
	}
	return 0
}

type GetBlockTransactionCountByHashReq struct {
	BlockHash string `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
}

func (m *GetBlockTransactionCountByHashReq) Reset()         { *m = GetBlockTransactionCountByHashReq{} }
func (m *GetBlockTransactionCountByHashReq) String() string { return proto.CompactTextString(m) }
func (*GetBlockTransactionCountByHashReq) ProtoMessage()    {}
func (*GetBlockTransactionCountByHashReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{18}
}
func (m *GetBlockTransactionCountByHashReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBlockTransactionCountByHashReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBlockTransactionCountByHashReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBlockTransactionCountByHashReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBlockTransactionCountByHashReq.Merge(m, src)
}
func (m *GetBlockTransactionCountByHashReq) XXX_Size() int {
	return m.Size()
}
func (m *GetBlockTransactionCountByHashReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBlockTransactionCountByHashReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetBlockTransactionCountByHashReq proto.InternalMessageInfo

func (m *GetBlockTransactionCountByHashReq) GetBlockHash() string {
	if m != nil {
		return m.BlockHash
	}
	return ""
}

type GetBlockTransactionCountByHeightReq struct {
	Height uint32 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *GetBlockTransactionCountByHeightReq) Reset()         { *m = GetBlockTransactionCountByHeightReq{} }
func (m *GetBlockTransactionCountByHeightReq) String() string { return proto.CompactTextString(m) }
func (*GetBlockTransactionCountByHeightReq) ProtoMessage()    {}
func (*GetBlockTransactionCountByHeightReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{19}
}
func (m *GetBlockTransactionCountByHeightReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBlockTransactionCountByHeightReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBlockTransactionCountByHeightReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBlockTransactionCountByHeightReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBlockTransactionCountByHeightReq.Merge(m, src)
}
func (m *GetBlockTransactionCountByHeightReq) XXX_Size() int {
	return m.Size()
}
func (m *GetBlockTransactionCountByHeightReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBlockTransactionCountByHeightReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetBlockTransactionCountByHeightReq proto.InternalMessageInfo

func (m *GetBlockTransactionCountByHeightReq) GetHeight() uint32 {
	if m != nil {
		return m.Height
	}
	return 0
}

type GetBlockTxCountResp struct {
	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Count   uint32 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *GetBlockTxCountResp) Reset()         { *m = GetBlockTxCountResp{} }
func (m *GetBlockTxCountResp) String() string { return proto.CompactTextString(m) }
func (*GetBlockTxCountResp) ProtoMessage()    {}
func (*GetBlockTxCountResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{20}
}
func (m *GetBlockTxCountResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBlockTxCountResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBlockTxCountResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBlockTxCountResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBlockTxCountResp.Merge(m, src)
}
func (m *GetBlockTxCountResp) XXX_Size() int {
	return m.Size()
}
func (m *GetBlockTxCountResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBlockTxCountResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetBlockTxCountResp proto.InternalMessageInfo

func (m *GetBlockTxCountResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetBlockTxCountResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *GetBlockTxCountResp) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type GetTransactionByBlockHashAndIndexReq struct {
	BlockHash string `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	Index     uint32 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *GetTransactionByBlockHashAndIndexReq) Reset()         { *m = GetTransactionByBlockHashAndIndexReq{} }
func (m *GetTransactionByBlockHashAndIndexReq) String() string { return proto.CompactTextString(m) }
func (*GetTransactionByBlockHashAndIndexReq) ProtoMessage()    {}
func (*GetTransactionByBlockHashAndIndexReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{21}
}
func (m *GetTransactionByBlockHashAndIndexReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTransactionByBlockHashAndIndexReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTransactionByBlockHashAndIndexReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTransactionByBlockHashAndIndexReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTransactionByBlockHashAndIndexReq.Merge(m, src)
}
func (m *GetTransactionByBlockHashAndIndexReq) XXX_Size() int {
	return m.Size()
}
func (m *GetTransactionByBlockHashAndIndexReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTransactionByBlockHashAndIndexReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetTransactionByBlockHashAndIndexReq proto.InternalMessageInfo

func (m *GetTransactionByBlockHashAndIndexReq) GetBlockHash() string {
	if m != nil {
		return m.BlockHash
	}
	return ""
}

func (m *GetTransactionByBlockHashAndIndexReq) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

type GetTransactionByBlockHeightAndIndexReq struct {
	Height uint32 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Index  uint32 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *GetTransactionByBlockHeightAndIndexReq) Reset() {
	*m = GetTransactionByBlockHeightAndIndexReq{}
}
func (m *GetTransactionByBlockHeightAndIndexReq) String() string { return proto.CompactTextString(m) }
func (*GetTransactionByBlockHeightAndIndexReq) ProtoMessage()    {}
func (*GetTransactionByBlockHeightAndIndexReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{22}
}
func (m *GetTransactionByBlockHeightAndIndexReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTransactionByBlockHeightAndIndexReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTransactionByBlockHeightAndIndexReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTransactionByBlockHeightAndIndexReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTransactionByBlockHeightAndIndexReq.Merge(m, src)
}
func (m *GetTransactionByBlockHeightAndIndexReq) XXX_Size() int {
	return m.Size()
}
func (m *GetTransactionByBlockHeightAndIndexReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTransactionByBlockHeightAndIndexReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetTransactionByBlockHeightAndIndexReq proto.InternalMessageInfo

func (m *GetTransactionByBlockHeightAndIndexReq) GetHeight() uint32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *GetTransactionByBlockHeightAndIndexReq) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

type GetTxResp struct {
	Code    int32           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Tx      *pb.Transaction `protobuf:"bytes,3,opt,name=Tx,proto3" json:"Tx,omitempty"`
}

func (m *GetTxResp) Reset()         { *m = GetTxResp{} }
func (m *GetTxResp) String() string { return proto.CompactTextString(m) }
func (*GetTxResp) ProtoMessage()    {}
func (*GetTxResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{23}
}
func (m *GetTxResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTxResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTxResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTxResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTxResp.Merge(m, src)
}
func (m *GetTxResp) XXX_Size() int {
	return m.Size()
}
func (m *GetTxResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTxResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetTxResp proto.InternalMessageInfo

func (m *GetTxResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetTxResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *GetTxResp) GetTx() *pb.Transaction {
	if m != nil {
		return m.Tx
	}
	return nil
}

type Delegate struct {
	Addr             string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Votes            uint64 `protobuf:"varint,2,opt,name=votes,proto3" json:"votes,omitempty"`
	PledgeAmount     uint64 `protobuf:"varint,3,opt,name=pledge_amount,json=pledgeAmount,proto3" json:"pledge_amount,omitempty"`
	Score            uint64 `protobuf:"varint,4,opt,name=score,proto3" json:"score,omitempty"`
	ContinualPeriods uint32 `protobuf:"varint,5,opt,name=continual_periods,json=continualPeriods,proto3" json:"continual_periods,omitempty"`
}

func (m *Delegate) Reset()         { *m = Delegate{} }
func (m *Delegate) String() string { return proto.CompactTextString(m) }
func (*Delegate) ProtoMessage()    {}
func (*Delegate) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{24}
}
func (m *Delegate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Delegate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Delegate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Delegate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Delegate.Merge(m, src)
}
func (m *Delegate) XXX_Size() int {
	return m.Size()
}
func (m *Delegate) XXX_DiscardUnknown() {
	xxx_messageInfo_Delegate.DiscardUnknown(m)
}

var xxx_messageInfo_Delegate proto.InternalMessageInfo

func (m *Delegate) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *Delegate) GetVotes() uint64 {
	if m != nil {
		return m.Votes
	}
	return 0
}

func (m *Delegate) GetPledgeAmount() uint64 {
	if m != nil {
		return m.PledgeAmount
	}
	return 0
}

func (m *Delegate) GetScore() uint64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *Delegate) GetContinualPeriods() uint32 {
	if m != nil {
		return m.ContinualPeriods
	}
	return 0
}

type PeerIDReq struct {
}

func (m *PeerIDReq) Reset()         { *m = PeerIDReq{} }
func (m *PeerIDReq) String() string { return proto.CompactTextString(m) }
func (*PeerIDReq) ProtoMessage()    {}
func (*PeerIDReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{25}
}
func (m *PeerIDReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PeerIDReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PeerIDReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PeerIDReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerIDReq.Merge(m, src)
}
func (m *PeerIDReq) XXX_Size() int {
	return m.Size()
}
func (m *PeerIDReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerIDReq.DiscardUnknown(m)
}

var xxx_messageInfo_PeerIDReq proto.InternalMessageInfo

type PeerIDResp struct {
	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Peerid  string `protobuf:"bytes,3,opt,name=peerid,proto3" json:"peerid,omitempty"`
}

func (m *PeerIDResp) Reset()         { *m = PeerIDResp{} }
func (m *PeerIDResp) String() string { return proto.CompactTextString(m) }
func (*PeerIDResp) ProtoMessage()    {}
func (*PeerIDResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{26}
}
func (m *PeerIDResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PeerIDResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PeerIDResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PeerIDResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerIDResp.Merge(m, src)
}
func (m *PeerIDResp) XXX_Size() int {
	return m.Size()
}
func (m *PeerIDResp) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerIDResp.DiscardUnknown(m)
}

var xxx_messageInfo_PeerIDResp proto.InternalMessageInfo

func (m *PeerIDResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *PeerIDResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *PeerIDResp) GetPeerid() string {
	if m != nil {
		return m.Peerid
	}
	return ""
}

type MinersReq struct {
}

func (m *MinersReq) Reset()         { *m = MinersReq{} }
func (m *MinersReq) String() string { return proto.CompactTextString(m) }
func (*MinersReq) ProtoMessage()    {}
func (*MinersReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{27}
}
func (m *MinersReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MinersReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MinersReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MinersReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MinersReq.Merge(m, src)
}
func (m *MinersReq) XXX_Size() int {
	return m.Size()
}
func (m *MinersReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MinersReq.DiscardUnknown(m)
}

var xxx_messageInfo_MinersReq proto.InternalMessageInfo

type MinersResp struct {
	Code    int32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string         `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Miners  []*MinerDetail `protobuf:"bytes,3,rep,name=miners,proto3" json:"miners,omitempty"`
}

func (m *MinersResp) Reset()         { *m = MinersResp{} }
func (m *MinersResp) String() string { return proto.CompactTextString(m) }
func (*MinersResp) ProtoMessage()    {}
func (*MinersResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{28}
}
func (m *MinersResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MinersResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MinersResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MinersResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MinersResp.Merge(m, src)
}
func (m *MinersResp) XXX_Size() int {
	return m.Size()
}
func (m *MinersResp) XXX_DiscardUnknown() {
	xxx_messageInfo_MinersResp.DiscardUnknown(m)
}

var xxx_messageInfo_MinersResp proto.InternalMessageInfo

func (m *MinersResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *MinersResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *MinersResp) GetMiners() []*MinerDetail {
	if m != nil {
		return m.Miners
	}
	return nil
}

type MinerDetail struct {
	Id      string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Address string   `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Iplist  []string `protobuf:"bytes,3,rep,name=iplist,proto3" json:"iplist,omitempty"`
}

func (m *MinerDetail) Reset()         { *m = MinerDetail{} }
func (m *MinerDetail) String() string { return proto.CompactTextString(m) }
func (*MinerDetail) ProtoMessage()    {}
func (*MinerDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{29}
}
func (m *MinerDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MinerDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MinerDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MinerDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MinerDetail.Merge(m, src)
}
func (m *MinerDetail) XXX_Size() int {
	return m.Size()
}
func (m *MinerDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_MinerDetail.DiscardUnknown(m)
}

var xxx_messageInfo_MinerDetail proto.InternalMessageInfo

func (m *MinerDetail) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MinerDetail) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *MinerDetail) GetIplist() []string {
	if m != nil {
		return m.Iplist
	}
	return nil
}

type DelegatesReq struct {
	Type DelegatesReq_Type `protobuf:"varint,1,opt,name=type,proto3,enum=rpcpb.DelegatesReq_Type" json:"type,omitempty"`
}

func (m *DelegatesReq) Reset()         { *m = DelegatesReq{} }
func (m *DelegatesReq) String() string { return proto.CompactTextString(m) }
func (*DelegatesReq) ProtoMessage()    {}
func (*DelegatesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{30}
}
func (m *DelegatesReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegatesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegatesReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegatesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegatesReq.Merge(m, src)
}
func (m *DelegatesReq) XXX_Size() int {
	return m.Size()
}
func (m *DelegatesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegatesReq.DiscardUnknown(m)
}

var xxx_messageInfo_DelegatesReq proto.InternalMessageInfo

func (m *DelegatesReq) GetType() DelegatesReq_Type {
	if m != nil {
		return m.Type
	}
	return DelegatesReq_BOOKKEEPERS
}

type DelegatesResp struct {
	Code      int32       `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message   string      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Delegates []*Delegate `protobuf:"bytes,3,rep,name=delegates,proto3" json:"delegates,omitempty"`
}

func (m *DelegatesResp) Reset()         { *m = DelegatesResp{} }
func (m *DelegatesResp) String() string { return proto.CompactTextString(m) }
func (*DelegatesResp) ProtoMessage()    {}
func (*DelegatesResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{31}
}
func (m *DelegatesResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegatesResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegatesResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegatesResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegatesResp.Merge(m, src)
}
func (m *DelegatesResp) XXX_Size() int {
	return m.Size()
}
func (m *DelegatesResp) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegatesResp.DiscardUnknown(m)
}

var xxx_messageInfo_DelegatesResp proto.InternalMessageInfo

func (m *DelegatesResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *DelegatesResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *DelegatesResp) GetDelegates() []*Delegate {
	if m != nil {
		return m.Delegates
	}
	return nil
}

type LatestConfirmedHeightReq struct {
}

func (m *LatestConfirmedHeightReq) Reset()         { *m = LatestConfirmedHeightReq{} }
func (m *LatestConfirmedHeightReq) String() string { return proto.CompactTextString(m) }
func (*LatestConfirmedHeightReq) ProtoMessage()    {}
func (*LatestConfirmedHeightReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{32}
}
func (m *LatestConfirmedHeightReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LatestConfirmedHeightReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LatestConfirmedHeightReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LatestConfirmedHeightReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LatestConfirmedHeightReq.Merge(m, src)
}
func (m *LatestConfirmedHeightReq) XXX_Size() int {
	return m.Size()
}
func (m *LatestConfirmedHeightReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LatestConfirmedHeightReq.DiscardUnknown(m)
}

var xxx_messageInfo_LatestConfirmedHeightReq proto.InternalMessageInfo

type LatestConfirmedHeightResp struct {
	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Height  uint32 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *LatestConfirmedHeightResp) Reset()         { *m = LatestConfirmedHeightResp{} }
func (m *LatestConfirmedHeightResp) String() string { return proto.CompactTextString(m) }
func (*LatestConfirmedHeightResp) ProtoMessage()    {}
func (*LatestConfirmedHeightResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{33}
}
func (m *LatestConfirmedHeightResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LatestConfirmedHeightResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LatestConfirmedHeightResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LatestConfirmedHeightResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LatestConfirmedHeightResp.Merge(m, src)
}
func (m *LatestConfirmedHeightResp) XXX_Size() int {
	return m.Size()
}
func (m *LatestConfirmedHeightResp) XXX_DiscardUnknown() {
	xxx_messageInfo_LatestConfirmedHeightResp.DiscardUnknown(m)
}

var xxx_messageInfo_LatestConfirmedHeightResp proto.InternalMessageInfo

func (m *LatestConfirmedHeightResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *LatestConfirmedHeightResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *LatestConfirmedHeightResp) GetHeight() uint32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func init() {
	proto.RegisterEnum("rpcpb.DelegatesReq_Type", DelegatesReq_Type_name, DelegatesReq_Type_value)
	proto.RegisterType((*DebugLevelRequest)(nil), "rpcpb.DebugLevelRequest")
	proto.RegisterType((*UpdateNetworkIDRequest)(nil), "rpcpb.UpdateNetworkIDRequest")
	proto.RegisterType((*GetNetworkIDRequest)(nil), "rpcpb.GetNetworkIDRequest")
	proto.RegisterType((*GetNetworkIDResponse)(nil), "rpcpb.GetNetworkIDResponse")
	proto.RegisterType((*AddNodeRequest)(nil), "rpcpb.AddNodeRequest")
	proto.RegisterType((*GetCurrentBlockHeightRequest)(nil), "rpcpb.GetCurrentBlockHeightRequest")
	proto.RegisterType((*GetCurrentBlockHeightResponse)(nil), "rpcpb.GetCurrentBlockHeightResponse")
	proto.RegisterType((*GetCurrentBlockHashRequest)(nil), "rpcpb.GetCurrentBlockHashRequest")
	proto.RegisterType((*GetCurrentBlockHashResponse)(nil), "rpcpb.GetCurrentBlockHashResponse")
	proto.RegisterType((*GetBlockHashRequest)(nil), "rpcpb.GetBlockHashRequest")
	proto.RegisterType((*GetBlockHashResponse)(nil), "rpcpb.GetBlockHashResponse")
	proto.RegisterType((*GetBlockRequest)(nil), "rpcpb.GetBlockRequest")
	proto.RegisterType((*GetBlockHeaderResponse)(nil), "rpcpb.GetBlockHeaderResponse")
	proto.RegisterType((*GetBlockResponse)(nil), "rpcpb.GetBlockResponse")
	proto.RegisterType((*Node)(nil), "rpcpb.Node")
	proto.RegisterType((*GetNodeInfoRequest)(nil), "rpcpb.GetNodeInfoRequest")
	proto.RegisterType((*GetNodeInfoResponse)(nil), "rpcpb.GetNodeInfoResponse")
	proto.RegisterType((*GetBlockByHeightReq)(nil), "rpcpb.GetBlockByHeightReq")
	proto.RegisterType((*GetBlockTransactionCountByHashReq)(nil), "rpcpb.GetBlockTransactionCountByHashReq")
	proto.RegisterType((*GetBlockTransactionCountByHeightReq)(nil), "rpcpb.GetBlockTransactionCountByHeightReq")
	proto.RegisterType((*GetBlockTxCountResp)(nil), "rpcpb.GetBlockTxCountResp")
	proto.RegisterType((*GetTransactionByBlockHashAndIndexReq)(nil), "rpcpb.GetTransactionByBlockHashAndIndexReq")
	proto.RegisterType((*GetTransactionByBlockHeightAndIndexReq)(nil), "rpcpb.GetTransactionByBlockHeightAndIndexReq")
	proto.RegisterType((*GetTxResp)(nil), "rpcpb.GetTxResp")
	proto.RegisterType((*Delegate)(nil), "rpcpb.Delegate")
	proto.RegisterType((*PeerIDReq)(nil), "rpcpb.PeerIDReq")
	proto.RegisterType((*PeerIDResp)(nil), "rpcpb.PeerIDResp")
	proto.RegisterType((*MinersReq)(nil), "rpcpb.MinersReq")
	proto.RegisterType((*MinersResp)(nil), "rpcpb.MinersResp")
	proto.RegisterType((*MinerDetail)(nil), "rpcpb.MinerDetail")
	proto.RegisterType((*DelegatesReq)(nil), "rpcpb.DelegatesReq")
	proto.RegisterType((*DelegatesResp)(nil), "rpcpb.DelegatesResp")
	proto.RegisterType((*LatestConfirmedHeightReq)(nil), "rpcpb.LatestConfirmedHeightReq")
	proto.RegisterType((*LatestConfirmedHeightResp)(nil), "rpcpb.LatestConfirmedHeightResp")
}

func init() { proto.RegisterFile("control.proto", fileDescriptor_0c5120591600887d) }

var fileDescriptor_0c5120591600887d = []byte{
	// 1526 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0x51, 0x6f, 0xdb, 0xb6,
	0x16, 0x8e, 0x1c, 0x3b, 0xad, 0x8f, 0xe3, 0xc4, 0x61, 0x9c, 0xd4, 0x55, 0x12, 0xd7, 0x61, 0x8a,
	0x22, 0x37, 0xbd, 0xb5, 0x6f, 0x73, 0x81, 0xfb, 0x50, 0xe0, 0x0e, 0x88, 0xe3, 0x2c, 0x0b, 0xda,
	0x35, 0x9d, 0xea, 0x0d, 0x1d, 0x86, 0x2d, 0x90, 0x2d, 0xc6, 0xd6, 0x2a, 0x8b, 0x9a, 0x44, 0x77,
	0xce, 0x6b, 0xb1, 0x87, 0x3d, 0x0c, 0xc3, 0x80, 0xed, 0x71, 0x3f, 0x68, 0x8f, 0x05, 0xf6, 0xb2,
	0xbd, 0x0d, 0xed, 0xfe, 0xc7, 0x06, 0x52, 0x94, 0x2c, 0xcb, 0xb2, 0x8d, 0x18, 0xd8, 0x9b, 0x0e,
	0x79, 0xf8, 0x7d, 0x1f, 0x8f, 0x79, 0xc8, 0x2f, 0x81, 0x7c, 0x9b, 0xda, 0xcc, 0xa5, 0x56, 0xd5,
	0x71, 0x29, 0xa3, 0x28, 0xe3, 0x3a, 0x6d, 0xa7, 0xa5, 0x3e, 0xec, 0x98, 0xac, 0xdb, 0x6f, 0x55,
	0xdb, 0xb4, 0x57, 0xab, 0x9f, 0xbf, 0x78, 0x9f, 0xf6, 0x6d, 0x43, 0x67, 0x26, 0xb5, 0x6b, 0x2d,
	0x3a, 0x30, 0x6a, 0x6d, 0xea, 0x92, 0x9a, 0xd3, 0xaa, 0xb5, 0x2c, 0xda, 0x7e, 0xe9, 0xaf, 0x54,
	0x97, 0xdb, 0xb4, 0xd7, 0xa3, 0xb6, 0x8c, 0xb6, 0x3b, 0x94, 0x76, 0x2c, 0x52, 0xd3, 0x1d, 0xb3,
	0xa6, 0xdb, 0x36, 0x65, 0x62, 0xb5, 0xe7, 0xcf, 0xe2, 0x7f, 0xc1, 0x5a, 0x83, 0xb4, 0xfa, 0x9d,
	0x27, 0xe4, 0x15, 0xb1, 0x34, 0xf2, 0x55, 0x9f, 0x78, 0x0c, 0x15, 0x21, 0x63, 0xf1, 0xb8, 0xa4,
	0x54, 0x94, 0xfd, 0xac, 0xe6, 0x07, 0x78, 0x1f, 0x36, 0x3f, 0x76, 0x0c, 0x9d, 0x91, 0xa7, 0x84,
	0x7d, 0x4d, 0xdd, 0x97, 0x67, 0x8d, 0x20, 0x7f, 0x05, 0x52, 0xa6, 0x21, 0x92, 0xf3, 0x5a, 0xca,
	0x34, 0xf0, 0x06, 0xac, 0x9f, 0x12, 0x16, 0x4f, 0xc3, 0x36, 0x14, 0x47, 0x87, 0x3d, 0x87, 0xda,
	0x1e, 0x41, 0x08, 0xd2, 0x6d, 0x6a, 0x10, 0x01, 0x90, 0xd1, 0xc4, 0x37, 0x2a, 0xc1, 0x8d, 0x1e,
	0xf1, 0x3c, 0xbd, 0x43, 0x4a, 0x29, 0x21, 0x22, 0x08, 0x25, 0xd9, 0x62, 0x40, 0xc6, 0x33, 0x2d,
	0x93, 0x11, 0x57, 0xb7, 0x4a, 0x69, 0x3f, 0x53, 0x86, 0xf8, 0x2e, 0xac, 0x1c, 0x19, 0xc6, 0x53,
	0x6a, 0x90, 0x40, 0x28, 0x82, 0xb4, 0x1d, 0x30, 0x65, 0x35, 0xf1, 0x8d, 0xcb, 0xb0, 0x7d, 0x4a,
	0xd8, 0x71, 0xdf, 0x75, 0x89, 0xcd, 0xea, 0xbc, 0x8c, 0x1f, 0x10, 0xb3, 0xd3, 0x65, 0x81, 0x6a,
	0x02, 0x3b, 0x13, 0xe6, 0xe7, 0x92, 0xbf, 0x09, 0x4b, 0x5d, 0xb1, 0x5e, 0x6e, 0x41, 0x46, 0x78,
	0x1b, 0xd4, 0x38, 0x8d, 0xee, 0x75, 0x03, 0x11, 0x17, 0xb0, 0x95, 0x38, 0x3b, 0x97, 0x04, 0x04,
	0xe9, 0xae, 0xee, 0x75, 0x85, 0x80, 0xac, 0x26, 0xbe, 0xf1, 0x03, 0xf1, 0x93, 0xc5, 0x79, 0x23,
	0x6a, 0x95, 0x11, 0xb5, 0x2f, 0xc4, 0x4f, 0xf9, 0x4f, 0x08, 0xf9, 0x0f, 0xac, 0x06, 0xc8, 0x81,
	0x88, 0x1d, 0x00, 0x71, 0xbc, 0x2f, 0x44, 0xb2, 0xff, 0xdb, 0x65, 0x5b, 0x01, 0x37, 0xf6, 0x60,
	0x33, 0xd4, 0x42, 0x74, 0x83, 0xb8, 0x73, 0xaa, 0xb9, 0xcf, 0xf7, 0xca, 0xd7, 0x0b, 0x3d, 0xb9,
	0xc3, 0xf5, 0x2a, 0x6f, 0x2e, 0xa7, 0x55, 0x8d, 0x42, 0xcb, 0x14, 0x4c, 0xa0, 0x30, 0x94, 0x39,
	0x17, 0xdd, 0x1e, 0x64, 0xc4, 0x1e, 0x24, 0x5b, 0x7e, 0x84, 0x4d, 0xf3, 0xe7, 0xf0, 0x7b, 0x90,
	0xe6, 0xe7, 0x37, 0xd2, 0x61, 0x59, 0x71, 0xe8, 0x8b, 0x90, 0xd1, 0x0d, 0xc3, 0xf5, 0x4a, 0xa9,
	0xca, 0x22, 0xef, 0x50, 0x11, 0xa0, 0x02, 0x2c, 0x32, 0x66, 0xc9, 0x72, 0xf2, 0x4f, 0x5c, 0x04,
	0xc4, 0x5b, 0x8e, 0x1a, 0xe4, 0xcc, 0xbe, 0xa4, 0xc1, 0x69, 0xba, 0xf4, 0xfb, 0x33, 0x1c, 0x9d,
	0x4b, 0xff, 0x2e, 0x64, 0x78, 0xff, 0x78, 0xa5, 0xc5, 0xca, 0xe2, 0x7e, 0xee, 0x30, 0x57, 0x15,
	0xf7, 0x55, 0x55, 0xb4, 0x9b, 0x3f, 0x13, 0x3d, 0x54, 0xf5, 0xab, 0xb0, 0xab, 0x26, 0x1e, 0xaa,
	0x3a, 0xec, 0x06, 0xe9, 0x4d, 0x57, 0xb7, 0x3d, 0xbd, 0xcd, 0x6f, 0xaa, 0x63, 0xda, 0xb7, 0x59,
	0xfd, 0x4a, 0x9e, 0xca, 0x59, 0x87, 0xe1, 0xff, 0xb0, 0x37, 0x05, 0x63, 0xa6, 0x84, 0x4f, 0x87,
	0x8a, 0x9b, 0x03, 0xb1, 0x8a, 0x57, 0xe7, 0x9a, 0x95, 0x29, 0x42, 0xa6, 0xcd, 0x97, 0xca, 0x0e,
	0xf7, 0x03, 0xfc, 0x19, 0xdc, 0x3d, 0x25, 0x2c, 0x22, 0xaa, 0x7e, 0x15, 0xf6, 0xcf, 0x91, 0x6d,
	0x9c, 0xd9, 0x06, 0x19, 0xcc, 0xde, 0x20, 0x07, 0x37, 0x79, 0xaa, 0x20, 0xcd, 0x6b, 0x7e, 0x80,
	0x3f, 0x81, 0x7b, 0xc9, 0xe0, 0x62, 0x5b, 0x51, 0xf8, 0x09, 0x3b, 0x9f, 0x80, 0xfb, 0x05, 0x64,
	0x39, 0xee, 0x60, 0x8e, 0x2a, 0xec, 0x41, 0xaa, 0x39, 0x88, 0xb7, 0x52, 0x44, 0xa1, 0x96, 0x6a,
	0x0e, 0xf0, 0xcf, 0x0a, 0xdc, 0x6c, 0x10, 0x8b, 0x74, 0x74, 0x26, 0xce, 0x1f, 0x3f, 0xc7, 0xc1,
	0xed, 0xcc, 0xbf, 0xb9, 0xac, 0x57, 0x94, 0x11, 0x4f, 0xa0, 0xa7, 0x35, 0x3f, 0x40, 0x7b, 0x90,
	0x77, 0x2c, 0x62, 0x74, 0xc8, 0x85, 0xde, 0x0b, 0x2b, 0x9d, 0xd6, 0x96, 0xfd, 0xc1, 0x23, 0x31,
	0xc6, 0x97, 0x7a, 0x9c, 0x56, 0x3c, 0x0b, 0x69, 0xcd, 0x0f, 0xd0, 0x7d, 0x58, 0xe3, 0xef, 0xac,
	0x69, 0xf7, 0x75, 0xeb, 0xc2, 0x21, 0xae, 0x49, 0x0d, 0xaf, 0x94, 0x11, 0x7b, 0x2e, 0x84, 0x13,
	0xcf, 0xfc, 0x71, 0x9c, 0x83, 0xec, 0x33, 0x42, 0x5c, 0xf1, 0x84, 0x61, 0x0d, 0x20, 0x08, 0xae,
	0x5d, 0x8c, 0x4d, 0x58, 0x72, 0x08, 0x71, 0xe5, 0xc3, 0x95, 0xd5, 0x64, 0xc4, 0x09, 0x3e, 0x34,
	0x6d, 0xe2, 0x7a, 0x9c, 0xe0, 0x12, 0x20, 0x08, 0xae, 0x4d, 0x70, 0x00, 0x4b, 0x3d, 0xb1, 0x56,
	0xb6, 0x23, 0x92, 0xed, 0x28, 0x00, 0x1b, 0x84, 0xe9, 0xa6, 0xa5, 0xc9, 0x0c, 0x7c, 0x0e, 0xb9,
	0xc8, 0xf0, 0xd8, 0xdd, 0x52, 0x82, 0x1b, 0xbc, 0xf4, 0xc4, 0xf3, 0x02, 0x12, 0x19, 0xf2, 0x5d,
	0x98, 0x8e, 0x65, 0x7a, 0x4c, 0x90, 0x64, 0x35, 0x19, 0x61, 0x06, 0xcb, 0xc1, 0x8f, 0xc8, 0x37,
	0x82, 0xfe, 0x0d, 0x69, 0x76, 0xe5, 0xf8, 0xd2, 0x57, 0x0e, 0x4b, 0x52, 0x4a, 0x34, 0xa5, 0xda,
	0xbc, 0x72, 0x88, 0x26, 0xb2, 0xf0, 0xff, 0x20, 0xcd, 0x23, 0xb4, 0x0a, 0xb9, 0xfa, 0xf9, 0xf9,
	0xe3, 0xc7, 0x27, 0x27, 0xcf, 0x4e, 0xb4, 0xe7, 0x85, 0x05, 0x94, 0x87, 0x6c, 0xe3, 0xe4, 0xc9,
	0xc9, 0xe9, 0x51, 0xf3, 0xe4, 0x79, 0x41, 0x41, 0x2b, 0x00, 0xc7, 0x47, 0x4f, 0x1b, 0x67, 0x0d,
	0x11, 0xa7, 0xb0, 0x05, 0xf9, 0x08, 0xe4, 0xb5, 0x2b, 0xf6, 0x00, 0xb2, 0x46, 0xb0, 0x5c, 0x16,
	0x6d, 0x35, 0xa6, 0x54, 0x1b, 0x66, 0x60, 0x15, 0x4a, 0x4f, 0xf8, 0x07, 0x3b, 0xa6, 0xf6, 0xa5,
	0xe9, 0xf6, 0x88, 0x11, 0xde, 0x26, 0x58, 0x87, 0xdb, 0x13, 0xe6, 0xe6, 0x39, 0x28, 0x49, 0xf6,
	0xe0, 0xf0, 0xaf, 0x34, 0x2c, 0x1f, 0x19, 0x3d, 0xd3, 0x3e, 0xf6, 0x4d, 0x22, 0xfa, 0x1c, 0xf2,
	0xcf, 0x09, 0x1b, 0x7a, 0x37, 0x34, 0x2c, 0x73, 0xcc, 0xce, 0xa9, 0xeb, 0x72, 0xa6, 0xae, 0x7b,
	0x24, 0xb8, 0xec, 0xf1, 0xce, 0xeb, 0x5f, 0xff, 0xfc, 0x31, 0x75, 0x0b, 0xa3, 0xda, 0xab, 0x87,
	0xb5, 0x36, 0xb3, 0x6a, 0x06, 0x5f, 0x27, 0x9c, 0xde, 0x23, 0xe5, 0x00, 0x5d, 0xc2, 0x72, 0xd4,
	0xab, 0x21, 0x55, 0x62, 0x24, 0xf8, 0x3a, 0x75, 0x2b, 0x71, 0x6e, 0x12, 0x4f, 0x87, 0x30, 0xdb,
	0xcf, 0xe2, 0x3c, 0x6d, 0x58, 0x8d, 0x99, 0x4a, 0xb4, 0x23, 0xe1, 0x92, 0xcd, 0x66, 0xf2, 0x6e,
	0xb6, 0x05, 0xcb, 0x26, 0x5e, 0x0b, 0x58, 0x24, 0x85, 0x69, 0x70, 0x92, 0x8f, 0xe0, 0x86, 0x34,
	0x82, 0x68, 0x43, 0xae, 0x1e, 0x35, 0x86, 0xc9, 0xa0, 0xaa, 0x00, 0x2d, 0xe2, 0xd5, 0x00, 0x54,
	0x37, 0x0c, 0xfe, 0xb0, 0x71, 0x48, 0x03, 0x72, 0x91, 0x27, 0x14, 0xdd, 0x8e, 0x94, 0x60, 0xf4,
	0xb1, 0x55, 0xd5, 0xa4, 0x29, 0xc9, 0x50, 0x16, 0x0c, 0x25, 0xbc, 0x1e, 0x2d, 0x0e, 0x35, 0x88,
	0x69, 0x5f, 0x52, 0xce, 0xd2, 0x80, 0x25, 0xff, 0xca, 0x41, 0x05, 0x89, 0x12, 0x5e, 0x47, 0xea,
	0x5a, 0x6c, 0xc4, 0x73, 0xf0, 0x86, 0x80, 0x5b, 0xc5, 0xc0, 0xe1, 0x9c, 0x43, 0xa7, 0xe6, 0x6f,
	0xbf, 0x01, 0x4b, 0xfe, 0xbd, 0x12, 0xa2, 0x84, 0x77, 0x4e, 0x88, 0x32, 0xbc, 0x78, 0x46, 0x51,
	0xfc, 0x2b, 0xe3, 0x91, 0x72, 0x70, 0xf8, 0x7b, 0x0e, 0x56, 0xf8, 0xe1, 0xa3, 0xae, 0x75, 0x4c,
	0x7b, 0x3d, 0xdd, 0x36, 0xd0, 0x77, 0x0a, 0x6c, 0x24, 0x7a, 0x63, 0xb4, 0x37, 0xdc, 0xf4, 0x44,
	0x67, 0xad, 0xde, 0x9d, 0x9e, 0x24, 0x6b, 0xb4, 0x2f, 0xe4, 0x60, 0xbc, 0x13, 0xa9, 0x51, 0xdb,
	0x4f, 0x17, 0xaf, 0xa2, 0xdf, 0x20, 0x7c, 0x9f, 0xdf, 0x28, 0xb0, 0x91, 0xd8, 0x87, 0xe8, 0x8e,
	0x64, 0x9a, 0xd4, 0xc1, 0x6a, 0x65, 0x7a, 0x82, 0xe7, 0x8c, 0xcb, 0xb0, 0x44, 0x6a, 0x3b, 0x48,
	0x1d, 0x91, 0xb1, 0x9e, 0x60, 0xd6, 0xd1, 0xee, 0x84, 0xed, 0x0e, 0xed, 0xb6, 0x8a, 0xa7, 0xa5,
	0xc8, 0x7a, 0xdc, 0x13, 0x42, 0x2a, 0x78, 0x6b, 0x52, 0x3d, 0x74, 0xaf, 0xcb, 0x65, 0x74, 0x45,
	0x07, 0x0f, 0xe9, 0x23, 0xe7, 0x70, 0x8c, 0x77, 0x2b, 0x71, 0x4e, 0x12, 0xde, 0x11, 0x84, 0xb7,
	0x71, 0x31, 0x42, 0x38, 0xc2, 0xf4, 0x25, 0xac, 0x8c, 0x1a, 0x70, 0xb4, 0x19, 0xc3, 0x0b, 0x78,
	0x76, 0xe2, 0x3c, 0x23, 0x7e, 0x1d, 0xef, 0x0a, 0xa6, 0x2d, 0xbc, 0x39, 0xc6, 0x24, 0xf2, 0x38,
	0xd7, 0x0b, 0xb8, 0x19, 0x2c, 0x9e, 0xc8, 0x72, 0x6b, 0x6c, 0x5c, 0xe2, 0x6f, 0x09, 0xfc, 0x0d,
	0x5c, 0x88, 0xe3, 0x73, 0x64, 0x6b, 0xe8, 0xe8, 0x03, 0xa7, 0x38, 0x56, 0xb3, 0x88, 0x85, 0x9c,
	0xcc, 0xb2, 0x27, 0x58, 0x76, 0x70, 0x29, 0xc2, 0x32, 0xb2, 0x9a, 0xb3, 0x7d, 0xaf, 0x40, 0x79,
	0xba, 0xd9, 0x45, 0xfb, 0x31, 0x82, 0x89, 0x9e, 0x58, 0x8d, 0xcb, 0x8c, 0x58, 0xd7, 0xf1, 0xe3,
	0x22, 0x36, 0x5c, 0x63, 0x83, 0x08, 0x06, 0x17, 0xf4, 0x93, 0x02, 0x95, 0x59, 0xce, 0x19, 0x1d,
	0xcc, 0x96, 0x14, 0xd6, 0x67, 0x9a, 0xa8, 0xb1, 0x66, 0x8a, 0x8b, 0x0a, 0xeb, 0xf4, 0x5a, 0x11,
	0x7f, 0x14, 0x4c, 0xb7, 0xcd, 0xe8, 0xfe, 0x90, 0x6b, 0xa6, 0xc1, 0x56, 0x0b, 0x91, 0x64, 0x61,
	0x6c, 0x13, 0xaf, 0xe1, 0xe6, 0x60, 0x58, 0x9b, 0x6f, 0x15, 0xf1, 0x57, 0xc5, 0x2c, 0x7b, 0x8d,
	0x1e, 0x4c, 0x95, 0x11, 0xb7, 0xe2, 0x09, 0x42, 0x2a, 0x42, 0x88, 0x8a, 0x37, 0xe2, 0x42, 0xc2,
	0x7a, 0x34, 0x21, 0x1b, 0x9a, 0x1e, 0xb4, 0x9e, 0xe0, 0xac, 0xd4, 0xe2, 0xf8, 0xa0, 0xe7, 0x8c,
	0x3f, 0x90, 0xa1, 0xb3, 0x79, 0xa4, 0x1c, 0xd4, 0x4b, 0xbf, 0xbc, 0x2d, 0x2b, 0x6f, 0xde, 0x96,
	0x95, 0x3f, 0xde, 0x96, 0x95, 0x1f, 0xde, 0x95, 0x17, 0xde, 0xbc, 0x2b, 0x2f, 0xfc, 0xf6, 0xae,
	0xbc, 0xd0, 0x5a, 0x12, 0xff, 0x26, 0xfa, 0xef, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x03, 0xdd,
	0x53, 0xb4, 0x9d, 0x12, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AdminControlClient is the client API for AdminControl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AdminControlClient interface {
	// set boxd debug level
	SetDebugLevel(ctx context.Context, in *DebugLevelRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	GetNetworkID(ctx context.Context, in *GetNetworkIDRequest, opts ...grpc.CallOption) (*GetNetworkIDResponse, error)
	UpdateNetworkID(ctx context.Context, in *UpdateNetworkIDRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	AddNode(ctx context.Context, in *AddNodeRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	GetNodeInfo(ctx context.Context, in *GetNodeInfoRequest, opts ...grpc.CallOption) (*GetNodeInfoResponse, error)
	PeerID(ctx context.Context, in *PeerIDReq, opts ...grpc.CallOption) (*PeerIDResp, error)
	Miners(ctx context.Context, in *MinersReq, opts ...grpc.CallOption) (*MinersResp, error)
}

type adminControlClient struct {
	cc *grpc.ClientConn
}

func NewAdminControlClient(cc *grpc.ClientConn) AdminControlClient {
	return &adminControlClient{cc}
}

func (c *adminControlClient) SetDebugLevel(ctx context.Context, in *DebugLevelRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, "/rpcpb.AdminControl/SetDebugLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminControlClient) GetNetworkID(ctx context.Context, in *GetNetworkIDRequest, opts ...grpc.CallOption) (*GetNetworkIDResponse, error) {
	out := new(GetNetworkIDResponse)
	err := c.cc.Invoke(ctx, "/rpcpb.AdminControl/GetNetworkID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminControlClient) UpdateNetworkID(ctx context.Context, in *UpdateNetworkIDRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, "/rpcpb.AdminControl/UpdateNetworkID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminControlClient) AddNode(ctx context.Context, in *AddNodeRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, "/rpcpb.AdminControl/AddNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminControlClient) GetNodeInfo(ctx context.Context, in *GetNodeInfoRequest, opts ...grpc.CallOption) (*GetNodeInfoResponse, error) {
	out := new(GetNodeInfoResponse)
	err := c.cc.Invoke(ctx, "/rpcpb.AdminControl/GetNodeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminControlClient) PeerID(ctx context.Context, in *PeerIDReq, opts ...grpc.CallOption) (*PeerIDResp, error) {
	out := new(PeerIDResp)
	err := c.cc.Invoke(ctx, "/rpcpb.AdminControl/PeerID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminControlClient) Miners(ctx context.Context, in *MinersReq, opts ...grpc.CallOption) (*MinersResp, error) {
	out := new(MinersResp)
	err := c.cc.Invoke(ctx, "/rpcpb.AdminControl/Miners", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminControlServer is the server API for AdminControl service.
type AdminControlServer interface {
	// set boxd debug level
	SetDebugLevel(context.Context, *DebugLevelRequest) (*BaseResponse, error)
	GetNetworkID(context.Context, *GetNetworkIDRequest) (*GetNetworkIDResponse, error)
	UpdateNetworkID(context.Context, *UpdateNetworkIDRequest) (*BaseResponse, error)
	AddNode(context.Context, *AddNodeRequest) (*BaseResponse, error)
	GetNodeInfo(context.Context, *GetNodeInfoRequest) (*GetNodeInfoResponse, error)
	PeerID(context.Context, *PeerIDReq) (*PeerIDResp, error)
	Miners(context.Context, *MinersReq) (*MinersResp, error)
}

func RegisterAdminControlServer(s *grpc.Server, srv AdminControlServer) {
	s.RegisterService(&_AdminControl_serviceDesc, srv)
}

func _AdminControl_SetDebugLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DebugLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminControlServer).SetDebugLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.AdminControl/SetDebugLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminControlServer).SetDebugLevel(ctx, req.(*DebugLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminControl_GetNetworkID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNetworkIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminControlServer).GetNetworkID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.AdminControl/GetNetworkID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminControlServer).GetNetworkID(ctx, req.(*GetNetworkIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminControl_UpdateNetworkID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNetworkIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminControlServer).UpdateNetworkID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.AdminControl/UpdateNetworkID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminControlServer).UpdateNetworkID(ctx, req.(*UpdateNetworkIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminControl_AddNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminControlServer).AddNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.AdminControl/AddNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminControlServer).AddNode(ctx, req.(*AddNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminControl_GetNodeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminControlServer).GetNodeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.AdminControl/GetNodeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminControlServer).GetNodeInfo(ctx, req.(*GetNodeInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminControl_PeerID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminControlServer).PeerID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.AdminControl/PeerID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminControlServer).PeerID(ctx, req.(*PeerIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminControl_Miners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MinersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminControlServer).Miners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.AdminControl/Miners",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminControlServer).Miners(ctx, req.(*MinersReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _AdminControl_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpcpb.AdminControl",
	HandlerType: (*AdminControlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetDebugLevel",
			Handler:    _AdminControl_SetDebugLevel_Handler,
		},
		{
			MethodName: "GetNetworkID",
			Handler:    _AdminControl_GetNetworkID_Handler,
		},
		{
			MethodName: "UpdateNetworkID",
			Handler:    _AdminControl_UpdateNetworkID_Handler,
		},
		{
			MethodName: "AddNode",
			Handler:    _AdminControl_AddNode_Handler,
		},
		{
			MethodName: "GetNodeInfo",
			Handler:    _AdminControl_GetNodeInfo_Handler,
		},
		{
			MethodName: "PeerID",
			Handler:    _AdminControl_PeerID_Handler,
		},
		{
			MethodName: "Miners",
			Handler:    _AdminControl_Miners_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "control.proto",
}

// ContorlCommandClient is the client API for ContorlCommand service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ContorlCommandClient interface {
	GetCurrentBlockHeight(ctx context.Context, in *GetCurrentBlockHeightRequest, opts ...grpc.CallOption) (*GetCurrentBlockHeightResponse, error)
	LatestConfirmedHeight(ctx context.Context, in *LatestConfirmedHeightReq, opts ...grpc.CallOption) (*LatestConfirmedHeightResp, error)
	GetCurrentBlockHash(ctx context.Context, in *GetCurrentBlockHashRequest, opts ...grpc.CallOption) (*GetCurrentBlockHashResponse, error)
	GetBlockHash(ctx context.Context, in *GetBlockHashRequest, opts ...grpc.CallOption) (*GetBlockHashResponse, error)
	GetBlockHeader(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*GetBlockHeaderResponse, error)
	GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*GetBlockResponse, error)
	GetBlockByHeight(ctx context.Context, in *GetBlockByHeightReq, opts ...grpc.CallOption) (*GetBlockResponse, error)
	GetBlockTransactionCountByHash(ctx context.Context, in *GetBlockTransactionCountByHashReq, opts ...grpc.CallOption) (*GetBlockTxCountResp, error)
	GetBlockTransactionCountByHeight(ctx context.Context, in *GetBlockTransactionCountByHeightReq, opts ...grpc.CallOption) (*GetBlockTxCountResp, error)
	GetTransactionByBlockHashAndIndex(ctx context.Context, in *GetTransactionByBlockHashAndIndexReq, opts ...grpc.CallOption) (*GetTxResp, error)
	GetTransactionByBlockHeightAndIndex(ctx context.Context, in *GetTransactionByBlockHeightAndIndexReq, opts ...grpc.CallOption) (*GetTxResp, error)
	Delegates(ctx context.Context, in *DelegatesReq, opts ...grpc.CallOption) (*DelegatesResp, error)
}

type contorlCommandClient struct {
	cc *grpc.ClientConn
}

func NewContorlCommandClient(cc *grpc.ClientConn) ContorlCommandClient {
	return &contorlCommandClient{cc}
}

func (c *contorlCommandClient) GetCurrentBlockHeight(ctx context.Context, in *GetCurrentBlockHeightRequest, opts ...grpc.CallOption) (*GetCurrentBlockHeightResponse, error) {
	out := new(GetCurrentBlockHeightResponse)
	err := c.cc.Invoke(ctx, "/rpcpb.ContorlCommand/GetCurrentBlockHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contorlCommandClient) LatestConfirmedHeight(ctx context.Context, in *LatestConfirmedHeightReq, opts ...grpc.CallOption) (*LatestConfirmedHeightResp, error) {
	out := new(LatestConfirmedHeightResp)
	err := c.cc.Invoke(ctx, "/rpcpb.ContorlCommand/LatestConfirmedHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contorlCommandClient) GetCurrentBlockHash(ctx context.Context, in *GetCurrentBlockHashRequest, opts ...grpc.CallOption) (*GetCurrentBlockHashResponse, error) {
	out := new(GetCurrentBlockHashResponse)
	err := c.cc.Invoke(ctx, "/rpcpb.ContorlCommand/GetCurrentBlockHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contorlCommandClient) GetBlockHash(ctx context.Context, in *GetBlockHashRequest, opts ...grpc.CallOption) (*GetBlockHashResponse, error) {
	out := new(GetBlockHashResponse)
	err := c.cc.Invoke(ctx, "/rpcpb.ContorlCommand/GetBlockHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contorlCommandClient) GetBlockHeader(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*GetBlockHeaderResponse, error) {
	out := new(GetBlockHeaderResponse)
	err := c.cc.Invoke(ctx, "/rpcpb.ContorlCommand/GetBlockHeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contorlCommandClient) GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*GetBlockResponse, error) {
	out := new(GetBlockResponse)
	err := c.cc.Invoke(ctx, "/rpcpb.ContorlCommand/GetBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contorlCommandClient) GetBlockByHeight(ctx context.Context, in *GetBlockByHeightReq, opts ...grpc.CallOption) (*GetBlockResponse, error) {
	out := new(GetBlockResponse)
	err := c.cc.Invoke(ctx, "/rpcpb.ContorlCommand/GetBlockByHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contorlCommandClient) GetBlockTransactionCountByHash(ctx context.Context, in *GetBlockTransactionCountByHashReq, opts ...grpc.CallOption) (*GetBlockTxCountResp, error) {
	out := new(GetBlockTxCountResp)
	err := c.cc.Invoke(ctx, "/rpcpb.ContorlCommand/GetBlockTransactionCountByHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contorlCommandClient) GetBlockTransactionCountByHeight(ctx context.Context, in *GetBlockTransactionCountByHeightReq, opts ...grpc.CallOption) (*GetBlockTxCountResp, error) {
	out := new(GetBlockTxCountResp)
	err := c.cc.Invoke(ctx, "/rpcpb.ContorlCommand/GetBlockTransactionCountByHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contorlCommandClient) GetTransactionByBlockHashAndIndex(ctx context.Context, in *GetTransactionByBlockHashAndIndexReq, opts ...grpc.CallOption) (*GetTxResp, error) {
	out := new(GetTxResp)
	err := c.cc.Invoke(ctx, "/rpcpb.ContorlCommand/GetTransactionByBlockHashAndIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contorlCommandClient) GetTransactionByBlockHeightAndIndex(ctx context.Context, in *GetTransactionByBlockHeightAndIndexReq, opts ...grpc.CallOption) (*GetTxResp, error) {
	out := new(GetTxResp)
	err := c.cc.Invoke(ctx, "/rpcpb.ContorlCommand/GetTransactionByBlockHeightAndIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contorlCommandClient) Delegates(ctx context.Context, in *DelegatesReq, opts ...grpc.CallOption) (*DelegatesResp, error) {
	out := new(DelegatesResp)
	err := c.cc.Invoke(ctx, "/rpcpb.ContorlCommand/Delegates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContorlCommandServer is the server API for ContorlCommand service.
type ContorlCommandServer interface {
	GetCurrentBlockHeight(context.Context, *GetCurrentBlockHeightRequest) (*GetCurrentBlockHeightResponse, error)
	LatestConfirmedHeight(context.Context, *LatestConfirmedHeightReq) (*LatestConfirmedHeightResp, error)
	GetCurrentBlockHash(context.Context, *GetCurrentBlockHashRequest) (*GetCurrentBlockHashResponse, error)
	GetBlockHash(context.Context, *GetBlockHashRequest) (*GetBlockHashResponse, error)
	GetBlockHeader(context.Context, *GetBlockRequest) (*GetBlockHeaderResponse, error)
	GetBlock(context.Context, *GetBlockRequest) (*GetBlockResponse, error)
	GetBlockByHeight(context.Context, *GetBlockByHeightReq) (*GetBlockResponse, error)
	GetBlockTransactionCountByHash(context.Context, *GetBlockTransactionCountByHashReq) (*GetBlockTxCountResp, error)
	GetBlockTransactionCountByHeight(context.Context, *GetBlockTransactionCountByHeightReq) (*GetBlockTxCountResp, error)
	GetTransactionByBlockHashAndIndex(context.Context, *GetTransactionByBlockHashAndIndexReq) (*GetTxResp, error)
	GetTransactionByBlockHeightAndIndex(context.Context, *GetTransactionByBlockHeightAndIndexReq) (*GetTxResp, error)
	Delegates(context.Context, *DelegatesReq) (*DelegatesResp, error)
}

func RegisterContorlCommandServer(s *grpc.Server, srv ContorlCommandServer) {
	s.RegisterService(&_ContorlCommand_serviceDesc, srv)
}

func _ContorlCommand_GetCurrentBlockHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentBlockHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContorlCommandServer).GetCurrentBlockHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ContorlCommand/GetCurrentBlockHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContorlCommandServer).GetCurrentBlockHeight(ctx, req.(*GetCurrentBlockHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContorlCommand_LatestConfirmedHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LatestConfirmedHeightReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContorlCommandServer).LatestConfirmedHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ContorlCommand/LatestConfirmedHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContorlCommandServer).LatestConfirmedHeight(ctx, req.(*LatestConfirmedHeightReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContorlCommand_GetCurrentBlockHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentBlockHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContorlCommandServer).GetCurrentBlockHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ContorlCommand/GetCurrentBlockHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContorlCommandServer).GetCurrentBlockHash(ctx, req.(*GetCurrentBlockHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContorlCommand_GetBlockHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContorlCommandServer).GetBlockHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ContorlCommand/GetBlockHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContorlCommandServer).GetBlockHash(ctx, req.(*GetBlockHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContorlCommand_GetBlockHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContorlCommandServer).GetBlockHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ContorlCommand/GetBlockHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContorlCommandServer).GetBlockHeader(ctx, req.(*GetBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContorlCommand_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContorlCommandServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ContorlCommand/GetBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContorlCommandServer).GetBlock(ctx, req.(*GetBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContorlCommand_GetBlockByHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockByHeightReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContorlCommandServer).GetBlockByHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ContorlCommand/GetBlockByHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContorlCommandServer).GetBlockByHeight(ctx, req.(*GetBlockByHeightReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContorlCommand_GetBlockTransactionCountByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockTransactionCountByHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContorlCommandServer).GetBlockTransactionCountByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ContorlCommand/GetBlockTransactionCountByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContorlCommandServer).GetBlockTransactionCountByHash(ctx, req.(*GetBlockTransactionCountByHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContorlCommand_GetBlockTransactionCountByHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockTransactionCountByHeightReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContorlCommandServer).GetBlockTransactionCountByHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ContorlCommand/GetBlockTransactionCountByHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContorlCommandServer).GetBlockTransactionCountByHeight(ctx, req.(*GetBlockTransactionCountByHeightReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContorlCommand_GetTransactionByBlockHashAndIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionByBlockHashAndIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContorlCommandServer).GetTransactionByBlockHashAndIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ContorlCommand/GetTransactionByBlockHashAndIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContorlCommandServer).GetTransactionByBlockHashAndIndex(ctx, req.(*GetTransactionByBlockHashAndIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContorlCommand_GetTransactionByBlockHeightAndIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionByBlockHeightAndIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContorlCommandServer).GetTransactionByBlockHeightAndIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ContorlCommand/GetTransactionByBlockHeightAndIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContorlCommandServer).GetTransactionByBlockHeightAndIndex(ctx, req.(*GetTransactionByBlockHeightAndIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContorlCommand_Delegates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelegatesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContorlCommandServer).Delegates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ContorlCommand/Delegates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContorlCommandServer).Delegates(ctx, req.(*DelegatesReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ContorlCommand_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpcpb.ContorlCommand",
	HandlerType: (*ContorlCommandServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCurrentBlockHeight",
			Handler:    _ContorlCommand_GetCurrentBlockHeight_Handler,
		},
		{
			MethodName: "LatestConfirmedHeight",
			Handler:    _ContorlCommand_LatestConfirmedHeight_Handler,
		},
		{
			MethodName: "GetCurrentBlockHash",
			Handler:    _ContorlCommand_GetCurrentBlockHash_Handler,
		},
		{
			MethodName: "GetBlockHash",
			Handler:    _ContorlCommand_GetBlockHash_Handler,
		},
		{
			MethodName: "GetBlockHeader",
			Handler:    _ContorlCommand_GetBlockHeader_Handler,
		},
		{
			MethodName: "GetBlock",
			Handler:    _ContorlCommand_GetBlock_Handler,
		},
		{
			MethodName: "GetBlockByHeight",
			Handler:    _ContorlCommand_GetBlockByHeight_Handler,
		},
		{
			MethodName: "GetBlockTransactionCountByHash",
			Handler:    _ContorlCommand_GetBlockTransactionCountByHash_Handler,
		},
		{
			MethodName: "GetBlockTransactionCountByHeight",
			Handler:    _ContorlCommand_GetBlockTransactionCountByHeight_Handler,
		},
		{
			MethodName: "GetTransactionByBlockHashAndIndex",
			Handler:    _ContorlCommand_GetTransactionByBlockHashAndIndex_Handler,
		},
		{
			MethodName: "GetTransactionByBlockHeightAndIndex",
			Handler:    _ContorlCommand_GetTransactionByBlockHeightAndIndex_Handler,
		},
		{
			MethodName: "Delegates",
			Handler:    _ContorlCommand_Delegates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "control.proto",
}

func (m *DebugLevelRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DebugLevelRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Level) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintControl(dAtA, i, uint64(len(m.Level)))
		i += copy(dAtA[i:], m.Level)
	}
	return i, nil
}

func (m *UpdateNetworkIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateNetworkIDRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintControl(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *GetNetworkIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNetworkIDRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetNetworkIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNetworkIDResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintControl(dAtA, i, uint64(m.Code))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintControl(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.Id != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintControl(dAtA, i, uint64(m.Id))
	}
	if len(m.Literal) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintControl(dAtA, i, uint64(len(m.Literal)))
		i += copy(dAtA[i:], m.Literal)
	}
	return i, nil
}

func (m *AddNodeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddNodeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Node) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintControl(dAtA, i, uint64(len(m.Node)))
		i += copy(dAtA[i:], m.Node)
	}
	return i, nil
}

func (m *GetCurrentBlockHeightRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCurrentBlockHeightRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetCurrentBlockHeightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCurrentBlockHeightResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintControl(dAtA, i, uint64(m.Code))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintControl(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.Height != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintControl(dAtA, i, uint64(m.Height))
	}
	return i, nil
}

func (m *GetCurrentBlockHashRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCurrentBlockHashRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetCurrentBlockHashResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCurrentBlockHashResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintControl(dAtA, i, uint64(m.Code))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintControl(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if len(m.Hash) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintControl(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	return i, nil
}

func (m *GetBlockHashRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBlockHashRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintControl(dAtA, i, uint64(m.Height))
	}
	return i, nil
}

func (m *GetBlockHashResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBlockHashResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintControl(dAtA, i, uint64(m.Code))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintControl(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if len(m.Hash) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintControl(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	return i, nil
}

func (m *GetBlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBlockRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BlockHash) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintControl(dAtA, i, uint64(len(m.BlockHash)))
		i += copy(dAtA[i:], m.BlockHash)
	}
	return i, nil
}

func (m *GetBlockHeaderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBlockHeaderResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintControl(dAtA, i, uint64(m.Code))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintControl(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.Header != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintControl(dAtA, i, uint64(m.Header.Size()))
		n1, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *GetBlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBlockResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintControl(dAtA, i, uint64(m.Code))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintControl(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.Block != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintControl(dAtA, i, uint64(m.Block.Size()))
		n2, err := m.Block.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *Node) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Node) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintControl(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Addrs) > 0 {
		for _, s := range m.Addrs {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Ttl) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintControl(dAtA, i, uint64(len(m.Ttl)))
		i += copy(dAtA[i:], m.Ttl)
	}
	return i, nil
}

func (m *GetNodeInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNodeInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetNodeInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNodeInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintControl(dAtA, i, uint64(m.Code))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintControl(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if len(m.Nodes) > 0 {
		for _, msg := range m.Nodes {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintControl(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetBlockByHeightReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBlockByHeightReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintControl(dAtA, i, uint64(m.Height))
	}
	return i, nil
}

func (m *GetBlockTransactionCountByHashReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBlockTransactionCountByHashReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BlockHash) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintControl(dAtA, i, uint64(len(m.BlockHash)))
		i += copy(dAtA[i:], m.BlockHash)
	}
	return i, nil
}

func (m *GetBlockTransactionCountByHeightReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBlockTransactionCountByHeightReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintControl(dAtA, i, uint64(m.Height))
	}
	return i, nil
}

func (m *GetBlockTxCountResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBlockTxCountResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintControl(dAtA, i, uint64(m.Code))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintControl(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.Count != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintControl(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *GetTransactionByBlockHashAndIndexReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTransactionByBlockHashAndIndexReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BlockHash) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintControl(dAtA, i, uint64(len(m.BlockHash)))
		i += copy(dAtA[i:], m.BlockHash)
	}
	if m.Index != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintControl(dAtA, i, uint64(m.Index))
	}
	return i, nil
}

func (m *GetTransactionByBlockHeightAndIndexReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTransactionByBlockHeightAndIndexReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintControl(dAtA, i, uint64(m.Height))
	}
	if m.Index != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintControl(dAtA, i, uint64(m.Index))
	}
	return i, nil
}

func (m *GetTxResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTxResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintControl(dAtA, i, uint64(m.Code))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintControl(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.Tx != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintControl(dAtA, i, uint64(m.Tx.Size()))
		n3, err := m.Tx.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *Delegate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Delegate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Addr) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintControl(dAtA, i, uint64(len(m.Addr)))
		i += copy(dAtA[i:], m.Addr)
	}
	if m.Votes != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintControl(dAtA, i, uint64(m.Votes))
	}
	if m.PledgeAmount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintControl(dAtA, i, uint64(m.PledgeAmount))
	}
	if m.Score != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintControl(dAtA, i, uint64(m.Score))
	}
	if m.ContinualPeriods != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintControl(dAtA, i, uint64(m.ContinualPeriods))
	}
	return i, nil
}

func (m *PeerIDReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeerIDReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *PeerIDResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeerIDResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintControl(dAtA, i, uint64(m.Code))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintControl(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if len(m.Peerid) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintControl(dAtA, i, uint64(len(m.Peerid)))
		i += copy(dAtA[i:], m.Peerid)
	}
	return i, nil
}

func (m *MinersReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MinersReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *MinersResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MinersResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintControl(dAtA, i, uint64(m.Code))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintControl(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if len(m.Miners) > 0 {
		for _, msg := range m.Miners {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintControl(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MinerDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MinerDetail) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintControl(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintControl(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if len(m.Iplist) > 0 {
		for _, s := range m.Iplist {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *DelegatesReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegatesReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintControl(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *DelegatesResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegatesResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintControl(dAtA, i, uint64(m.Code))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintControl(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if len(m.Delegates) > 0 {
		for _, msg := range m.Delegates {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintControl(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *LatestConfirmedHeightReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LatestConfirmedHeightReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *LatestConfirmedHeightResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LatestConfirmedHeightResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintControl(dAtA, i, uint64(m.Code))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintControl(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.Height != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintControl(dAtA, i, uint64(m.Height))
	}
	return i, nil
}

func encodeVarintControl(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DebugLevelRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Level)
	if l > 0 {
		n += 1 + l + sovControl(uint64(l))
	}
	return n
}

func (m *UpdateNetworkIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovControl(uint64(m.Id))
	}
	return n
}

func (m *GetNetworkIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetNetworkIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovControl(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovControl(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovControl(uint64(m.Id))
	}
	l = len(m.Literal)
	if l > 0 {
		n += 1 + l + sovControl(uint64(l))
	}
	return n
}

func (m *AddNodeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Node)
	if l > 0 {
		n += 1 + l + sovControl(uint64(l))
	}
	return n
}

func (m *GetCurrentBlockHeightRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetCurrentBlockHeightResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovControl(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovControl(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovControl(uint64(m.Height))
	}
	return n
}

func (m *GetCurrentBlockHashRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetCurrentBlockHashResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovControl(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovControl(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovControl(uint64(l))
	}
	return n
}

func (m *GetBlockHashRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovControl(uint64(m.Height))
	}
	return n
}

func (m *GetBlockHashResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovControl(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovControl(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovControl(uint64(l))
	}
	return n
}

func (m *GetBlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BlockHash)
	if l > 0 {
		n += 1 + l + sovControl(uint64(l))
	}
	return n
}

func (m *GetBlockHeaderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovControl(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovControl(uint64(l))
	}
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovControl(uint64(l))
	}
	return n
}

func (m *GetBlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovControl(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovControl(uint64(l))
	}
	if m.Block != nil {
		l = m.Block.Size()
		n += 1 + l + sovControl(uint64(l))
	}
	return n
}

func (m *Node) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovControl(uint64(l))
	}
	if len(m.Addrs) > 0 {
		for _, s := range m.Addrs {
			l = len(s)
			n += 1 + l + sovControl(uint64(l))
		}
	}
	l = len(m.Ttl)
	if l > 0 {
		n += 1 + l + sovControl(uint64(l))
	}
	return n
}

func (m *GetNodeInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetNodeInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovControl(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovControl(uint64(l))
	}
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovControl(uint64(l))
		}
	}
	return n
}

func (m *GetBlockByHeightReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovControl(uint64(m.Height))
	}
	return n
}

func (m *GetBlockTransactionCountByHashReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BlockHash)
	if l > 0 {
		n += 1 + l + sovControl(uint64(l))
	}
	return n
}

func (m *GetBlockTransactionCountByHeightReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovControl(uint64(m.Height))
	}
	return n
}

func (m *GetBlockTxCountResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovControl(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovControl(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovControl(uint64(m.Count))
	}
	return n
}

func (m *GetTransactionByBlockHashAndIndexReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BlockHash)
	if l > 0 {
		n += 1 + l + sovControl(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovControl(uint64(m.Index))
	}
	return n
}

func (m *GetTransactionByBlockHeightAndIndexReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovControl(uint64(m.Height))
	}
	if m.Index != 0 {
		n += 1 + sovControl(uint64(m.Index))
	}
	return n
}

func (m *GetTxResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovControl(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovControl(uint64(l))
	}
	if m.Tx != nil {
		l = m.Tx.Size()
		n += 1 + l + sovControl(uint64(l))
	}
	return n
}

func (m *Delegate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovControl(uint64(l))
	}
	if m.Votes != 0 {
		n += 1 + sovControl(uint64(m.Votes))
	}
	if m.PledgeAmount != 0 {
		n += 1 + sovControl(uint64(m.PledgeAmount))
	}
	if m.Score != 0 {
		n += 1 + sovControl(uint64(m.Score))
	}
	if m.ContinualPeriods != 0 {
		n += 1 + sovControl(uint64(m.ContinualPeriods))
	}
	return n
}

func (m *PeerIDReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *PeerIDResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovControl(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovControl(uint64(l))
	}
	l = len(m.Peerid)
	if l > 0 {
		n += 1 + l + sovControl(uint64(l))
	}
	return n
}

func (m *MinersReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MinersResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovControl(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovControl(uint64(l))
	}
	if len(m.Miners) > 0 {
		for _, e := range m.Miners {
			l = e.Size()
			n += 1 + l + sovControl(uint64(l))
		}
	}
	return n
}

func (m *MinerDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovControl(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovControl(uint64(l))
	}
	if len(m.Iplist) > 0 {
		for _, s := range m.Iplist {
			l = len(s)
			n += 1 + l + sovControl(uint64(l))
		}
	}
	return n
}

func (m *DelegatesReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovControl(uint64(m.Type))
	}
	return n
}

func (m *DelegatesResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovControl(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovControl(uint64(l))
	}
	if len(m.Delegates) > 0 {
		for _, e := range m.Delegates {
			l = e.Size()
			n += 1 + l + sovControl(uint64(l))
		}
	}
	return n
}

func (m *LatestConfirmedHeightReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *LatestConfirmedHeightResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovControl(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovControl(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovControl(uint64(m.Height))
	}
	return n
}

func sovControl(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozControl(x uint64) (n int) {
	return sovControl(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DebugLevelRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DebugLevelRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DebugLevelRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Level = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateNetworkIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateNetworkIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateNetworkIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNetworkIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNetworkIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNetworkIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNetworkIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNetworkIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNetworkIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Literal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Literal = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddNodeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddNodeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddNodeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Node = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCurrentBlockHeightRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCurrentBlockHeightRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCurrentBlockHeightRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCurrentBlockHeightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCurrentBlockHeightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCurrentBlockHeightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCurrentBlockHashRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCurrentBlockHashRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCurrentBlockHashRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCurrentBlockHashResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCurrentBlockHashResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCurrentBlockHashResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBlockHashRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBlockHashRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBlockHashRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBlockHashResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBlockHashResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBlockHashResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBlockHeaderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBlockHeaderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBlockHeaderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &pb.BlockHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Block == nil {
				m.Block = &pb.Block{}
			}
			if err := m.Block.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Node) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Node: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Node: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addrs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addrs = append(m.Addrs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ttl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ttl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNodeInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNodeInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNodeInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNodeInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNodeInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNodeInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &Node{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBlockByHeightReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBlockByHeightReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBlockByHeightReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBlockTransactionCountByHashReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBlockTransactionCountByHashReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBlockTransactionCountByHashReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBlockTransactionCountByHeightReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBlockTransactionCountByHeightReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBlockTransactionCountByHeightReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBlockTxCountResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBlockTxCountResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBlockTxCountResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTransactionByBlockHashAndIndexReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTransactionByBlockHashAndIndexReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTransactionByBlockHashAndIndexReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTransactionByBlockHeightAndIndexReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTransactionByBlockHeightAndIndexReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTransactionByBlockHeightAndIndexReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTxResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTxResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTxResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tx == nil {
				m.Tx = &pb.Transaction{}
			}
			if err := m.Tx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Delegate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Delegate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Delegate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Votes", wireType)
			}
			m.Votes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Votes |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PledgeAmount", wireType)
			}
			m.PledgeAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PledgeAmount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContinualPeriods", wireType)
			}
			m.ContinualPeriods = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContinualPeriods |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PeerIDReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeerIDReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeerIDReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PeerIDResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeerIDResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeerIDResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peerid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peerid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MinersReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MinersReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MinersReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MinersResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MinersResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MinersResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Miners", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Miners = append(m.Miners, &MinerDetail{})
			if err := m.Miners[len(m.Miners)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MinerDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MinerDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MinerDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iplist", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Iplist = append(m.Iplist, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegatesReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegatesReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegatesReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (DelegatesReq_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegatesResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegatesResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegatesResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegates = append(m.Delegates, &Delegate{})
			if err := m.Delegates[len(m.Delegates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LatestConfirmedHeightReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LatestConfirmedHeightReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LatestConfirmedHeightReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LatestConfirmedHeightResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LatestConfirmedHeightResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LatestConfirmedHeightResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipControl(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowControl
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowControl
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowControl
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthControl
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowControl
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipControl(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthControl = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowControl   = fmt.Errorf("proto: integer overflow")
)
