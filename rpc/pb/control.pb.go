// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: control.proto

package controlpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing debug level.
type DebugLevelRequest struct {
	Level                string   `protobuf:"bytes,1,opt,name=level,proto3" json:"level,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DebugLevelRequest) Reset()         { *m = DebugLevelRequest{} }
func (m *DebugLevelRequest) String() string { return proto.CompactTextString(m) }
func (*DebugLevelRequest) ProtoMessage()    {}
func (*DebugLevelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_control_e45fef29fb0881ca, []int{0}
}
func (m *DebugLevelRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DebugLevelRequest.Unmarshal(m, b)
}
func (m *DebugLevelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DebugLevelRequest.Marshal(b, m, deterministic)
}
func (dst *DebugLevelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DebugLevelRequest.Merge(dst, src)
}
func (m *DebugLevelRequest) XXX_Size() int {
	return xxx_messageInfo_DebugLevelRequest.Size(m)
}
func (m *DebugLevelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DebugLevelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DebugLevelRequest proto.InternalMessageInfo

func (m *DebugLevelRequest) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

// The response message containing the result message
type Reply struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Reply) Reset()         { *m = Reply{} }
func (m *Reply) String() string { return proto.CompactTextString(m) }
func (*Reply) ProtoMessage()    {}
func (*Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_control_e45fef29fb0881ca, []int{1}
}
func (m *Reply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Reply.Unmarshal(m, b)
}
func (m *Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Reply.Marshal(b, m, deterministic)
}
func (dst *Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reply.Merge(dst, src)
}
func (m *Reply) XXX_Size() int {
	return xxx_messageInfo_Reply.Size(m)
}
func (m *Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_Reply proto.InternalMessageInfo

func (m *Reply) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Reply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*DebugLevelRequest)(nil), "controlpb.DebugLevelRequest")
	proto.RegisterType((*Reply)(nil), "controlpb.Reply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ContorlCommandClient is the client API for ContorlCommand service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ContorlCommandClient interface {
	// set boxd debug level
	SetDebugLevel(ctx context.Context, in *DebugLevelRequest, opts ...grpc.CallOption) (*Reply, error)
}

type contorlCommandClient struct {
	cc *grpc.ClientConn
}

func NewContorlCommandClient(cc *grpc.ClientConn) ContorlCommandClient {
	return &contorlCommandClient{cc}
}

func (c *contorlCommandClient) SetDebugLevel(ctx context.Context, in *DebugLevelRequest, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/controlpb.ContorlCommand/SetDebugLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContorlCommandServer is the server API for ContorlCommand service.
type ContorlCommandServer interface {
	// set boxd debug level
	SetDebugLevel(context.Context, *DebugLevelRequest) (*Reply, error)
}

func RegisterContorlCommandServer(s *grpc.Server, srv ContorlCommandServer) {
	s.RegisterService(&_ContorlCommand_serviceDesc, srv)
}

func _ContorlCommand_SetDebugLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DebugLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContorlCommandServer).SetDebugLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controlpb.ContorlCommand/SetDebugLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContorlCommandServer).SetDebugLevel(ctx, req.(*DebugLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ContorlCommand_serviceDesc = grpc.ServiceDesc{
	ServiceName: "controlpb.ContorlCommand",
	HandlerType: (*ContorlCommandServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetDebugLevel",
			Handler:    _ContorlCommand_SetDebugLevel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "control.proto",
}

func init() { proto.RegisterFile("control.proto", fileDescriptor_control_e45fef29fb0881ca) }

var fileDescriptor_control_e45fef29fb0881ca = []byte{
	// 170 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0xce, 0xcf, 0x2b,
	0x29, 0xca, 0xcf, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x84, 0x72, 0x0b, 0x92, 0x94,
	0x34, 0xb9, 0x04, 0x5d, 0x52, 0x93, 0x4a, 0xd3, 0x7d, 0x52, 0xcb, 0x52, 0x73, 0x82, 0x52, 0x0b,
	0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x44, 0xb8, 0x58, 0x73, 0x40, 0x7c, 0x09, 0x46, 0x05, 0x46, 0x0d,
	0xce, 0x20, 0x08, 0x47, 0xc9, 0x94, 0x8b, 0x35, 0x28, 0xb5, 0x20, 0xa7, 0x52, 0x48, 0x88, 0x8b,
	0x25, 0x39, 0x3f, 0x25, 0x15, 0x2c, 0xcb, 0x1a, 0x04, 0x66, 0x0b, 0x49, 0x70, 0xb1, 0xe7, 0xa6,
	0x16, 0x17, 0x27, 0xa6, 0xa7, 0x4a, 0x30, 0x81, 0x35, 0xc1, 0xb8, 0x46, 0xc1, 0x5c, 0x7c, 0xce,
	0xf9, 0x79, 0x25, 0xf9, 0x45, 0x39, 0xce, 0xf9, 0xb9, 0xb9, 0x89, 0x79, 0x29, 0x42, 0x8e, 0x5c,
	0xbc, 0xc1, 0xa9, 0x25, 0x08, 0x6b, 0x85, 0x64, 0xf4, 0xe0, 0x0e, 0xd2, 0xc3, 0x70, 0x8d, 0x94,
	0x00, 0x92, 0x2c, 0xd8, 0x01, 0x4a, 0x0c, 0x49, 0x6c, 0x60, 0x8f, 0x18, 0x03, 0x02, 0x00, 0x00,
	0xff, 0xff, 0x8d, 0x51, 0x63, 0x30, 0xd9, 0x00, 0x00, 0x00,
}
