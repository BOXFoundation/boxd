// Copyright (c) 2018 ContentBox Authors.
// Use of this source code is governed by a MIT-style
// license that can be found in the LICENSE file.

syntax = "proto3";
package rpcpb;

import "transaction.proto";
import "google/api/annotations.proto";

service WebApi {
    rpc ViewTxDetail (ViewTxDetailReq) returns (ViewTxDetailResp) {
        option (google.api.http) = {
            post: "/v1/tx/detail"
            body: "*"
        };
    }

    rpc ViewBlockDetail (ViewBlockDetailReq) returns (ViewBlockDetailResp) {
        option (google.api.http) = {
            post: "/v1/block/detail"
            body: "*"
        };
    }

    rpc GetTokenInfo (GetTokenInfoRequest) returns (GetTokenInfoResponse) {
        option (google.api.http) = {
            post: "/v1/token/detail"
            body: "*"
        };
    }

    rpc ListenAndReadNewBlock(ListenBlocksReq) returns (stream BlockDetail);
}

message ViewTxDetailReq {
    string hash = 1;
}

message ViewTxDetailResp {
    int32 code = 1;
    string message = 2;
    int32 version = 3;
    int64 block_time = 4;
    uint32 block_height = 5;
    enum TxStatus {
        unknown = 0;
        pending = 1;
        onchain = 2;
        confirmed = 3;
    }
    TxStatus status = 6;
    TxDetail detail = 7;
}

message ViewBlockDetailReq {
    string hash = 1;
}

message ViewBlockDetailResp {
    int32 code = 1;
    string message = 2;
    BlockDetail detail = 3;
}

message GetTokenInfoRequest {
    string addr = 1;
}

message GetTokenInfoResponse {
    TokenBasicInfo info = 1;
}

message ListenBlocksReq {
}

message TxDetail {
    string hash = 1;
    repeated TxInDetail vin = 2;
    repeated TxOutDetail vout = 3;
}

message TxInDetail {
    TxOutDetail prev_out_detail = 1;
    string script_sig = 2;
    uint32 sequence = 3;
    string prev_out_point = 4;
}

message TxOutDetail {
    string addr = 1;
    uint64 value = 2;
    string script_pub_key = 3;
    string script_disasm = 4;
    enum TxOutType {
        unknown = 0;
        pay_to_pubkey = 1;
        pay_to_pubkey_cltv_script = 2;
        pay_to_script = 3;
        pay_to_split_script = 4;
        token_issue = 5;
        token_transfer = 6;
    }
    TxOutType type = 5; 
    oneof appendix {
        TokenIssueInfo token_issue_info = 6; 
        TokenTransferInfo token_transfer_info= 7;
    }
}

message BlockDetail {
    int32 version = 1;
    uint32 height = 2;
    int64 time_stamp = 3;
    uint32 size = 4;
    string hash = 5;
    string prev_block_hash = 6;
    string coin_base = 7;
    bool confirmed = 8;
    string signature = 9;
    repeated TxDetail txs = 10;
}

message TokenIssueInfo {
    TokenTag token_tag = 2;
}

message TokenTransferInfo {
    string token_id = 1;
}

message Token {
    string hash = 1;
    uint32 index = 2;
}

message TokenBasicInfo {
    Token token = 1;
    string name = 2;
    uint64 total_supply = 3;
    string creator_addr = 4;
    uint64 creator_time = 5;
    // should be uint8, using smallest type uint32 instead
    uint32 decimals = 6;
    string symbol = 7;
    string addr = 8;
}
