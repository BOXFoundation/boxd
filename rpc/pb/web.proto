// Copyright (c) 2018 ContentBox Authors.
// Use of this source code is governed by a MIT-style
// license that can be found in the LICENSE file.

syntax = "proto3";
package rpcpb;

import "github.com/BOXFoundation/boxd/core/pb/block.proto";
import "google/api/annotations.proto";

service WebApi {
    rpc GetTransaction (GetTransactionInfoRequest) returns (TransactionInfo) {
        option (google.api.http) = {
            post: "/v1/webapi/gettransaction"
            body: "*"
        };
    }

    rpc GetBlock (GetBlockInfoRequest) returns (BlockInfo) {
        option (google.api.http) = {
            post: "/v1/webapi/getblock"
            body: "*"
        };
    }

    rpc GetTopHolders(GetTopHoldersRequest) returns (GetTopHoldersResponse) {
        option (google.api.http) = {
            post: "/v1/webapi/topholders"
            body: "*"
        };
    }

    rpc GetHolderCount(GetHolderCountRequest) returns (GetHolderCountResponse) {
        option (google.api.http) = {
            post: "/v1/webapi/holdercount"
            body: "*"
        };
    }

    rpc GetPendingTransaction(GetPendingTransactionRequest) returns (GetTransactionsInfoResponse) {
        option (google.api.http) = {
            post: "/v1/webapi/getpendingtxs"
            body: "*"
        };
    }

    rpc GetTransactionHistory(GetTransactionHistoryRequest) returns (GetTransactionsInfoResponse) {
        option (google.api.http) = {
            post: "/v1/webapi/gettxhistory"
            body: "*"
        };
    }

}

message GetTransactionsInfoResponse {
    uint32 total = 1;
    repeated TransactionInfo txs = 2;
}

message GetTransactionHistoryRequest {
    string addr = 1;
    uint32 limit = 2;
    uint32 offset = 3;
}

message GetPendingTransactionRequest {
    uint32 limit = 1;
    uint32 offset = 2;
}

message GetBlockInfoRequest {
    string hash = 1;
}

message GetTransactionInfoRequest {
    string hash = 1;
}

message GetTopHoldersRequest {
    uint32 limit = 1;
    uint32 offset = 2;
}

message GetTopHoldersResponse {
    uint32 total = 1;
    repeated AddressAmount data = 2;
}

message AddressAmount {
    string addr = 1;
    uint64 amount = 2;
}

message GetHolderCountRequest {
}

message GetHolderCountResponse {
    uint32 holder_count = 1;
}

message HeaderInfo {
    int32 version = 1;
    string prev_block_hash = 2;
    string txs_root = 3;
    int64 time_stamp = 4;
    uint32 magic = 5;
    string period_hash = 6;
    string candidates_hash = 7;
}

message TransactionInfo {
    int32 version = 1;
    repeated corepb.TxIn vin = 2;
    repeated corepb.TxOut vout = 3;
    corepb.Data data = 4;
    uint32 magic = 5;
    int64 lock_time = 6;
    string hash = 7;
    uint64 fee = 8;
    uint64 size = 9;
}

message BlockInfo {
    HeaderInfo header = 1;
    repeated TransactionInfo txs = 2;
    uint32 height = 3;
    bytes signature = 4;
    string hash = 5;
    uint64 size = 6;
    string coin_base = 7;
}