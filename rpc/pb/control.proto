// Copyright (c) 2018 ContentBox Authors.
// Use of this source code is governed by a MIT-style
// license that can be found in the LICENSE file.

syntax = "proto3";
package rpcpb;

import "github.com/BOXFoundation/boxd/core/pb/block.proto";
import "common.proto";
import "google/api/annotations.proto";

// The box control command service definition.
service ContorlCommand {
    // set boxd debug level
    rpc SetDebugLevel (DebugLevelRequest) returns (BaseResponse) {
      option (google.api.http) = {
        post: "/v1/ctl/debuglevel"
        body: "*"
      };
    }

    rpc GetBlockHeight (GetBlockHeightRequest) returns (GetBlockHeightResponse) {
      option (google.api.http) = {
        post: "/v1/ctl/getblockheight"
        body: "*"
      };
    }

    rpc GetBlockHash (GetBlockHashRequest) returns (GetBlockHashResponse) {
      option (google.api.http) = {
        post: "/v1/ctl/getblockhash"
        body: "*"
      };
    }

    rpc GetBlockHeader (GetBlockRequest) returns (GetBlockHeaderResponse) {
      option (google.api.http) = {
        post: "/v1/ctl/getblockheader"
        body: "*"
      };
    }

    rpc GetBlock (GetBlockRequest) returns (GetBlockResponse) {
      option (google.api.http) = {
        post: "/v1/ctl/getblock"
        body: "*"
      };
    }

    rpc GetNodeInfo (GetNodeInfoRequest) returns (GetNodeInfoResponse) {
        option (google.api.http) = {
            post: "/v1/ctl/getnodeinfo"
            body: "*"
        };
    }
}
  
// The request message containing debug level.
message DebugLevelRequest {
string level = 1;
}

message GetBlockHeightRequest {
}

message GetBlockHeightResponse {
    int32 code = 1;
    string message = 2;
    uint32 height = 3;
}

message GetBlockHashRequest {
    uint32 height = 1;
}

message GetBlockHashResponse {
    int32 code = 1;
    string message = 2;
    string hash = 3;
}

message GetBlockRequest {
    string block_hash = 1;
}

message GetBlockHeaderResponse {
    int32 code = 1;
    string message = 2;
    corepb.BlockHeader header = 3;
}

message GetBlockResponse {
    int32 code = 1;
    string message = 2;
    corepb.Block block = 3;
}

message Node {
    string id = 1;
    repeated string addrs = 2;
    string ttl = 3;
}

message GetNodeInfoRequest {

}

message GetNodeInfoResponse {
    repeated Node nodes = 1;
}

