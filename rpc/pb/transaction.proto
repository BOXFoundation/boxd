// Copyright (c) 2018 ContentBox Authors. 
// Use of this source code is governed by a MIT-style 
// license that can be found in the LICENSE file.

syntax = "proto3";
package rpcpb;

import "github.com/BOXFoundation/boxd/core/pb/block.proto";
import "google/api/annotations.proto";
import "common.proto";

service TransactionCommand {

    rpc GetBalance(GetBalanceReq) returns (GetBalanceResp) {
        option (google.api.http) = {
            post: "/v1/tx/getbalance"
            body: "*"
        };
    }

    rpc GetTokenBalance(GetTokenBalanceReq) returns (GetBalanceResp) {
        option (google.api.http) = {
            post: "/v1/tx/gettokenbalance"
            body: "*"
        };
    }

    rpc FetchUtxos(FetchUtxosReq) returns (FetchUtxosResp) {
        option (google.api.http) = {
            post: "/v1/tx/fetchutxos"
            body: "*"
        };
    }

    rpc SendTransaction(SendTransactionReq) returns (SendTransactionResp) {
        option (google.api.http) = {
            post: "/v1/tx/sendtransaction"
            body: "*"
        };
    }

    rpc GetRawTransaction(GetRawTransactionRequest) returns (GetRawTransactionResponse) {
        option (google.api.http) = {
            post: "/v1/tx/getrawtransaction"
            body: "*"
        };
    }

    rpc GetFeePrice(GetFeePriceRequest) returns (GetFeePriceResponse) {
        option (google.api.http) = {
            post: "/v1/tx/getfeeprice"
            body: "*"
        };
    }

    rpc MakeUnsignedTx(MakeTxReq) returns (MakeTxResp) {
        option (google.api.http) = {
            post: "/v1/tx/makeunsignedtx"
            body: "*"
        };
    }

    rpc MakeUnsignedSplitAddrTx(MakeSplitAddrTxReq) returns (MakeSplitAddrTxResp) {
        option (google.api.http) = {
            post: "/v1/tx/makeunsignedtx/splitaddr"
            body: "*"
        };
    }

    rpc MakeUnsignedTokenIssueTx(MakeTokenIssueTxReq) returns (MakeTokenIssueTxResp) {
        option (google.api.http) = {
            post: "/v1/tx/makeunsignedtx/token/issue"
            body: "*"
        };
    }

    rpc MakeUnsignedTokenTransferTx(MakeTokenTransferTxReq) returns (MakeTxResp) {
        option (google.api.http) = {
            post: "/v1/tx/makeunsignedtx/token/transfer"
            body: "*"
        };
    }
}

message GetBalanceReq {
    repeated string addrs = 1;
}

message GetBalanceResp {
    int32 code = 1;
    string message = 2;
    repeated uint64 balances = 3;
}

message GetTokenBalanceReq {
    repeated string addrs = 1;
    string token_hash = 2;
    uint32 token_index = 3;
}

message FetchUtxosReq {
    string addr = 1;
    uint64 amount = 2;
    string token_hash = 3;
    uint32 token_index = 4;
}

message FetchUtxosResp {
    int32 code = 1;
    string message = 2;
    repeated Utxo utxos = 3;
}

message GetRawTransactionRequest {
    bytes hash = 1;
}

message GetRawTransactionResponse {
    corepb.Transaction tx = 1;
}

message SendTransactionReq {
    corepb.Transaction tx = 1;
}

message SendTransactionResp {
    int32 code = 1;
    string message = 2;
    string hash = 3;
}

message GetFeePriceRequest{
}

message GetFeePriceResponse {
    uint64 box_per_byte = 1;
}

message MakeTxReq {
    string from = 1;
    repeated string to = 2;
    repeated uint64 amounts = 3;
    uint64 fee = 4;
}

message MakeTxResp {
    int32 code = 1;
    string message = 2;
    corepb.Transaction tx = 3;
    repeated bytes rawMsgs = 4;
}

message MakeSplitAddrTxReq {
    string from = 1;
    repeated string addrs = 2;
    repeated uint64 weights = 3;
    uint64 fee = 4;
}

message MakeSplitAddrTxResp {
    int32 code = 1;
    string message = 2;
    string splitAddr = 3;
    corepb.Transaction tx = 4;
    repeated bytes rawMsgs = 5;
}

message MakeTokenIssueTxReq {
    string issuer = 1;
    string owner = 2;
    TokenTag tag = 3;
    uint64 fee = 4;
} 

message MakeTokenIssueTxResp {
    int32 code = 1;
    string message = 2;
    uint32 issue_out_index = 3;
    corepb.Transaction tx = 4;
    repeated bytes rawMsgs = 5;
}

message MakeTokenTransferTxReq {
    string from = 1;
    repeated string to = 2;
    repeated uint64 amounts = 3;
    string token_hash = 4;
    uint32 token_index = 5;
    uint64 fee = 6;
}

message TokenTag {
  string name = 1;
  string symbol = 2;
  uint64 supply = 3;
  uint32 decimal = 4;
}
