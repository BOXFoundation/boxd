// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: block.proto

/*
Package corepb is a generated protocol buffer package.

It is generated from these files:
	block.proto

It has these top-level messages:
	BlockHeader
	MsgBlock
	MsgTx
	TxIn
	TxOut
	OutPoint
	UtxoWrap
*/
package corepb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type BlockHeader struct {
	Version       int32  `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	PrevBlockHash []byte `protobuf:"bytes,2,opt,name=prev_block_hash,json=prevBlockHash,proto3" json:"prev_block_hash,omitempty"`
	TxsRoot       []byte `protobuf:"bytes,3,opt,name=txs_root,json=txsRoot,proto3" json:"txs_root,omitempty"`
	TimeStamp     int64  `protobuf:"varint,4,opt,name=time_stamp,json=timeStamp,proto3" json:"time_stamp,omitempty"`
	Magic         uint32 `protobuf:"varint,5,opt,name=magic,proto3" json:"magic,omitempty"`
}

func (m *BlockHeader) Reset()                    { *m = BlockHeader{} }
func (m *BlockHeader) String() string            { return proto.CompactTextString(m) }
func (*BlockHeader) ProtoMessage()               {}
func (*BlockHeader) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{0} }

func (m *BlockHeader) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *BlockHeader) GetPrevBlockHash() []byte {
	if m != nil {
		return m.PrevBlockHash
	}
	return nil
}

func (m *BlockHeader) GetTxsRoot() []byte {
	if m != nil {
		return m.TxsRoot
	}
	return nil
}

func (m *BlockHeader) GetTimeStamp() int64 {
	if m != nil {
		return m.TimeStamp
	}
	return 0
}

func (m *BlockHeader) GetMagic() uint32 {
	if m != nil {
		return m.Magic
	}
	return 0
}

type MsgBlock struct {
	Header *BlockHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Txs    []*MsgTx     `protobuf:"bytes,2,rep,name=txs" json:"txs,omitempty"`
	Height int32        `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *MsgBlock) Reset()                    { *m = MsgBlock{} }
func (m *MsgBlock) String() string            { return proto.CompactTextString(m) }
func (*MsgBlock) ProtoMessage()               {}
func (*MsgBlock) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{1} }

func (m *MsgBlock) GetHeader() *BlockHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *MsgBlock) GetTxs() []*MsgTx {
	if m != nil {
		return m.Txs
	}
	return nil
}

func (m *MsgBlock) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

type MsgTx struct {
	Version  int32    `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Vin      []*TxIn  `protobuf:"bytes,2,rep,name=vin" json:"vin,omitempty"`
	Vout     []*TxOut `protobuf:"bytes,3,rep,name=vout" json:"vout,omitempty"`
	Magic    uint32   `protobuf:"varint,4,opt,name=magic,proto3" json:"magic,omitempty"`
	LockTime int64    `protobuf:"varint,5,opt,name=lock_time,json=lockTime,proto3" json:"lock_time,omitempty"`
}

func (m *MsgTx) Reset()                    { *m = MsgTx{} }
func (m *MsgTx) String() string            { return proto.CompactTextString(m) }
func (*MsgTx) ProtoMessage()               {}
func (*MsgTx) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{2} }

func (m *MsgTx) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *MsgTx) GetVin() []*TxIn {
	if m != nil {
		return m.Vin
	}
	return nil
}

func (m *MsgTx) GetVout() []*TxOut {
	if m != nil {
		return m.Vout
	}
	return nil
}

func (m *MsgTx) GetMagic() uint32 {
	if m != nil {
		return m.Magic
	}
	return 0
}

func (m *MsgTx) GetLockTime() int64 {
	if m != nil {
		return m.LockTime
	}
	return 0
}

type TxIn struct {
	PrevOutPoint *OutPoint `protobuf:"bytes,1,opt,name=prev_out_point,json=prevOutPoint" json:"prev_out_point,omitempty"`
	ScriptSig    []byte    `protobuf:"bytes,2,opt,name=script_sig,json=scriptSig,proto3" json:"script_sig,omitempty"`
	Sequence     uint32    `protobuf:"varint,3,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (m *TxIn) Reset()                    { *m = TxIn{} }
func (m *TxIn) String() string            { return proto.CompactTextString(m) }
func (*TxIn) ProtoMessage()               {}
func (*TxIn) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{3} }

func (m *TxIn) GetPrevOutPoint() *OutPoint {
	if m != nil {
		return m.PrevOutPoint
	}
	return nil
}

func (m *TxIn) GetScriptSig() []byte {
	if m != nil {
		return m.ScriptSig
	}
	return nil
}

func (m *TxIn) GetSequence() uint32 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

type TxOut struct {
	Value        int64  `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	ScriptPubKey []byte `protobuf:"bytes,2,opt,name=script_pub_key,json=scriptPubKey,proto3" json:"script_pub_key,omitempty"`
}

func (m *TxOut) Reset()                    { *m = TxOut{} }
func (m *TxOut) String() string            { return proto.CompactTextString(m) }
func (*TxOut) ProtoMessage()               {}
func (*TxOut) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{4} }

func (m *TxOut) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *TxOut) GetScriptPubKey() []byte {
	if m != nil {
		return m.ScriptPubKey
	}
	return nil
}

type OutPoint struct {
	Hash  []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Index uint32 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *OutPoint) Reset()                    { *m = OutPoint{} }
func (m *OutPoint) String() string            { return proto.CompactTextString(m) }
func (*OutPoint) ProtoMessage()               {}
func (*OutPoint) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{5} }

func (m *OutPoint) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *OutPoint) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

type UtxoWrap struct {
	Value        int64  `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	ScriptPubKey []byte `protobuf:"bytes,2,opt,name=script_pubKey,json=scriptPubKey,proto3" json:"script_pubKey,omitempty"`
	BlockHeight  int32  `protobuf:"varint,3,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	IsPacked     bool   `protobuf:"varint,4,opt,name=is_packed,json=isPacked,proto3" json:"is_packed,omitempty"`
	IsCoinbase   bool   `protobuf:"varint,5,opt,name=is_coinbase,json=isCoinbase,proto3" json:"is_coinbase,omitempty"`
}

func (m *UtxoWrap) Reset()                    { *m = UtxoWrap{} }
func (m *UtxoWrap) String() string            { return proto.CompactTextString(m) }
func (*UtxoWrap) ProtoMessage()               {}
func (*UtxoWrap) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{6} }

func (m *UtxoWrap) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *UtxoWrap) GetScriptPubKey() []byte {
	if m != nil {
		return m.ScriptPubKey
	}
	return nil
}

func (m *UtxoWrap) GetBlockHeight() int32 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *UtxoWrap) GetIsPacked() bool {
	if m != nil {
		return m.IsPacked
	}
	return false
}

func (m *UtxoWrap) GetIsCoinbase() bool {
	if m != nil {
		return m.IsCoinbase
	}
	return false
}

func init() {
	proto.RegisterType((*BlockHeader)(nil), "corepb.BlockHeader")
	proto.RegisterType((*MsgBlock)(nil), "corepb.MsgBlock")
	proto.RegisterType((*MsgTx)(nil), "corepb.MsgTx")
	proto.RegisterType((*TxIn)(nil), "corepb.TxIn")
	proto.RegisterType((*TxOut)(nil), "corepb.TxOut")
	proto.RegisterType((*OutPoint)(nil), "corepb.OutPoint")
	proto.RegisterType((*UtxoWrap)(nil), "corepb.UtxoWrap")
}

func init() { proto.RegisterFile("block.proto", fileDescriptorBlock) }

var fileDescriptorBlock = []byte{
	// 498 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x53, 0xd1, 0x6e, 0x94, 0x40,
	0x14, 0x0d, 0x05, 0xb6, 0xec, 0x65, 0xa9, 0x66, 0x34, 0x06, 0x35, 0x5a, 0x44, 0x63, 0x48, 0x4c,
	0xf6, 0xa1, 0x1a, 0x3f, 0xc0, 0xbe, 0xd4, 0x34, 0x4d, 0x37, 0xd3, 0x35, 0x3e, 0x12, 0x60, 0x27,
	0x30, 0xd9, 0x2e, 0x33, 0x32, 0x03, 0x61, 0xbf, 0xc4, 0x47, 0x9f, 0xfc, 0x4f, 0x33, 0x17, 0x68,
	0xd7, 0x44, 0xfb, 0xb6, 0xe7, 0xdc, 0xbb, 0xe7, 0xdc, 0x7b, 0x2e, 0x03, 0x7e, 0x7e, 0x2b, 0x8a,
	0xed, 0x52, 0x36, 0x42, 0x0b, 0x32, 0x2b, 0x44, 0xc3, 0x64, 0x1e, 0xff, 0xb2, 0xc0, 0xff, 0x62,
	0xf8, 0x0b, 0x96, 0x6d, 0x58, 0x43, 0x42, 0x38, 0xee, 0x58, 0xa3, 0xb8, 0xa8, 0x43, 0x2b, 0xb2,
	0x12, 0x97, 0x4e, 0x90, 0xbc, 0x87, 0x47, 0xb2, 0x61, 0x5d, 0x8a, 0x2a, 0x69, 0x95, 0xa9, 0x2a,
	0x3c, 0x8a, 0xac, 0x64, 0x41, 0x03, 0x43, 0x0f, 0x1a, 0x99, 0xaa, 0xc8, 0x73, 0xf0, 0x74, 0xaf,
	0xd2, 0x46, 0x08, 0x1d, 0xda, 0xd8, 0x70, 0xac, 0x7b, 0x45, 0x85, 0xd0, 0xe4, 0x15, 0x80, 0xe6,
	0x3b, 0x96, 0x2a, 0x9d, 0xed, 0x64, 0xe8, 0x44, 0x56, 0x62, 0xd3, 0xb9, 0x61, 0x6e, 0x0c, 0x41,
	0x9e, 0x82, 0xbb, 0xcb, 0x4a, 0x5e, 0x84, 0x6e, 0x64, 0x25, 0x01, 0x1d, 0x40, 0x2c, 0xc1, 0xbb,
	0x52, 0x25, 0xea, 0x93, 0x0f, 0x30, 0xab, 0x70, 0x4e, 0x1c, 0xce, 0x3f, 0x7b, 0xb2, 0x1c, 0xd6,
	0x58, 0x1e, 0xac, 0x40, 0xc7, 0x16, 0x72, 0x0a, 0xb6, 0xee, 0x55, 0x78, 0x14, 0xd9, 0x89, 0x7f,
	0x16, 0x4c, 0x9d, 0x57, 0xaa, 0x5c, 0xf7, 0xd4, 0x54, 0xc8, 0x33, 0xa3, 0xc6, 0xcb, 0x6a, 0x98,
	0xd3, 0xa5, 0x23, 0x8a, 0x7f, 0x5a, 0xe0, 0x62, 0xdb, 0x03, 0x69, 0xbc, 0x06, 0xbb, 0xe3, 0xf5,
	0x28, 0xbe, 0x98, 0xc4, 0xd7, 0xfd, 0xd7, 0x9a, 0x9a, 0x02, 0x79, 0x03, 0x4e, 0x27, 0x5a, 0xa3,
	0xfc, 0x97, 0xfb, 0xba, 0xbf, 0x6e, 0x35, 0xc5, 0xd2, 0xfd, 0xba, 0xce, 0xc1, 0xba, 0xe4, 0x25,
	0xcc, 0x31, 0x60, 0x13, 0x0b, 0x06, 0x61, 0x53, 0xcf, 0x10, 0x6b, 0xbe, 0x63, 0xf1, 0x1e, 0x1c,
	0x63, 0x41, 0x3e, 0xc3, 0x09, 0xde, 0x42, 0xb4, 0x3a, 0x95, 0x82, 0xd7, 0x7a, 0xcc, 0xe3, 0xf1,
	0xe4, 0x73, 0xdd, 0xea, 0x95, 0xe1, 0xe9, 0xc2, 0xf4, 0x4d, 0xc8, 0x1c, 0x40, 0x15, 0x0d, 0x97,
	0x3a, 0x55, 0xbc, 0x1c, 0xcf, 0x37, 0x1f, 0x98, 0x1b, 0x5e, 0x92, 0x17, 0xe0, 0x29, 0xf6, 0xa3,
	0x65, 0x75, 0xc1, 0x30, 0x92, 0x80, 0xde, 0xe1, 0xf8, 0x1c, 0x5c, 0x1c, 0xde, 0x8c, 0xdd, 0x65,
	0xb7, 0x2d, 0x43, 0x4b, 0x9b, 0x0e, 0x80, 0xbc, 0x83, 0x93, 0x51, 0x59, 0xb6, 0x79, 0xba, 0x65,
	0xfb, 0x51, 0x7d, 0x31, 0xb0, 0xab, 0x36, 0xbf, 0x64, 0xfb, 0xf8, 0x13, 0x78, 0x77, 0xb3, 0x10,
	0x70, 0xf0, 0x23, 0xb2, 0xb0, 0x0f, 0x7f, 0x1b, 0x6d, 0x5e, 0x6f, 0x58, 0x8f, 0x7f, 0x0e, 0xe8,
	0x00, 0xe2, 0xdf, 0x16, 0x78, 0xdf, 0x74, 0x2f, 0xbe, 0x37, 0x99, 0xfc, 0x8f, 0xfd, 0x5b, 0x08,
	0xee, 0xed, 0x2f, 0xff, 0xed, 0x4e, 0xa2, 0xf1, 0x09, 0x5c, 0x1c, 0x1e, 0xfd, 0x90, 0x32, 0xe1,
	0x73, 0x95, 0xca, 0xac, 0xd8, 0xb2, 0x0d, 0x9e, 0xc5, 0xa3, 0x1e, 0x57, 0x2b, 0xc4, 0xe4, 0x14,
	0x7c, 0xae, 0xd2, 0x42, 0xf0, 0x3a, 0xcf, 0xd4, 0x70, 0x1b, 0x8f, 0x02, 0x57, 0xe7, 0x23, 0x93,
	0xcf, 0xf0, 0x69, 0x7d, 0xfc, 0x13, 0x00, 0x00, 0xff, 0xff, 0x2e, 0x4e, 0xd7, 0x0e, 0x69, 0x03,
	0x00, 0x00,
}
